/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: bt.swigcxx

#define SWIGMODULE bt

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#include <BulletCollision/CollisionDispatch/btCollisionWorld.h>
typedef btCollisionWorld::RayResultCallback RayResultCallback;
typedef btCollisionWorld::ConvexResultCallback ConvexResultCallback;
typedef btCollisionWorld::ContactResultCallback ContactResultCallback;

#include <BulletCollision/BroadphaseCollision/btDbvt.h>
typedef btDbvt::sStkNN sStkNN;
typedef btDbvt::sStkNPS sStkNPS;
typedef btDbvt::ICollide ICollide;
typedef btDbvt::IWriter IWriter;
typedef btDbvt::IClone IClone;

#include <BulletCollision/BroadphaseCollision/btMultiSapBroadphase.h>
typedef btMultiSapBroadphase::btMultiSapProxy btMultiSapProxy;

#include <BulletDynamics/Dynamics/btRigidBody.h>
typedef btRigidBody::btRigidBodyConstructionInfo btRigidBodyConstructionInfo;

#include <BulletDynamics/ConstraintSolver/btTypedConstraint.h>
typedef btTypedConstraint::btConstraintInfo1 btConstraintInfo1;
typedef btTypedConstraint::btConstraintInfo2 btConstraintInfo2;


#include <BulletDynamics/Vehicle/btVehicleRaycaster.h>
typedef btVehicleRaycaster::btVehicleRaycasterResult btVehicleRaycasterResult;

#include <BulletDynamics/Vehicle/btWheelInfo.h>
typedef btWheelInfo::RaycastInfo RaycastInfo;

#include <btBulletDynamicsCommon.h>

#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_btGetVersion(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)btGetVersion();
  swig_a->result = result; 
}


void
_wrap_btInfinityMask_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  btInfinityMask = arg1;
  
}


void
_wrap_btInfinityMask_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)btInfinityMask;
  swig_a->result = result; 
}


void
_wrap_btSqrt(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btSqrt(arg1);
  swig_a->result = result; 
}


void
_wrap_btFabs(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btFabs(arg1);
  swig_a->result = result; 
}


void
_wrap_btCos(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btCos(arg1);
  swig_a->result = result; 
}


void
_wrap_btSin(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btSin(arg1);
  swig_a->result = result; 
}


void
_wrap_btTan(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btTan(arg1);
  swig_a->result = result; 
}


void
_wrap_btAcos(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btAcos(arg1);
  swig_a->result = result; 
}


void
_wrap_btAsin(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btAsin(arg1);
  swig_a->result = result; 
}


void
_wrap_btAtan(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btAtan(arg1);
  swig_a->result = result; 
}


void
_wrap_btAtan2(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btScalar)btAtan2(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btExp(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btExp(arg1);
  swig_a->result = result; 
}


void
_wrap_btLog(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btLog(arg1);
  swig_a->result = result; 
}


void
_wrap_btPow(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btScalar)btPow(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btFmod(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btScalar)btFmod(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btAtan2Fast(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btScalar)btAtan2Fast(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btFuzzyZero(void *swig_v)
{
  btScalar arg1 ;
  bool result;
  
  struct swigargs {
    float arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (bool)btFuzzyZero(arg1);
  swig_a->result = result; 
}


void
_wrap_btEqual(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (bool)btEqual(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btGreaterEqual(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (bool)btGreaterEqual(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btIsNegative(void *swig_v)
{
  btScalar arg1 ;
  int result;
  
  struct swigargs {
    float arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (int)btIsNegative(arg1);
  swig_a->result = result; 
}


void
_wrap_btRadians(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btRadians(arg1);
  swig_a->result = result; 
}


void
_wrap_btDegrees(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btDegrees(arg1);
  swig_a->result = result; 
}


void
_wrap_btFsel(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (btScalar)btFsel(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btMachineIsLittleEndian(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)btMachineIsLittleEndian();
  swig_a->result = result; 
}


void
_wrap_btSelect__SWIG_0(void *swig_v)
{
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  
  result = (unsigned int)btSelect(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSelect__SWIG_1(void *swig_v)
{
  unsigned int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)btSelect(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSelect__SWIG_2(void *swig_v)
{
  unsigned int arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  struct swigargs {
    intgo arg1;
    float arg2;
    float arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  arg3 = (float)swig_a->arg3; 
  
  result = (float)btSelect(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSwapEndian__SWIG_0(void *swig_v)
{
  unsigned int arg1 ;
  unsigned int result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  
  result = (unsigned int)btSwapEndian(arg1);
  swig_a->result = result; 
}


void
_wrap_btSwapEndian__SWIG_1(void *swig_v)
{
  unsigned short arg1 ;
  unsigned short result;
  
  struct swigargs {
    short arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned short)swig_a->arg1; 
  
  result = (unsigned short)btSwapEndian(arg1);
  swig_a->result = result; 
}


void
_wrap_btSwapEndian__SWIG_2(void *swig_v)
{
  int arg1 ;
  unsigned int result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (unsigned int)btSwapEndian(arg1);
  swig_a->result = result; 
}


void
_wrap_btSwapEndian__SWIG_3(void *swig_v)
{
  short arg1 ;
  unsigned short result;
  
  struct swigargs {
    short arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (short)swig_a->arg1; 
  
  result = (unsigned short)btSwapEndian(arg1);
  swig_a->result = result; 
}


void
_wrap_btSwapEndianFloat(void *swig_v)
{
  float arg1 ;
  unsigned int result;
  
  struct swigargs {
    float arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (float)swig_a->arg1; 
  
  result = (unsigned int)btSwapEndianFloat(arg1);
  swig_a->result = result; 
}


void
_wrap_btUnswapEndianFloat(void *swig_v)
{
  unsigned int arg1 ;
  float result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  
  result = (float)btUnswapEndianFloat(arg1);
  swig_a->result = result; 
}


void
_wrap_btSwapEndianDouble(void *swig_v)
{
  double arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  struct swigargs {
    double arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (double)swig_a->arg1; 
  arg2 = (unsigned char *)swig_a->arg2.p; 
  
  btSwapEndianDouble(arg1,arg2);
  
}


void
_wrap_btUnswapEndianDouble(void *swig_v)
{
  unsigned char *arg1 = (unsigned char *) 0 ;
  double result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned char *)swig_a->arg1.p; 
  
  result = (double)btUnswapEndianDouble((unsigned char const *)arg1);
  swig_a->result = result; 
}


void
_wrap_btLargeDot(void *swig_v)
{
  btScalar *arg1 = (btScalar *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btScalar *arg1;
    btScalar *arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScalar **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)btLargeDot((float const *)arg1,(float const *)arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btNormalizeAngle(void *swig_v)
{
  btScalar arg1 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btScalar)btNormalizeAngle(arg1);
  swig_a->result = result; 
}


void
_wrap_new_btTypedObject(void *swig_v)
{
  int arg1 ;
  btTypedObject *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    btTypedObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (btTypedObject *)new btTypedObject(arg1);
  *(btTypedObject **)&swig_a->result = result; 
}


void
_wrap_btTypedObject_m_objectType_set(void *swig_v)
{
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_objectType = arg2;
  
}


void
_wrap_btTypedObject_m_objectType_get(void *swig_v)
{
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  struct swigargs {
    btTypedObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedObject **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btTypedObject_getObjectType(void *swig_v)
{
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  struct swigargs {
    btTypedObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedObject **)&swig_a->arg1; 
  
  result = (int)((btTypedObject const *)arg1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_delete_btTypedObject(void *swig_v)
{
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  
  struct swigargs {
    btTypedObject *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedObject **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btAlignedAllocInternal(void *swig_v)
{
  size_t arg1 ;
  int arg2 ;
  void *result = 0 ;
  
  struct swigargs {
    long long arg1;
    intgo arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (size_t)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (void *)btAlignedAllocInternal(arg1,arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btAlignedFreeInternal(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  
  struct swigargs {
    void *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  
  btAlignedFreeInternal(arg1);
  
}


void
_wrap_btAlignedAllocSetCustom(void *swig_v)
{
  btAllocFunc *arg1 = (btAllocFunc *) 0 ;
  btFreeFunc *arg2 = (btFreeFunc *) 0 ;
  
  struct swigargs {
    btAllocFunc *arg1;
    btFreeFunc *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAllocFunc **)&swig_a->arg1; 
  arg2 = *(btFreeFunc **)&swig_a->arg2; 
  
  btAlignedAllocSetCustom(arg1,arg2);
  
}


void
_wrap_btAlignedAllocSetCustomAligned(void *swig_v)
{
  btAlignedAllocFunc *arg1 = (btAlignedAllocFunc *) 0 ;
  btAlignedFreeFunc *arg2 = (btAlignedFreeFunc *) 0 ;
  
  struct swigargs {
    btAlignedAllocFunc *arg1;
    btAlignedFreeFunc *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAlignedAllocFunc **)&swig_a->arg1; 
  arg2 = *(btAlignedFreeFunc **)&swig_a->arg2; 
  
  btAlignedAllocSetCustomAligned(arg1,arg2);
  
}


void
_wrap_btVector3_m_floats_set(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 ;
  
  struct swigargs {
    btVector3 *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
}


void
_wrap_btVector3_m_floats_get(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btScalar *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *)(btScalar *) ((arg1)->m_floats);
  *(btScalar **)&swig_a->result = result; 
}


void
_wrap_new_btVector3__SWIG_0(void *swig_v)
{
  btVector3 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btVector3 *)new btVector3();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_new_btVector3__SWIG_1(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = (btVector3 *)new btVector3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btVector3_dot(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btVector3 const *)arg1)->dot((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector3_length2(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar)((btVector3 const *)arg1)->length2();
  swig_a->result = result; 
}


void
_wrap_btVector3_length(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar)((btVector3 const *)arg1)->length();
  swig_a->result = result; 
}


void
_wrap_btVector3_norm(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar)((btVector3 const *)arg1)->norm();
  swig_a->result = result; 
}


void
_wrap_btVector3_distance2(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btVector3 const *)arg1)->distance2((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector3_distance(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btVector3 const *)arg1)->distance((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector3_safeNormalize(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->safeNormalize();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btVector3_normalize(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->normalize();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btVector3_normalized(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = ((btVector3 const *)arg1)->normalized();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector3_rotate(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = ((btVector3 const *)arg1)->rotate((btVector3 const &)*arg2,arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector3_angle(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btVector3 const *)arg1)->angle((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector3_absolute(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = ((btVector3 const *)arg1)->absolute();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector3_cross(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btVector3 const *)arg1)->cross((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector3_triple(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (btScalar)((btVector3 const *)arg1)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btVector3_minAxis(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (int)((btVector3 const *)arg1)->minAxis();
  swig_a->result = result; 
}


void
_wrap_btVector3_maxAxis(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (int)((btVector3 const *)arg1)->maxAxis();
  swig_a->result = result; 
}


void
_wrap_btVector3_furthestAxis(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (int)((btVector3 const *)arg1)->furthestAxis();
  swig_a->result = result; 
}


void
_wrap_btVector3_closestAxis(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (int)((btVector3 const *)arg1)->closestAxis();
  swig_a->result = result; 
}


void
_wrap_btVector3_setInterpolate3(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btVector3_lerp(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = ((btVector3 const *)arg1)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector3_getX(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->getX();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_getY(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->getY();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_getZ(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->getZ();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_setX(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setX(arg2);
  
}


void
_wrap_btVector3_setY(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setY(arg2);
  
}


void
_wrap_btVector3_setZ(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setZ(arg2);
  
}


void
_wrap_btVector3_setW(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setW(arg2);
  
}


void
_wrap_btVector3_x(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->x();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_y(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->y();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_z(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->z();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_w(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btScalar *) &((btVector3 const *)arg1)->w();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector3_setMax(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setMax((btVector3 const &)*arg2);
  
}


void
_wrap_btVector3_setMin(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setMin((btVector3 const &)*arg2);
  
}


void
_wrap_btVector3_setValue(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btVector3_getSkewSymmetricMatrix(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btVector3 const *)arg1)->getSkewSymmetricMatrix(arg2,arg3,arg4);
  
}


void
_wrap_btVector3_setZero(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  struct swigargs {
    btVector3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  (arg1)->setZero();
  
}


void
_wrap_btVector3_isZero(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (bool)((btVector3 const *)arg1)->isZero();
  swig_a->result = result; 
}


void
_wrap_btVector3_fuzzyZero(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (bool)((btVector3 const *)arg1)->fuzzyZero();
  swig_a->result = result; 
}


void
_wrap_btVector3_serialize(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  ((btVector3 const *)arg1)->serialize(*arg2);
  
}


void
_wrap_btVector3_deSerialize(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  (arg1)->deSerialize((btVector3FloatData const &)*arg2);
  
}


void
_wrap_btVector3_serializeFloat(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  ((btVector3 const *)arg1)->serializeFloat(*arg2);
  
}


void
_wrap_btVector3_deSerializeFloat(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  (arg1)->deSerializeFloat((btVector3FloatData const &)*arg2);
  
}


void
_wrap_btVector3_serializeDouble(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  ((btVector3 const *)arg1)->serializeDouble(*arg2);
  
}


void
_wrap_btVector3_deSerializeDouble(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  (arg1)->deSerializeDouble((btVector3DoubleData const &)*arg2);
  
}


void
_wrap_btVector3_maxDot(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long long arg3;
    btScalar *arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (long)swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  result = (long)((btVector3 const *)arg1)->maxDot((btVector3 const *)arg2,arg3,*arg4);
  swig_a->result = result; 
}


void
_wrap_btVector3_minDot(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long long arg3;
    btScalar *arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (long)swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  result = (long)((btVector3 const *)arg1)->minDot((btVector3 const *)arg2,arg3,*arg4);
  swig_a->result = result; 
}


void
_wrap_btVector3_dot3(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = ((btVector3 const *)arg1)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_delete_btVector3(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  struct swigargs {
    btVector3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDot(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)btDot((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btDistance2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)btDistance2((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btDistance(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)btDistance((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btAngle__SWIG_0(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)btAngle((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btCross(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = btCross((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTriple(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (btScalar)btTriple((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_lerp(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = lerp((btVector3 const &)*arg1,(btVector3 const &)*arg2,(float const &)*arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_new_btVector4__SWIG_0(void *swig_v)
{
  btVector4 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btVector4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btVector4 *)new btVector4();
  *(btVector4 **)&swig_a->result = result; 
}


void
_wrap_new_btVector4__SWIG_1(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btVector4 *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    float arg4;
    long : 0;
    btVector4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  result = (btVector4 *)new btVector4((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  *(btVector4 **)&swig_a->result = result; 
}


void
_wrap_btVector4_absolute4(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector4 result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btVector4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  result = ((btVector4 const *)arg1)->absolute4();
  *(btVector4 **)&swig_a->result = new btVector4(result); 
}


void
_wrap_btVector4_getW(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  result = (btScalar)((btVector4 const *)arg1)->getW();
  swig_a->result = result; 
}


void
_wrap_btVector4_maxAxis4(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  result = (int)((btVector4 const *)arg1)->maxAxis4();
  swig_a->result = result; 
}


void
_wrap_btVector4_minAxis4(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  result = (int)((btVector4 const *)arg1)->minAxis4();
  swig_a->result = result; 
}


void
_wrap_btVector4_closestAxis4(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  result = (int)((btVector4 const *)arg1)->closestAxis4();
  swig_a->result = result; 
}


void
_wrap_btVector4_setValue(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  arg5 = (btScalar *)&swig_a->arg5; 
  
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
  
}


void
_wrap_delete_btVector4(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  
  struct swigargs {
    btVector4 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtVector4_M_floats(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 ;
  
  struct swigargs {
    btVector4 *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  ;
  
}


void
_wrap_GetbtVector4_M_floats(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btScalar *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *)(btScalar *) ((swig_b0)->m_floats);
  *(btScalar **)&swig_a->result = result; 
}


void
_wrap_btVector4_dot(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->dot((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector4_length2(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->length2();
  swig_a->result = result; 
}


void
_wrap_btVector4_length(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->length();
  swig_a->result = result; 
}


void
_wrap_btVector4_norm(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->norm();
  swig_a->result = result; 
}


void
_wrap_btVector4_distance2(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->distance2((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector4_distance(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->distance((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector4_safeNormalize(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btVector3 *) &(swig_b0)->safeNormalize();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btVector4_normalize(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btVector3 *) &(swig_b0)->normalize();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btVector4_normalized(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->normalized();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector4_rotate(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->rotate((btVector3 const &)*arg2,arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector4_angle(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->angle((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btVector4_absolute(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->absolute();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector4_cross(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->cross((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector4_triple(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar)((btVector3 const *)swig_b0)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btVector4_minAxis(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (int)((btVector3 const *)swig_b0)->minAxis();
  swig_a->result = result; 
}


void
_wrap_btVector4_maxAxis(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (int)((btVector3 const *)swig_b0)->maxAxis();
  swig_a->result = result; 
}


void
_wrap_btVector4_furthestAxis(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (int)((btVector3 const *)swig_b0)->furthestAxis();
  swig_a->result = result; 
}


void
_wrap_btVector4_closestAxis(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (int)((btVector3 const *)swig_b0)->closestAxis();
  swig_a->result = result; 
}


void
_wrap_btVector4_setInterpolate3(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btVector4_lerp(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btVector4_getX(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->getX();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_getY(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->getY();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_getZ(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->getZ();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_setX(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setX(arg2);
  
}


void
_wrap_btVector4_setY(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setY(arg2);
  
}


void
_wrap_btVector4_setZ(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setZ(arg2);
  
}


void
_wrap_btVector4_setW(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btVector4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setW(arg2);
  
}


void
_wrap_btVector4_x(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->x();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_y(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->y();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_z(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->z();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_w(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (btScalar *) &((btVector3 const *)swig_b0)->w();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btVector4_setMax(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setMax((btVector3 const &)*arg2);
  
}


void
_wrap_btVector4_setMin(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setMin((btVector3 const &)*arg2);
  
}


void
_wrap_btVector4_getSkewSymmetricMatrix(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  ((btVector3 const *)swig_b0)->getSkewSymmetricMatrix(arg2,arg3,arg4);
  
}


void
_wrap_btVector4_setZero(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  
  struct swigargs {
    btVector4 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->setZero();
  
}


void
_wrap_btVector4_isZero(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  bool result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (bool)((btVector3 const *)swig_b0)->isZero();
  swig_a->result = result; 
}


void
_wrap_btVector4_fuzzyZero(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  bool result;
  
  struct swigargs {
    btVector4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (bool)((btVector3 const *)swig_b0)->fuzzyZero();
  swig_a->result = result; 
}


void
_wrap_btVector4_serialize(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  ((btVector3 const *)swig_b0)->serialize(*arg2);
  
}


void
_wrap_btVector4_deSerialize(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->deSerialize((btVector3FloatData const &)*arg2);
  
}


void
_wrap_btVector4_serializeFloat(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  ((btVector3 const *)swig_b0)->serializeFloat(*arg2);
  
}


void
_wrap_btVector4_deSerializeFloat(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->deSerializeFloat((btVector3FloatData const &)*arg2);
  
}


void
_wrap_btVector4_serializeDouble(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  ((btVector3 const *)swig_b0)->serializeDouble(*arg2);
  
}


void
_wrap_btVector4_deSerializeDouble(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  (swig_b0)->deSerializeDouble((btVector3DoubleData const &)*arg2);
  
}


void
_wrap_btVector4_maxDot(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long long arg3;
    btScalar *arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (long)swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (long)((btVector3 const *)swig_b0)->maxDot((btVector3 const *)arg2,arg3,*arg4);
  swig_a->result = result; 
}


void
_wrap_btVector4_minDot(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    long long arg3;
    btScalar *arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (long)swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = (long)((btVector3 const *)swig_b0)->minDot((btVector3 const *)arg2,arg3,*arg4);
  swig_a->result = result; 
}


void
_wrap_btVector4_dot3(void *swig_v)
{
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btVector3 *swig_b0 = (btVector3 *)swig_a->arg1;
  result = ((btVector3 const *)swig_b0)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSwapScalarEndian(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  
  struct swigargs {
    float arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  btSwapScalarEndian((float const &)*arg1,*arg2);
  
}


void
_wrap_btSwapVector3Endian(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btSwapVector3Endian((btVector3 const &)*arg1,*arg2);
  
}


void
_wrap_btUnSwapVector3Endian(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  btUnSwapVector3Endian(*arg1);
  
}


void
_wrap_btVector3FloatData_m_floats_set(void *swig_v)
{
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *arg2 ;
  
  struct swigargs {
    btVector3FloatData *arg1;
    float *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3FloatData **)&swig_a->arg1; 
  arg2 = *(float **)&swig_a->arg2; 
  
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


void
_wrap_btVector3FloatData_m_floats_get(void *swig_v)
{
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  struct swigargs {
    btVector3FloatData *arg1;
    long : 0;
    float *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3FloatData **)&swig_a->arg1; 
  
  result = (float *)(float *) ((arg1)->m_floats);
  *(float **)&swig_a->result = result; 
}


void
_wrap_new_btVector3FloatData(void *swig_v)
{
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btVector3FloatData *)new btVector3FloatData();
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btVector3FloatData(void *swig_v)
{
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btVector3FloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3FloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btVector3DoubleData_m_floats_set(void *swig_v)
{
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  struct swigargs {
    btVector3DoubleData *arg1;
    double *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3DoubleData **)&swig_a->arg1; 
  arg2 = *(double **)&swig_a->arg2; 
  
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


void
_wrap_btVector3DoubleData_m_floats_get(void *swig_v)
{
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  struct swigargs {
    btVector3DoubleData *arg1;
    long : 0;
    double *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3DoubleData **)&swig_a->arg1; 
  
  result = (double *)(double *) ((arg1)->m_floats);
  *(double **)&swig_a->result = result; 
}


void
_wrap_new_btVector3DoubleData(void *swig_v)
{
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btVector3DoubleData *)new btVector3DoubleData();
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btVector3DoubleData(void *swig_v)
{
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btVector3DoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3DoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuadWord_getX(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getX();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_getY(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getY();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_getZ(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getZ();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_setX(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setX(arg2);
  
}


void
_wrap_btQuadWord_setY(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setY(arg2);
  
}


void
_wrap_btQuadWord_setZ(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setZ(arg2);
  
}


void
_wrap_btQuadWord_setW(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setW(arg2);
  
}


void
_wrap_btQuadWord_x(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->x();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_y(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->y();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_z(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->z();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_w(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuadWord const *)arg1)->w();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuadWord_setValue__SWIG_0(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btQuadWord_setValue__SWIG_1(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  arg5 = (btScalar *)&swig_a->arg5; 
  
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
  
}


void
_wrap_new_btQuadWord__SWIG_0(void *swig_v)
{
  btQuadWord *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuadWord *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuadWord *)new btQuadWord();
  *(btQuadWord **)&swig_a->result = result; 
}


void
_wrap_new_btQuadWord__SWIG_1(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btQuadWord *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    long : 0;
    btQuadWord *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  *(btQuadWord **)&swig_a->result = result; 
}


void
_wrap_new_btQuadWord__SWIG_2(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btQuadWord *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    float arg4;
    long : 0;
    btQuadWord *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  *(btQuadWord **)&swig_a->result = result; 
}


void
_wrap_btQuadWord_setMax(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    btQuadWord *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = *(btQuadWord **)&swig_a->arg2; 
  
  (arg1)->setMax((btQuadWord const &)*arg2);
  
}


void
_wrap_btQuadWord_setMin(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
    btQuadWord *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  arg2 = *(btQuadWord **)&swig_a->arg2; 
  
  (arg1)->setMin((btQuadWord const &)*arg2);
  
}


void
_wrap_delete_btQuadWord(void *swig_v)
{
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  
  struct swigargs {
    btQuadWord *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuadWord **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btQuaternion__SWIG_0(void *swig_v)
{
  btQuaternion *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuaternion *)new btQuaternion();
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_new_btQuaternion__SWIG_1(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btQuaternion *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    float arg4;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_new_btQuaternion__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btQuaternion *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  
  result = (btQuaternion *)new btQuaternion((btVector3 const &)*arg1,(btScalar const &)*arg2);
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_new_btQuaternion__SWIG_3(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btQuaternion *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_btQuaternion_setRotation(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  (arg1)->setRotation((btVector3 const &)*arg2,(btScalar const &)*arg3);
  
}


void
_wrap_btQuaternion_setEuler(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  (arg1)->setEuler((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btQuaternion_setEulerZYX(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  (arg1)->setEulerZYX((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btQuaternion_dot(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = (btScalar)((btQuaternion const *)arg1)->dot((btQuaternion const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btQuaternion_length2(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar)((btQuaternion const *)arg1)->length2();
  swig_a->result = result; 
}


void
_wrap_btQuaternion_length(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar)((btQuaternion const *)arg1)->length();
  swig_a->result = result; 
}


void
_wrap_btQuaternion_normalize(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btQuaternion *) &(arg1)->normalize();
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_btQuaternion_normalized(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = ((btQuaternion const *)arg1)->normalized();
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btQuaternion_angle(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = (btScalar)((btQuaternion const *)arg1)->angle((btQuaternion const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btQuaternion_angleShortestPath(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = (btScalar)((btQuaternion const *)arg1)->angleShortestPath((btQuaternion const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btQuaternion_getAngle(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar)((btQuaternion const *)arg1)->getAngle();
  swig_a->result = result; 
}


void
_wrap_btQuaternion_getAngleShortestPath(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar)((btQuaternion const *)arg1)->getAngleShortestPath();
  swig_a->result = result; 
}


void
_wrap_btQuaternion_getAxis(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = ((btQuaternion const *)arg1)->getAxis();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btQuaternion_inverse(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = ((btQuaternion const *)arg1)->inverse();
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btQuaternion_farthest(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = ((btQuaternion const *)arg1)->farthest((btQuaternion const &)*arg2);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btQuaternion_nearest(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = ((btQuaternion const *)arg1)->nearest((btQuaternion const &)*arg2);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btQuaternion_slerp(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    float arg3;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = ((btQuaternion const *)arg1)->slerp((btQuaternion const &)*arg2,(btScalar const &)*arg3);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btQuaternion_getIdentity(void *swig_v)
{
  btQuaternion *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuaternion *) &btQuaternion::getIdentity();
  *(btQuaternion **)&swig_a->result = result; 
}


void
_wrap_btQuaternion_getW(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar *) &((btQuaternion const *)arg1)->getW();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_delete_btQuaternion(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuaternion_getX(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->getX();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_getY(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->getY();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_getZ(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->getZ();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_setX(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setX(arg2);
  
}


void
_wrap_btQuaternion_setY(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setY(arg2);
  
}


void
_wrap_btQuaternion_setZ(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setZ(arg2);
  
}


void
_wrap_btQuaternion_setW(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setW(arg2);
  
}


void
_wrap_btQuaternion_x(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->x();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_y(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->y();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_z(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->z();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_w(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  result = (btScalar *) &((btQuadWord const *)swig_b0)->w();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btQuaternion_setValue__SWIG_0(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btQuaternion_setValue__SWIG_1(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  arg5 = (btScalar *)&swig_a->arg5; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
  
}


void
_wrap_btQuaternion_setMax(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuadWord *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuadWord **)&swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setMax((btQuadWord const &)*arg2);
  
}


void
_wrap_btQuaternion_setMin(void *swig_v)
{
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuadWord *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuadWord **)&swig_a->arg2; 
  
  btQuadWord *swig_b0 = (btQuadWord *)swig_a->arg1;
  (swig_b0)->setMin((btQuadWord const &)*arg2);
  
}


void
_wrap_dot(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = (btScalar)dot((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_length(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btScalar)length((btQuaternion const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_btAngle__SWIG_1(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  result = (btScalar)btAngle((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_inverse(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = inverse((btQuaternion const &)*arg1);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_slerp(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    float arg3;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  
  result = slerp((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,(float const &)*arg3);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_quatRotate(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btQuaternion *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = quatRotate((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_shortestArcQuat(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = shortestArcQuat((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_shortestArcQuatNormalize2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = shortestArcQuatNormalize2(*arg1,*arg2);
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_new_btMatrix3x3__SWIG_0(void *swig_v)
{
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMatrix3x3 *)new btMatrix3x3();
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_new_btMatrix3x3__SWIG_1(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btMatrix3x3 *)new btMatrix3x3((btQuaternion const &)*arg1);
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_new_btMatrix3x3__SWIG_2(void *swig_v)
{
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    float arg9;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar *)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  arg5 = (btScalar *)&swig_a->arg5; 
  arg6 = (btScalar *)&swig_a->arg6; 
  arg7 = (btScalar *)&swig_a->arg7; 
  arg8 = (btScalar *)&swig_a->arg8; 
  arg9 = (btScalar *)&swig_a->arg9; 
  
  result = (btMatrix3x3 *)new btMatrix3x3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9);
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_new_btMatrix3x3__SWIG_3(void *swig_v)
{
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = (btMatrix3x3 *)new btMatrix3x3((btMatrix3x3 const &)*arg1);
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_btMatrix3x3_getColumn(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = ((btMatrix3x3 const *)arg1)->getColumn(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMatrix3x3_getRow(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btVector3 *) &((btMatrix3x3 const *)arg1)->getRow(arg2);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btMatrix3x3_setFromOpenGLSubMatrix(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  (arg1)->setFromOpenGLSubMatrix((btScalar const *)arg2);
  
}


void
_wrap_btMatrix3x3_setValue(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar *arg10 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    float arg9;
    float arg10;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  arg5 = (btScalar *)&swig_a->arg5; 
  arg6 = (btScalar *)&swig_a->arg6; 
  arg7 = (btScalar *)&swig_a->arg7; 
  arg8 = (btScalar *)&swig_a->arg8; 
  arg9 = (btScalar *)&swig_a->arg9; 
  arg10 = (btScalar *)&swig_a->arg10; 
  
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9,(btScalar const &)*arg10);
  
}


void
_wrap_btMatrix3x3_setRotation(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btQuaternion *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
}


void
_wrap_btMatrix3x3_setEulerYPR(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (btScalar *)&swig_a->arg2; 
  arg3 = (btScalar *)&swig_a->arg3; 
  arg4 = (btScalar *)&swig_a->arg4; 
  
  (arg1)->setEulerYPR((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
}


void
_wrap_btMatrix3x3_setEulerZYX(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setEulerZYX(arg2,arg3,arg4);
  
}


void
_wrap_btMatrix3x3_setIdentity(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  (arg1)->setIdentity();
  
}


void
_wrap_btMatrix3x3_getIdentity(void *swig_v)
{
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMatrix3x3 *) &btMatrix3x3::getIdentity();
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_btMatrix3x3_getOpenGLSubMatrix(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  ((btMatrix3x3 const *)arg1)->getOpenGLSubMatrix(arg2);
  
}


void
_wrap_btMatrix3x3_getRotation(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btQuaternion *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  ((btMatrix3x3 const *)arg1)->getRotation(*arg2);
  
}


void
_wrap_btMatrix3x3_getEulerYPR(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btScalar *arg2;
    btScalar *arg3;
    btScalar *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  ((btMatrix3x3 const *)arg1)->getEulerYPR(*arg2,*arg3,*arg4);
  
}


void
_wrap_btMatrix3x3_getEulerZYX__SWIG_0(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  unsigned int arg5 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btScalar *arg2;
    btScalar *arg3;
    btScalar *arg4;
    intgo arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = (unsigned int)swig_a->arg5; 
  
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4,arg5);
  
}


void
_wrap_btMatrix3x3_getEulerZYX__SWIG_1(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btScalar *arg2;
    btScalar *arg3;
    btScalar *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4);
  
}


void
_wrap_btMatrix3x3_scaled(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btMatrix3x3 const *)arg1)->scaled((btVector3 const &)*arg2);
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_determinant(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->determinant();
  swig_a->result = result; 
}


void
_wrap_btMatrix3x3_adjoint(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = ((btMatrix3x3 const *)arg1)->adjoint();
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_absolute(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = ((btMatrix3x3 const *)arg1)->absolute();
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_transpose(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = ((btMatrix3x3 const *)arg1)->transpose();
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_inverse(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = ((btMatrix3x3 const *)arg1)->inverse();
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_transposeTimes(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3 *arg2;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  
  result = ((btMatrix3x3 const *)arg1)->transposeTimes((btMatrix3x3 const &)*arg2);
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_timesTranspose(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3 *arg2;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  
  result = ((btMatrix3x3 const *)arg1)->timesTranspose((btMatrix3x3 const &)*arg2);
  *(btMatrix3x3 **)&swig_a->result = new btMatrix3x3(result); 
}


void
_wrap_btMatrix3x3_tdotx(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotx((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btMatrix3x3_tdoty(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdoty((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btMatrix3x3_tdotz(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotz((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btMatrix3x3_diagonalize(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3 *arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->diagonalize(*arg2,arg3,arg4);
  
}


void
_wrap_btMatrix3x3_cofac(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btScalar result;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    intgo arg2;
    intgo arg3;
    intgo arg4;
    intgo arg5;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->cofac(arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btMatrix3x3_serialize(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  ((btMatrix3x3 const *)arg1)->serialize(*arg2);
  
}


void
_wrap_btMatrix3x3_serializeFloat(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  ((btMatrix3x3 const *)arg1)->serializeFloat(*arg2);
  
}


void
_wrap_btMatrix3x3_deSerialize(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  (arg1)->deSerialize((btMatrix3x3FloatData const &)*arg2);
  
}


void
_wrap_btMatrix3x3_deSerializeFloat(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  (arg1)->deSerializeFloat((btMatrix3x3FloatData const &)*arg2);
  
}


void
_wrap_btMatrix3x3_deSerializeDouble(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3DoubleData *arg2 = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3DoubleData **)&swig_a->arg2; 
  
  (arg1)->deSerializeDouble((btMatrix3x3DoubleData const &)*arg2);
  
}


void
_wrap_delete_btMatrix3x3(void *swig_v)
{
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMatrix3x3FloatData_m_el_set(void *swig_v)
{
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *arg2 ;
  
  struct swigargs {
    btMatrix3x3FloatData *arg1;
    btVector3FloatData (*arg2)[3];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3FloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
  
}


void
_wrap_btMatrix3x3FloatData_m_el_get(void *swig_v)
{
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btMatrix3x3FloatData *arg1;
    long : 0;
    btVector3FloatData (*result)[3];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3FloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_el);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_new_btMatrix3x3FloatData(void *swig_v)
{
  btMatrix3x3FloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMatrix3x3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMatrix3x3FloatData *)new btMatrix3x3FloatData();
  *(btMatrix3x3FloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btMatrix3x3FloatData(void *swig_v)
{
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  
  struct swigargs {
    btMatrix3x3FloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3FloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMatrix3x3DoubleData_m_el_set(void *swig_v)
{
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *arg2 ;
  
  struct swigargs {
    btMatrix3x3DoubleData *arg1;
    btVector3DoubleData (*arg2)[3];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3DoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  {
    size_t ii;
    btVector3DoubleData *b = (btVector3DoubleData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3DoubleData *) arg2 + ii);
  }
  
}


void
_wrap_btMatrix3x3DoubleData_m_el_get(void *swig_v)
{
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btMatrix3x3DoubleData *arg1;
    long : 0;
    btVector3DoubleData (*result)[3];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3DoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)(btVector3DoubleData *) ((arg1)->m_el);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_new_btMatrix3x3DoubleData(void *swig_v)
{
  btMatrix3x3DoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMatrix3x3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMatrix3x3DoubleData *)new btMatrix3x3DoubleData();
  *(btMatrix3x3DoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btMatrix3x3DoubleData(void *swig_v)
{
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  
  struct swigargs {
    btMatrix3x3DoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3DoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btTransform__SWIG_0(void *swig_v)
{
  btTransform *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTransform *)new btTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_new_btTransform__SWIG_1(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    btVector3 *arg2;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_new_btTransform__SWIG_2(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_new_btTransform__SWIG_3(void *swig_v)
{
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_new_btTransform__SWIG_4(void *swig_v)
{
  btMatrix3x3 *arg1 = 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_new_btTransform__SWIG_5(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btTransform *)new btTransform((btTransform const &)*arg1);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btTransform_mult(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->mult((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btTransform_getBasis__SWIG_0(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btMatrix3x3 *) &(arg1)->getBasis();
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_btTransform_getBasis__SWIG_1(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btMatrix3x3 *) &((btTransform const *)arg1)->getBasis();
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_btTransform_getOrigin__SWIG_0(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getOrigin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTransform_getOrigin__SWIG_1(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btTransform const *)arg1)->getOrigin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTransform_getRotation(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion result;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = ((btTransform const *)arg1)->getRotation();
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btTransform_setFromOpenGLMatrix(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  (arg1)->setFromOpenGLMatrix((btScalar const *)arg2);
  
}


void
_wrap_btTransform_getOpenGLMatrix(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  ((btTransform const *)arg1)->getOpenGLMatrix(arg2);
  
}


void
_wrap_btTransform_setOrigin(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
}


void
_wrap_btTransform_invXform(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btTransform *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btTransform const *)arg1)->invXform((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTransform_setBasis(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btMatrix3x3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  
  (arg1)->setBasis((btMatrix3x3 const &)*arg2);
  
}


void
_wrap_btTransform_setRotation(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btQuaternion *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
}


void
_wrap_btTransform_setIdentity(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  
  struct swigargs {
    btTransform *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  (arg1)->setIdentity();
  
}


void
_wrap_btTransform_inverse(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform result;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = ((btTransform const *)arg1)->inverse();
  *(btTransform **)&swig_a->result = new btTransform(result); 
}


void
_wrap_btTransform_inverseTimes(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform result;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  result = ((btTransform const *)arg1)->inverseTimes((btTransform const &)*arg2);
  *(btTransform **)&swig_a->result = new btTransform(result); 
}


void
_wrap_btTransform_getIdentity(void *swig_v)
{
  btTransform *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTransform *) &btTransform::getIdentity();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btTransform_serialize(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  ((btTransform const *)arg1)->serialize(*arg2);
  
}


void
_wrap_btTransform_serializeFloat(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  ((btTransform const *)arg1)->serializeFloat(*arg2);
  
}


void
_wrap_btTransform_deSerialize(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  (arg1)->deSerialize((btTransformFloatData const &)*arg2);
  
}


void
_wrap_btTransform_deSerializeDouble(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformDoubleData *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  (arg1)->deSerializeDouble((btTransformDoubleData const &)*arg2);
  
}


void
_wrap_btTransform_deSerializeFloat(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  (arg1)->deSerializeFloat((btTransformFloatData const &)*arg2);
  
}


void
_wrap_delete_btTransform(void *swig_v)
{
  btTransform *arg1 = (btTransform *) 0 ;
  
  struct swigargs {
    btTransform *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTransformFloatData_m_basis_set(void *swig_v)
{
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  struct swigargs {
    btTransformFloatData *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformFloatData **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_basis = *arg2;
  
}


void
_wrap_btTransformFloatData_m_basis_get(void *swig_v)
{
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  struct swigargs {
    btTransformFloatData *arg1;
    long : 0;
    btMatrix3x3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformFloatData **)&swig_a->arg1; 
  
  result = (btMatrix3x3FloatData *)& ((arg1)->m_basis);
  *(btMatrix3x3FloatData **)&swig_a->result = result; 
}


void
_wrap_btTransformFloatData_m_origin_set(void *swig_v)
{
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btTransformFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_origin = *arg2;
  
}


void
_wrap_btTransformFloatData_m_origin_get(void *swig_v)
{
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btTransformFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_origin);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_new_btTransformFloatData(void *swig_v)
{
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTransformFloatData *)new btTransformFloatData();
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btTransformFloatData(void *swig_v)
{
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btTransformFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTransformDoubleData_m_basis_set(void *swig_v)
{
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  struct swigargs {
    btTransformDoubleData *arg1;
    btMatrix3x3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformDoubleData **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_basis = *arg2;
  
}


void
_wrap_btTransformDoubleData_m_basis_get(void *swig_v)
{
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  struct swigargs {
    btTransformDoubleData *arg1;
    long : 0;
    btMatrix3x3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformDoubleData **)&swig_a->arg1; 
  
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_basis);
  *(btMatrix3x3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btTransformDoubleData_m_origin_set(void *swig_v)
{
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btTransformDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_origin = *arg2;
  
}


void
_wrap_btTransformDoubleData_m_origin_get(void *swig_v)
{
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btTransformDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_origin);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_new_btTransformDoubleData(void *swig_v)
{
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTransformDoubleData *)new btTransformDoubleData();
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btTransformDoubleData(void *swig_v)
{
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btTransformDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btMotionState(void *swig_v)
{
  btMotionState *arg1 = (btMotionState *) 0 ;
  
  struct swigargs {
    btMotionState *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMotionState **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMotionState_getWorldTransform(void *swig_v)
{
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  ((btMotionState const *)arg1)->getWorldTransform(*arg2);
  
}


void
_wrap_btMotionState_setWorldTransform(void *swig_v)
{
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_CF_STATIC_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_STATIC_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_KINEMATIC_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_KINEMATIC_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_NO_CONTACT_RESPONSE_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_NO_CONTACT_RESPONSE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_CUSTOM_MATERIAL_CALLBACK_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_CUSTOM_MATERIAL_CALLBACK;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_CHARACTER_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_CHARACTER_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_DISABLE_VISUALIZE_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_DISABLE_SPU_COLLISION_PROCESSING_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_DISABLE_SPU_COLLISION_PROCESSING;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_COLLISION_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_COLLISION_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_RIGID_BODY_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_RIGID_BODY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_GHOST_OBJECT_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_GHOST_OBJECT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_SOFT_BODY_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_SOFT_BODY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_HF_FLUID_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_HF_FLUID;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_USER_TYPE_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_USER_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CO_FEATHERSTONE_LINK_btCollisionObject(void *swig_v)
{
  btCollisionObject::CollisionObjectTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CO_FEATHERSTONE_LINK;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_ANISOTROPIC_FRICTION_DISABLED_btCollisionObject(void *swig_v)
{
  btCollisionObject::AnisotropicFrictionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_ANISOTROPIC_FRICTION_DISABLED;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_ANISOTROPIC_FRICTION_btCollisionObject(void *swig_v)
{
  btCollisionObject::AnisotropicFrictionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_ANISOTROPIC_FRICTION;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CF_ANISOTROPIC_ROLLING_FRICTION_btCollisionObject(void *swig_v)
{
  btCollisionObject::AnisotropicFrictionFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionObject::CF_ANISOTROPIC_ROLLING_FRICTION;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btCollisionObject_mergesSimulationIslands(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->mergesSimulationIslands();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_getAnisotropicFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getAnisotropicFriction();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_setAnisotropicFriction__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btVector3 *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCollisionObject_setAnisotropicFriction__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2);
  
}


void
_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction(arg2);
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setContactProcessingThreshold(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setContactProcessingThreshold(arg2);
  
}


void
_wrap_btCollisionObject_getContactProcessingThreshold(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getContactProcessingThreshold();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_isStaticObject(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->isStaticObject();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_isKinematicObject(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->isKinematicObject();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_isStaticOrKinematicObject(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->isStaticOrKinematicObject();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_hasContactResponse(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->hasContactResponse();
  swig_a->result = result; 
}


void
_wrap_new_btCollisionObject(void *swig_v)
{
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionObject *)new btCollisionObject();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionObject(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionObject_setCollisionShape(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btCollisionShape *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btCollisionShape **)&swig_a->arg2; 
  
  (arg1)->setCollisionShape(arg2);
  
}


void
_wrap_btCollisionObject_getCollisionShape__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btCollisionShape *)((btCollisionObject const *)arg1)->getCollisionShape();
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getCollisionShape__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btCollisionShape *)(arg1)->getCollisionShape();
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_internalGetExtensionPointer(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (void *)((btCollisionObject const *)arg1)->internalGetExtensionPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_internalSetExtensionPointer(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->internalSetExtensionPointer(arg2);
  
}


void
_wrap_btCollisionObject_getActivationState(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getActivationState();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setActivationState(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  ((btCollisionObject const *)arg1)->setActivationState(arg2);
  
}


void
_wrap_btCollisionObject_setDeactivationTime(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDeactivationTime(arg2);
  
}


void
_wrap_btCollisionObject_getDeactivationTime(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getDeactivationTime();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_forceActivationState(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  ((btCollisionObject const *)arg1)->forceActivationState(arg2);
  
}


void
_wrap_btCollisionObject_activate__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  ((btCollisionObject const *)arg1)->activate(arg2);
  
}


void
_wrap_btCollisionObject_activate__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  ((btCollisionObject const *)arg1)->activate();
  
}


void
_wrap_btCollisionObject_isActive(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (bool)((btCollisionObject const *)arg1)->isActive();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setRestitution(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitution(arg2);
  
}


void
_wrap_btCollisionObject_getRestitution(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getRestitution();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setFriction(arg2);
  
}


void
_wrap_btCollisionObject_getFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getFriction();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setRollingFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRollingFriction(arg2);
  
}


void
_wrap_btCollisionObject_getRollingFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getRollingFriction();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_getInternalType(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getInternalType();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_getWorldTransform__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getWorldTransform__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btTransform *) &((btCollisionObject const *)arg1)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_setWorldTransform(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_btCollisionObject_getBroadphaseHandle__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseHandle();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getBroadphaseHandle__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *)((btCollisionObject const *)arg1)->getBroadphaseHandle();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_setBroadphaseHandle(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btBroadphaseProxy *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  (arg1)->setBroadphaseHandle(arg2);
  
}


void
_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btTransform *) &((btCollisionObject const *)arg1)->getInterpolationWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getInterpolationWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_setInterpolationWorldTransform(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setInterpolationWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_btCollisionObject_setInterpolationLinearVelocity(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btCollisionObject_setInterpolationAngularVelocity(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btCollisionObject_getInterpolationLinearVelocity(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationLinearVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getInterpolationAngularVelocity(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationAngularVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getIslandTag(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getIslandTag();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setIslandTag(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setIslandTag(arg2);
  
}


void
_wrap_btCollisionObject_getCompanionId(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getCompanionId();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setCompanionId(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setCompanionId(arg2);
  
}


void
_wrap_btCollisionObject_getHitFraction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getHitFraction();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setHitFraction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setHitFraction(arg2);
  
}


void
_wrap_btCollisionObject_getCollisionFlags(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getCollisionFlags();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setCollisionFlags(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setCollisionFlags(arg2);
  
}


void
_wrap_btCollisionObject_getCcdSweptSphereRadius(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSweptSphereRadius();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setCcdSweptSphereRadius(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setCcdSweptSphereRadius(arg2);
  
}


void
_wrap_btCollisionObject_getCcdMotionThreshold(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdMotionThreshold();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_getCcdSquareMotionThreshold(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSquareMotionThreshold();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setCcdMotionThreshold(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setCcdMotionThreshold(arg2);
  
}


void
_wrap_btCollisionObject_getUserPointer(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (void *)((btCollisionObject const *)arg1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObject_getUserIndex(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getUserIndex();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_setUserPointer(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->setUserPointer(arg2);
  
}


void
_wrap_btCollisionObject_setUserIndex(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setUserIndex(arg2);
  
}


void
_wrap_btCollisionObject_getUpdateRevisionInternal(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->getUpdateRevisionInternal();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_checkCollideWith(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionObject *arg1;
    btCollisionObject *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  result = (bool)((btCollisionObject const *)arg1)->checkCollideWith((btCollisionObject const *)arg2);
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_calculateSerializeBufferSize(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (int)((btCollisionObject const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCollisionObject_serialize(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btCollisionObject const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionObject_serializeSingleObject(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  ((btCollisionObject const *)arg1)->serializeSingleObject(arg2);
  
}


void
_wrap_btCollisionObjectDoubleData_m_broadphaseHandle_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_broadphaseHandle_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_broadphaseHandle);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_collisionShape_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShape = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_collisionShape_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_collisionShape);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_rootCollisionShape_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_rootCollisionShape_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_name_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btCollisionObjectDoubleData_m_name_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionObjectDoubleData_m_worldTransform_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_worldTransform_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_worldTransform);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_interpolationWorldTransform);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationLinearVelocity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationAngularVelocity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_anisotropicFriction_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_anisotropicFriction_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_anisotropicFriction);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_contactProcessingThreshold);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_deactivationTime_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_deactivationTime = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_deactivationTime_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_deactivationTime);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_friction_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_friction_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_rollingFriction_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rollingFriction = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_rollingFriction_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_rollingFriction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_restitution_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_restitution_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_hitFraction_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hitFraction = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_hitFraction_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_hitFraction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_ccdMotionThreshold);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_collisionFlags_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionFlags = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_collisionFlags_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_collisionFlags);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_islandTag1_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_islandTag1 = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_islandTag1_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_islandTag1);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_companionId_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_companionId = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_companionId_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_companionId);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_activationState1_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_activationState1 = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_activationState1_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_activationState1);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_internalType_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_internalType = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_internalType_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_internalType);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_checkCollideWith_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_checkCollideWith = arg2;
  
}


void
_wrap_btCollisionObjectDoubleData_m_checkCollideWith_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_checkCollideWith);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectDoubleData_m_padding_set(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btCollisionObjectDoubleData_m_padding_get(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btCollisionObjectDoubleData(void *swig_v)
{
  btCollisionObjectDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionObjectDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionObjectDoubleData *)new btCollisionObjectDoubleData();
  *(btCollisionObjectDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionObjectDoubleData(void *swig_v)
{
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  
  struct swigargs {
    btCollisionObjectDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionObjectFloatData_m_broadphaseHandle_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_broadphaseHandle_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_broadphaseHandle);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_collisionShape_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShape = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_collisionShape_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_collisionShape);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_rootCollisionShape_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_rootCollisionShape_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_name_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btCollisionObjectFloatData_m_name_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionObjectFloatData_m_worldTransform_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_worldTransform_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_worldTransform);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_interpolationWorldTransform);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_interpolationLinearVelocity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_interpolationAngularVelocity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_anisotropicFriction_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_anisotropicFriction_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_anisotropicFriction);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_contactProcessingThreshold);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_deactivationTime_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_deactivationTime = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_deactivationTime_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_deactivationTime);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_friction_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_friction_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_rollingFriction_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rollingFriction = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_rollingFriction_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_rollingFriction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_restitution_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_restitution_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_hitFraction_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hitFraction = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_hitFraction_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_hitFraction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_ccdMotionThreshold);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_collisionFlags_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionFlags = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_collisionFlags_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_collisionFlags);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_islandTag1_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_islandTag1 = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_islandTag1_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_islandTag1);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_companionId_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_companionId = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_companionId_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_companionId);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_activationState1_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_activationState1 = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_activationState1_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_activationState1);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_internalType_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_internalType = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_internalType_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_internalType);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_checkCollideWith_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_checkCollideWith = arg2;
  
}


void
_wrap_btCollisionObjectFloatData_m_checkCollideWith_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_checkCollideWith);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectFloatData_m_padding_set(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btCollisionObjectFloatData_m_padding_get(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btCollisionObjectFloatData(void *swig_v)
{
  btCollisionObjectFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionObjectFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionObjectFloatData *)new btCollisionObjectFloatData();
  *(btCollisionObjectFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionObjectFloatData(void *swig_v)
{
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  
  struct swigargs {
    btCollisionObjectFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DISPATCH_DISCRETE_btDispatcherInfo(void *swig_v)
{
  btDispatcherInfo::DispatchFunc result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDispatcherInfo::DISPATCH_DISCRETE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DISPATCH_CONTINUOUS_btDispatcherInfo(void *swig_v)
{
  btDispatcherInfo::DispatchFunc result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDispatcherInfo::DISPATCH_CONTINUOUS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btDispatcherInfo(void *swig_v)
{
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDispatcherInfo *)new btDispatcherInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_timeStep_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_timeStep = arg2;
  
}


void
_wrap_btDispatcherInfo_m_timeStep_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_timeStep);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_stepCount_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_stepCount = arg2;
  
}


void
_wrap_btDispatcherInfo_m_stepCount_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_stepCount);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_dispatchFunc_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dispatchFunc = arg2;
  
}


void
_wrap_btDispatcherInfo_m_dispatchFunc_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_dispatchFunc);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_timeOfImpact_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_timeOfImpact = arg2;
  
}


void
_wrap_btDispatcherInfo_m_timeOfImpact_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_timeOfImpact);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_useContinuous_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useContinuous = arg2;
  
}


void
_wrap_btDispatcherInfo_m_useContinuous_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_useContinuous);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_debugDraw_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_debugDraw = arg2;
  
}


void
_wrap_btDispatcherInfo_m_debugDraw_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *result = 0 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    btIDebugDraw *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (btIDebugDraw *) ((arg1)->m_debugDraw);
  *(btIDebugDraw **)&swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_enableSatConvex_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableSatConvex = arg2;
  
}


void
_wrap_btDispatcherInfo_m_enableSatConvex_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_enableSatConvex);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_enableSPU_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableSPU = arg2;
  
}


void
_wrap_btDispatcherInfo_m_enableSPU_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_enableSPU);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_useEpa_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useEpa = arg2;
  
}


void
_wrap_btDispatcherInfo_m_useEpa_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_useEpa);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_allowedCcdPenetration_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_allowedCcdPenetration = arg2;
  
}


void
_wrap_btDispatcherInfo_m_allowedCcdPenetration_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_allowedCcdPenetration);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useConvexConservativeDistanceUtil = arg2;
  
}


void
_wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_useConvexConservativeDistanceUtil);
  swig_a->result = result; 
}


void
_wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_set(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexConservativeDistanceThreshold = arg2;
  
}


void
_wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_get(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDispatcherInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_convexConservativeDistanceThreshold);
  swig_a->result = result; 
}


void
_wrap_delete_btDispatcherInfo(void *swig_v)
{
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  
  struct swigargs {
    btDispatcherInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcherInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btDispatcher(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDispatcher_findAlgorithm__SWIG_0(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    btPersistentManifold *arg4;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btPersistentManifold **)&swig_a->arg4; 
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_findAlgorithm__SWIG_1(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_getNewManifold(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_releaseManifold(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  (arg1)->releaseManifold(arg2);
  
}


void
_wrap_btDispatcher_clearManifold(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  (arg1)->clearManifold(arg2);
  
}


void
_wrap_btDispatcher_needsCollision(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  swig_a->result = result; 
}


void
_wrap_btDispatcher_needsResponse(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  swig_a->result = result; 
}


void
_wrap_btDispatcher_dispatchAllCollisionPairs(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btOverlappingPairCache *arg2;
    btDispatcherInfo *arg3;
    btDispatcher *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCache **)&swig_a->arg2; 
  arg3 = *(btDispatcherInfo **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
  
}


void
_wrap_btDispatcher_getNumManifolds(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int result;
  
  struct swigargs {
    btDispatcher *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  
  result = (int)((btDispatcher const *)arg1)->getNumManifolds();
  swig_a->result = result; 
}


void
_wrap_btDispatcher_getManifoldByIndexInternal(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    intgo arg2;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_getInternalManifoldPointer(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    long : 0;
    btPersistentManifold **result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  *(btPersistentManifold ***)&swig_a->result = result; 
}


void
_wrap_btDispatcher_getInternalManifoldPool__SWIG_0(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_getInternalManifoldPool__SWIG_1(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)((btDispatcher const *)arg1)->getInternalManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_allocateCollisionAlgorithm(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    intgo arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btDispatcher_freeCollisionAlgorithm(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->freeCollisionAlgorithm(arg2);
  
}


void
_wrap_btAabbSupport(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = btAabbSupport((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTransformUtil_integrateTransform(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btTransform *arg5 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
    btTransform *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  
  btTransformUtil::integrateTransform((btTransform const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,*arg5);
  
}


void
_wrap_btTransformUtil_calculateVelocityQuaternion(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion *arg3 = 0 ;
  btQuaternion *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btQuaternion *arg3;
    btQuaternion *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btQuaternion **)&swig_a->arg3; 
  arg4 = *(btQuaternion **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btTransformUtil::calculateVelocityQuaternion((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btQuaternion const &)*arg3,(btQuaternion const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btTransformUtil_calculateDiffAxisAngleQuaternion(void *swig_v)
{
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btQuaternion *arg1;
    btQuaternion *arg2;
    btVector3 *arg3;
    btScalar *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuaternion **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  btTransformUtil::calculateDiffAxisAngleQuaternion((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btTransformUtil_calculateVelocity(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    float arg3;
    btVector3 *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  btTransformUtil::calculateVelocity((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,*arg4,*arg5);
  
}


void
_wrap_btTransformUtil_calculateDiffAxisAngle(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  btTransformUtil::calculateDiffAxisAngle((btTransform const &)*arg1,(btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_new_btTransformUtil(void *swig_v)
{
  btTransformUtil *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTransformUtil *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTransformUtil *)new btTransformUtil();
  *(btTransformUtil **)&swig_a->result = result; 
}


void
_wrap_delete_btTransformUtil(void *swig_v)
{
  btTransformUtil *arg1 = (btTransformUtil *) 0 ;
  
  struct swigargs {
    btTransformUtil *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransformUtil **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btConvexSeparatingDistanceUtil(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btConvexSeparatingDistanceUtil *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btConvexSeparatingDistanceUtil *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btConvexSeparatingDistanceUtil *)new btConvexSeparatingDistanceUtil(arg1,arg2);
  *(btConvexSeparatingDistanceUtil **)&swig_a->result = result; 
}


void
_wrap_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(void *swig_v)
{
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexSeparatingDistanceUtil *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexSeparatingDistanceUtil **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getConservativeSeparatingDistance();
  swig_a->result = result; 
}


void
_wrap_btConvexSeparatingDistanceUtil_updateSeparatingDistance(void *swig_v)
{
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btConvexSeparatingDistanceUtil *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexSeparatingDistanceUtil **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->updateSeparatingDistance((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btConvexSeparatingDistanceUtil_initSeparatingDistance(void *swig_v)
{
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  
  struct swigargs {
    btConvexSeparatingDistanceUtil *arg1;
    btVector3 *arg2;
    float arg3;
    btTransform *arg4;
    btTransform *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexSeparatingDistanceUtil **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  
  (arg1)->initSeparatingDistance((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
  
}


void
_wrap_delete_btConvexSeparatingDistanceUtil(void *swig_v)
{
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  
  struct swigargs {
    btConvexSeparatingDistanceUtil *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexSeparatingDistanceUtil **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConstraintRow_m_normal_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_normal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
}


void
_wrap_btConstraintRow_m_normal_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    btScalar *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar *)(btScalar *) ((arg1)->m_normal);
  *(btScalar **)&swig_a->result = result; 
}


void
_wrap_btConstraintRow_m_rhs_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rhs = arg2;
  
}


void
_wrap_btConstraintRow_m_rhs_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_rhs);
  swig_a->result = result; 
}


void
_wrap_btConstraintRow_m_jacDiagInv_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_jacDiagInv = arg2;
  
}


void
_wrap_btConstraintRow_m_jacDiagInv_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_jacDiagInv);
  swig_a->result = result; 
}


void
_wrap_btConstraintRow_m_lowerLimit_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
}


void
_wrap_btConstraintRow_m_lowerLimit_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_lowerLimit);
  swig_a->result = result; 
}


void
_wrap_btConstraintRow_m_upperLimit_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = arg2;
  
}


void
_wrap_btConstraintRow_m_upperLimit_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_upperLimit);
  swig_a->result = result; 
}


void
_wrap_btConstraintRow_m_accumImpulse_set(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintRow *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_accumImpulse = arg2;
  
}


void
_wrap_btConstraintRow_m_accumImpulse_get(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintRow *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_accumImpulse);
  swig_a->result = result; 
}


void
_wrap_new_btConstraintRow(void *swig_v)
{
  btConstraintRow *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConstraintRow *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConstraintRow *)new btConstraintRow();
  *(btConstraintRow **)&swig_a->result = result; 
}


void
_wrap_delete_btConstraintRow(void *swig_v)
{
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  
  struct swigargs {
    btConstraintRow *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintRow **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btManifoldPoint__SWIG_0(void *swig_v)
{
  btManifoldPoint *result = 0 ;
  
  struct swigargs {
    long : 0;
    btManifoldPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btManifoldPoint *)new btManifoldPoint();
  *(btManifoldPoint **)&swig_a->result = result; 
}


void
_wrap_new_btManifoldPoint__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btManifoldPoint *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
    long : 0;
    btManifoldPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (btManifoldPoint *)new btManifoldPoint((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  *(btManifoldPoint **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_localPointA_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localPointA = *arg2;
  
}


void
_wrap_btManifoldPoint_m_localPointA_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_localPointA);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_localPointB_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localPointB = *arg2;
  
}


void
_wrap_btManifoldPoint_m_localPointB_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_localPointB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_positionWorldOnB_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_positionWorldOnB = *arg2;
  
}


void
_wrap_btManifoldPoint_m_positionWorldOnB_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_positionWorldOnB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_positionWorldOnA_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_positionWorldOnA = *arg2;
  
}


void
_wrap_btManifoldPoint_m_positionWorldOnA_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_positionWorldOnA);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_normalWorldOnB_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_normalWorldOnB = *arg2;
  
}


void
_wrap_btManifoldPoint_m_normalWorldOnB_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_normalWorldOnB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_distance1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_distance1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_distance1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_distance1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_combinedFriction_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_combinedFriction = arg2;
  
}


void
_wrap_btManifoldPoint_m_combinedFriction_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_combinedFriction);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_combinedRollingFriction_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_combinedRollingFriction = arg2;
  
}


void
_wrap_btManifoldPoint_m_combinedRollingFriction_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_combinedRollingFriction);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_combinedRestitution_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_combinedRestitution = arg2;
  
}


void
_wrap_btManifoldPoint_m_combinedRestitution_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_combinedRestitution);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_partId0_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_partId0 = arg2;
  
}


void
_wrap_btManifoldPoint_m_partId0_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_partId0);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_partId1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_partId1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_partId1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_partId1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_index0_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_index0 = arg2;
  
}


void
_wrap_btManifoldPoint_m_index0_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_index0);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_index1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_index1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_index1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_index1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_userPersistentData_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_userPersistentData = arg2;
  
}


void
_wrap_btManifoldPoint_m_userPersistentData_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_userPersistentData);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_lateralFrictionInitialized_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lateralFrictionInitialized = arg2;
  
}


void
_wrap_btManifoldPoint_m_lateralFrictionInitialized_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_lateralFrictionInitialized);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_appliedImpulse_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
}


void
_wrap_btManifoldPoint_m_appliedImpulse_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_appliedImpulse);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_appliedImpulseLateral1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulseLateral1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_appliedImpulseLateral1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_appliedImpulseLateral1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_appliedImpulseLateral2_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulseLateral2 = arg2;
  
}


void
_wrap_btManifoldPoint_m_appliedImpulseLateral2_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_appliedImpulseLateral2);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_contactMotion1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactMotion1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_contactMotion1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_contactMotion1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_contactMotion2_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactMotion2 = arg2;
  
}


void
_wrap_btManifoldPoint_m_contactMotion2_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_contactMotion2);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_contactCFM1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactCFM1 = arg2;
  
}


void
_wrap_btManifoldPoint_m_contactCFM1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_contactCFM1);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_contactCFM2_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactCFM2 = arg2;
  
}


void
_wrap_btManifoldPoint_m_contactCFM2_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_contactCFM2);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_lifeTime_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lifeTime = arg2;
  
}


void
_wrap_btManifoldPoint_m_lifeTime_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_lifeTime);
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_lateralFrictionDir1_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_lateralFrictionDir1 = *arg2;
  
}


void
_wrap_btManifoldPoint_m_lateralFrictionDir1_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir1);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_m_lateralFrictionDir2_set(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_lateralFrictionDir2 = *arg2;
  
}


void
_wrap_btManifoldPoint_m_lateralFrictionDir2_get(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir2);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_getDistance(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar)((btManifoldPoint const *)arg1)->getDistance();
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_getLifeTime(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (int)((btManifoldPoint const *)arg1)->getLifeTime();
  swig_a->result = result; 
}


void
_wrap_btManifoldPoint_getPositionWorldOnA(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnA();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_getPositionWorldOnB(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnB();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btManifoldPoint_setDistance(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDistance(arg2);
  
}


void
_wrap_btManifoldPoint_getAppliedImpulse(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btManifoldPoint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  result = (btScalar)((btManifoldPoint const *)arg1)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_delete_btManifoldPoint(void *swig_v)
{
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  
  struct swigargs {
    btManifoldPoint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldPoint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_gContactBreakingThreshold_set(void *swig_v)
{
  btScalar arg1 ;
  
  struct swigargs {
    float arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  gContactBreakingThreshold = arg1;
  
}


void
_wrap_gContactBreakingThreshold_get(void *swig_v)
{
  btScalar result;
  
  struct swigargs {
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btScalar)gContactBreakingThreshold;
  swig_a->result = result; 
}


void
_wrap_gContactDestroyedCallback_set(void *swig_v)
{
  ContactDestroyedCallback arg1 = (ContactDestroyedCallback) 0 ;
  
  struct swigargs {
    ContactDestroyedCallback arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ContactDestroyedCallback *)&swig_a->arg1; 
  
  gContactDestroyedCallback = arg1;
  
}


void
_wrap_gContactDestroyedCallback_get(void *swig_v)
{
  ContactDestroyedCallback result;
  
  struct swigargs {
    long : 0;
    ContactDestroyedCallback result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (ContactDestroyedCallback)gContactDestroyedCallback;
  *(ContactDestroyedCallback *)&swig_a->result = result; 
}


void
_wrap_gContactProcessedCallback_set(void *swig_v)
{
  ContactProcessedCallback arg1 = (ContactProcessedCallback) 0 ;
  
  struct swigargs {
    ContactProcessedCallback arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ContactProcessedCallback *)&swig_a->arg1; 
  
  gContactProcessedCallback = arg1;
  
}


void
_wrap_gContactProcessedCallback_get(void *swig_v)
{
  ContactProcessedCallback result;
  
  struct swigargs {
    long : 0;
    ContactProcessedCallback result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (ContactProcessedCallback)gContactProcessedCallback;
  *(ContactProcessedCallback *)&swig_a->result = result; 
}


void
_wrap_MIN_CONTACT_MANIFOLD_TYPE(void *swig_v)
{
  btContactManifoldTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MIN_CONTACT_MANIFOLD_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_PERSISTENT_MANIFOLD_TYPE(void *swig_v)
{
  btContactManifoldTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_PERSISTENT_MANIFOLD_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btPersistentManifold_m_companionIdA_set(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_companionIdA = arg2;
  
}


void
_wrap_btPersistentManifold_m_companionIdA_get(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_companionIdA);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_m_companionIdB_set(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_companionIdB = arg2;
  
}


void
_wrap_btPersistentManifold_m_companionIdB_get(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_companionIdB);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_m_index1a_set(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_index1a = arg2;
  
}


void
_wrap_btPersistentManifold_m_index1a_get(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_index1a);
  swig_a->result = result; 
}


void
_wrap_new_btPersistentManifold__SWIG_0(void *swig_v)
{
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPersistentManifold *)new btPersistentManifold();
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_new_btPersistentManifold__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  int arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    btCollisionObject *arg2;
    intgo arg3;
    float arg4;
    float arg5;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  result = (btPersistentManifold *)new btPersistentManifold((btCollisionObject const *)arg1,(btCollisionObject const *)arg2,arg3,arg4,arg5);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getBody0(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody0();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getBody1(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody1();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btPersistentManifold_setBodies(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  (arg1)->setBodies((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  
}


void
_wrap_btPersistentManifold_clearUserCache(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  
  (arg1)->clearUserCache(*arg2);
  
}


void
_wrap_btPersistentManifold_getNumContacts(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (int)((btPersistentManifold const *)arg1)->getNumContacts();
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_setNumContacts(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setNumContacts(arg2);
  
}


void
_wrap_btPersistentManifold_getContactPoint__SWIG_0(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  btManifoldPoint *result = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
    long : 0;
    btManifoldPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btManifoldPoint *) &((btPersistentManifold const *)arg1)->getContactPoint(arg2);
  *(btManifoldPoint **)&swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getContactPoint__SWIG_1(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  btManifoldPoint *result = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
    long : 0;
    btManifoldPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btManifoldPoint *) &(arg1)->getContactPoint(arg2);
  *(btManifoldPoint **)&swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getContactBreakingThreshold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactBreakingThreshold();
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getContactProcessingThreshold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactProcessingThreshold();
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_setContactBreakingThreshold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setContactBreakingThreshold(arg2);
  
}


void
_wrap_btPersistentManifold_setContactProcessingThreshold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setContactProcessingThreshold(arg2);
  
}


void
_wrap_btPersistentManifold_getCacheEntry(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  
  result = (int)((btPersistentManifold const *)arg1)->getCacheEntry((btManifoldPoint const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_addManifoldPoint__SWIG_0(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
    bool arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_addManifoldPoint__SWIG_1(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_removeContactPoint(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->removeContactPoint(arg2);
  
}


void
_wrap_btPersistentManifold_replaceContactPoint(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int arg3 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->replaceContactPoint((btManifoldPoint const &)*arg2,arg3);
  
}


void
_wrap_btPersistentManifold_validContactDistance(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btManifoldPoint *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btManifoldPoint **)&swig_a->arg2; 
  
  result = (bool)((btPersistentManifold const *)arg1)->validContactDistance((btManifoldPoint const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_refreshContactPoints(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->refreshContactPoints((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btPersistentManifold_clearManifold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  (arg1)->clearManifold();
  
}


void
_wrap_delete_btPersistentManifold(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtPersistentManifold_M_objectType(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_objectType = arg2;
  
}


void
_wrap_GetbtPersistentManifold_M_objectType(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  result = (int) ((swig_b0)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btPersistentManifold_getObjectType(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  struct swigargs {
    btPersistentManifold *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  result = (int)((btTypedObject const *)swig_b0)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_parent_set(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    btCollisionObjectWrapper *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_parent = (btCollisionObjectWrapper const *)arg2;
  
}


void
_wrap_btCollisionObjectWrapper_m_parent_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btCollisionObjectWrapper *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btCollisionObjectWrapper *) ((arg1)->m_parent);
  *(btCollisionObjectWrapper **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_shape_set(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    btCollisionShape *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = *(btCollisionShape **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_shape = (btCollisionShape const *)arg2;
  
}


void
_wrap_btCollisionObjectWrapper_m_shape_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btCollisionShape *) ((arg1)->m_shape);
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_collisionObject_set(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
  
}


void
_wrap_btCollisionObjectWrapper_m_collisionObject_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_worldTransform_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btTransform *) &(btTransform const &) ((arg1)->m_worldTransform);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_partId_set(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_partId = arg2;
  
}


void
_wrap_btCollisionObjectWrapper_m_partId_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_partId);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_m_index_set(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_index = arg2;
  
}


void
_wrap_btCollisionObjectWrapper_m_index_get(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_index);
  swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_getWorldTransform(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btTransform *) &((btCollisionObjectWrapper const *)arg1)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_getCollisionObject(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btCollisionObject *)((btCollisionObjectWrapper const *)arg1)->getCollisionObject();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btCollisionObjectWrapper_getCollisionShape(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  result = (btCollisionShape *)((btCollisionObjectWrapper const *)arg1)->getCollisionShape();
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionObjectWrapper(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_gContactAddedCallback_set(void *swig_v)
{
  ContactAddedCallback arg1 = (ContactAddedCallback) 0 ;
  
  struct swigargs {
    ContactAddedCallback arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(ContactAddedCallback *)&swig_a->arg1; 
  
  gContactAddedCallback = arg1;
  
}


void
_wrap_gContactAddedCallback_get(void *swig_v)
{
  ContactAddedCallback result;
  
  struct swigargs {
    long : 0;
    ContactAddedCallback result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (ContactAddedCallback)gContactAddedCallback;
  *(ContactAddedCallback *)&swig_a->result = result; 
}


void
_wrap_new_btManifoldResult__SWIG_0(void *swig_v)
{
  btManifoldResult *result = 0 ;
  
  struct swigargs {
    long : 0;
    btManifoldResult *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btManifoldResult *)new btManifoldResult();
  *(btManifoldResult **)&swig_a->result = result; 
}


void
_wrap_new_btManifoldResult__SWIG_1(void *swig_v)
{
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btManifoldResult *result = 0 ;
  
  struct swigargs {
    btCollisionObjectWrapper *arg1;
    btCollisionObjectWrapper *arg2;
    long : 0;
    btManifoldResult *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObjectWrapper **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  
  result = (btManifoldResult *)new btManifoldResult((btCollisionObjectWrapper const *)arg1,(btCollisionObjectWrapper const *)arg2);
  *(btManifoldResult **)&swig_a->result = result; 
}


void
_wrap_delete_btManifoldResult(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btManifoldResult_setPersistentManifold(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  (arg1)->setPersistentManifold(arg2);
  
}


void
_wrap_btManifoldResult_getPersistentManifold__SWIG_0(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btPersistentManifold *)((btManifoldResult const *)arg1)->getPersistentManifold();
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_getPersistentManifold__SWIG_1(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btPersistentManifold *)(arg1)->getPersistentManifold();
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_setShapeIdentifiersA(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->setShapeIdentifiersA(arg2,arg3);
  
}


void
_wrap_btManifoldResult_setShapeIdentifiersB(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->setShapeIdentifiersB(arg2,arg3);
  
}


void
_wrap_btManifoldResult_addContactPoint(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btManifoldResult_refreshContactPoints(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  (arg1)->refreshContactPoints();
  
}


void
_wrap_btManifoldResult_getBody0Wrap(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btCollisionObjectWrapper *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody0Wrap();
  *(btCollisionObjectWrapper **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_getBody1Wrap(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btCollisionObjectWrapper *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody1Wrap();
  *(btCollisionObjectWrapper **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_setBody0Wrap(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    btCollisionObjectWrapper *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  
  (arg1)->setBody0Wrap((btCollisionObjectWrapper const *)arg2);
  
}


void
_wrap_btManifoldResult_setBody1Wrap(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    btCollisionObjectWrapper *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  
  (arg1)->setBody1Wrap((btCollisionObjectWrapper const *)arg2);
  
}


void
_wrap_btManifoldResult_getBody0Internal(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody0Internal();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_getBody1Internal(void *swig_v)
{
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  struct swigargs {
    btManifoldResult *arg1;
    long : 0;
    btCollisionObject *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btManifoldResult **)&swig_a->arg1; 
  
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody1Internal();
  *(btCollisionObject **)&swig_a->result = result; 
}


void
_wrap_btManifoldResult_calculateCombinedRestitution(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    btCollisionObject *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  result = (btScalar)btManifoldResult::calculateCombinedRestitution((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  swig_a->result = result; 
}


void
_wrap_btManifoldResult_calculateCombinedFriction(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionObject *arg1;
    btCollisionObject *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  result = (btScalar)btManifoldResult::calculateCombinedFriction((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  swig_a->result = result; 
}


void
_wrap_BOX_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BOX_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TRIANGLE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = TRIANGLE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TETRAHEDRAL_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = TETRAHEDRAL_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONVEX_HULL_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONVEX_HULL_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CUSTOM_POLYHEDRAL_SHAPE_TYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSTOM_POLYHEDRAL_SHAPE_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_IMPLICIT_CONVEX_SHAPES_START_HERE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = IMPLICIT_CONVEX_SHAPES_START_HERE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SPHERE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SPHERE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MULTI_SPHERE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MULTI_SPHERE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CAPSULE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CAPSULE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONVEX_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONVEX_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CYLINDER_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CYLINDER_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_UNIFORM_SCALING_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = UNIFORM_SCALING_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MINKOWSKI_SUM_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MINKOWSKI_SUM_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BOX_2D_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BOX_2D_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONVEX_2D_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONVEX_2D_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CUSTOM_CONVEX_SHAPE_TYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSTOM_CONVEX_SHAPE_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONCAVE_SHAPES_START_HERE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONCAVE_SHAPES_START_HERE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TRIANGLE_MESH_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = TRIANGLE_MESH_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FAST_CONCAVE_MESH_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FAST_CONCAVE_MESH_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TERRAIN_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = TERRAIN_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_GIMPACT_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = GIMPACT_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_EMPTY_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = EMPTY_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STATIC_PLANE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = STATIC_PLANE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CUSTOM_CONCAVE_SHAPE_TYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSTOM_CONCAVE_SHAPE_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONCAVE_SHAPES_END_HERE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONCAVE_SHAPES_END_HERE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_COMPOUND_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = COMPOUND_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOFTBODY_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOFTBODY_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_HFFLUID_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = HFFLUID_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_INVALID_SHAPE_PROXYTYPE(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = INVALID_SHAPE_PROXYTYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MAX_BROADPHASE_COLLISION_TYPES(void *swig_v)
{
  BroadphaseNativeTypes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MAX_BROADPHASE_COLLISION_TYPES;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DefaultFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::DefaultFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_StaticFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::StaticFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_KinematicFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::KinematicFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DebrisFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::DebrisFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SensorTrigger_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::SensorTrigger;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CharacterFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::CharacterFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_AllFilter_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy::CollisionFilterGroups result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btBroadphaseProxy::AllFilter;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btBroadphaseProxy_m_clientObject_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_clientObject = arg2;
  
}


void
_wrap_btBroadphaseProxy_m_clientObject_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_clientObject);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_collisionFilterGroup_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
  
}


void
_wrap_btBroadphaseProxy_m_collisionFilterGroup_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (short) ((arg1)->m_collisionFilterGroup);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_collisionFilterMask_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
  
}


void
_wrap_btBroadphaseProxy_m_collisionFilterMask_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (short) ((arg1)->m_collisionFilterMask);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_multiSapParentProxy_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_multiSapParentProxy = arg2;
  
}


void
_wrap_btBroadphaseProxy_m_multiSapParentProxy_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_multiSapParentProxy);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_uniqueId_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_uniqueId = arg2;
  
}


void
_wrap_btBroadphaseProxy_m_uniqueId_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_uniqueId);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_aabbMin_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMin = *arg2;
  
}


void
_wrap_btBroadphaseProxy_m_aabbMin_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_aabbMin);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_m_aabbMax_set(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMax = *arg2;
  
}


void
_wrap_btBroadphaseProxy_m_aabbMax_get(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_aabbMax);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_getUid(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  result = (int)((btBroadphaseProxy const *)arg1)->getUid();
  swig_a->result = result; 
}


void
_wrap_new_btBroadphaseProxy__SWIG_0(void *swig_v)
{
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBroadphaseProxy *)new btBroadphaseProxy();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_new_btBroadphaseProxy__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  void *arg6 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    void *arg3;
    short arg4;
    short arg5;
    void *arg6;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  arg5 = (short)swig_a->arg5; 
  arg6 = *(void **)&swig_a->arg6; 
  
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_new_btBroadphaseProxy__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    void *arg3;
    short arg4;
    short arg5;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  arg5 = (short)swig_a->arg5; 
  
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isPolyhedral(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isPolyhedral(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isConvex(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isNonMoving(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isNonMoving(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isConcave(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConcave(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isCompound(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isCompound(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isSoftBody(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isSoftBody(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isInfinite(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isInfinite(arg1);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseProxy_isConvex2d(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex2d(arg1);
  swig_a->result = result; 
}


void
_wrap_delete_btBroadphaseProxy(void *swig_v)
{
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btBroadphasePair__SWIG_0(void *swig_v)
{
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBroadphasePair *)new btBroadphasePair();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_new_btBroadphasePair__SWIG_1(void *swig_v)
{
  btBroadphasePair *arg1 = 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)new btBroadphasePair((btBroadphasePair const &)*arg1);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_new_btBroadphasePair__SWIG_2(void *swig_v)
{
  btBroadphaseProxy *arg1 = 0 ;
  btBroadphaseProxy *arg2 = 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btBroadphaseProxy *arg1;
    btBroadphaseProxy *arg2;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  result = (btBroadphasePair *)new btBroadphasePair(*arg1,*arg2);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btBroadphasePair_m_pProxy0_set(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    btBroadphaseProxy *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pProxy0 = arg2;
  
}


void
_wrap_btBroadphasePair_m_pProxy0_get(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy0);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btBroadphasePair_m_pProxy1_set(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    btBroadphaseProxy *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pProxy1 = arg2;
  
}


void
_wrap_btBroadphasePair_m_pProxy1_get(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy1);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btBroadphasePair_m_algorithm_set(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *arg2 = (btCollisionAlgorithm *) 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    btCollisionAlgorithm *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  arg2 = *(btCollisionAlgorithm **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_algorithm = arg2;
  
}


void
_wrap_btBroadphasePair_m_algorithm_get(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  
  result = (btCollisionAlgorithm *) ((arg1)->m_algorithm);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_delete_btBroadphasePair(void *swig_v)
{
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btBroadphasePairSortPredicate(void *swig_v)
{
  btBroadphasePairSortPredicate *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBroadphasePairSortPredicate *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBroadphasePairSortPredicate *)new btBroadphasePairSortPredicate();
  *(btBroadphasePairSortPredicate **)&swig_a->result = result; 
}


void
_wrap_delete_btBroadphasePairSortPredicate(void *swig_v)
{
  btBroadphasePairSortPredicate *arg1 = (btBroadphasePairSortPredicate *) 0 ;
  
  struct swigargs {
    btBroadphasePairSortPredicate *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePairSortPredicate **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionAlgorithmCreateFunc_m_swapped_set(void *swig_v)
{
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btCollisionAlgorithmCreateFunc *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmCreateFunc **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_swapped = arg2;
  
}


void
_wrap_btCollisionAlgorithmCreateFunc_m_swapped_get(void *swig_v)
{
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionAlgorithmCreateFunc *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmCreateFunc **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_swapped);
  swig_a->result = result; 
}


void
_wrap_new_btCollisionAlgorithmCreateFunc(void *swig_v)
{
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionAlgorithmCreateFunc *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionAlgorithmCreateFunc *)new btCollisionAlgorithmCreateFunc();
  *(btCollisionAlgorithmCreateFunc **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionAlgorithmCreateFunc(void *swig_v)
{
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithmCreateFunc *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmCreateFunc **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm(void *swig_v)
{
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btCollisionAlgorithmCreateFunc *arg1;
    btCollisionAlgorithmConstructionInfo *arg2;
    btCollisionObjectWrapper *arg3;
    btCollisionObjectWrapper *arg4;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmCreateFunc **)&swig_a->arg1; 
  arg2 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  
  result = (btCollisionAlgorithm *)(arg1)->CreateCollisionAlgorithm(*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_CD_STATIC_STATIC_REPORTED_btCollisionDispatcher(void *swig_v)
{
  btCollisionDispatcher::DispatcherFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionDispatcher::CD_STATIC_STATIC_REPORTED;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD_btCollisionDispatcher(void *swig_v)
{
  btCollisionDispatcher::DispatcherFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionDispatcher::CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION_btCollisionDispatcher(void *swig_v)
{
  btCollisionDispatcher::DispatcherFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btCollisionDispatcher::CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btCollisionDispatcher_getDispatcherFlags(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (int)((btCollisionDispatcher const *)arg1)->getDispatcherFlags();
  swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_setDispatcherFlags(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setDispatcherFlags(arg2);
  
}


void
_wrap_btCollisionDispatcher_registerCollisionCreateFunc(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *arg4 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    intgo arg2;
    intgo arg3;
    btCollisionAlgorithmCreateFunc *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = *(btCollisionAlgorithmCreateFunc **)&swig_a->arg4; 
  
  (arg1)->registerCollisionCreateFunc(arg2,arg3,arg4);
  
}


void
_wrap_btCollisionDispatcher_getNumManifolds(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (int)((btCollisionDispatcher const *)arg1)->getNumManifolds();
  swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_getInternalManifoldPointer(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btPersistentManifold **result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  *(btPersistentManifold ***)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    intgo arg2;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_1(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    intgo arg2;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btPersistentManifold *)((btCollisionDispatcher const *)arg1)->getManifoldByIndexInternal(arg2);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_new_btCollisionDispatcher(void *swig_v)
{
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btCollisionDispatcher *result = 0 ;
  
  struct swigargs {
    btCollisionConfiguration *arg1;
    long : 0;
    btCollisionDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btCollisionDispatcher *)new btCollisionDispatcher(arg1);
  *(btCollisionDispatcher **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionDispatcher(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionDispatcher_getNewManifold(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_releaseManifold(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  (arg1)->releaseManifold(arg2);
  
}


void
_wrap_btCollisionDispatcher_clearManifold(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  (arg1)->clearManifold(arg2);
  
}


void
_wrap_btCollisionDispatcher_findAlgorithm__SWIG_0(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    btPersistentManifold *arg4;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btPersistentManifold **)&swig_a->arg4; 
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_findAlgorithm__SWIG_1(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    long : 0;
    btCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  *(btCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_needsCollision(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_needsResponse(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_dispatchAllCollisionPairs(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btOverlappingPairCache *arg2;
    btDispatcherInfo *arg3;
    btDispatcher *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCache **)&swig_a->arg2; 
  arg3 = *(btDispatcherInfo **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
  
}


void
_wrap_btCollisionDispatcher_setNearCallback(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback arg2 = (btNearCallback) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btNearCallback arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btNearCallback *)&swig_a->arg2; 
  
  (arg1)->setNearCallback(arg2);
  
}


void
_wrap_btCollisionDispatcher_getNearCallback(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback result;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btNearCallback result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btNearCallback)((btCollisionDispatcher const *)arg1)->getNearCallback();
  *(btNearCallback *)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_defaultNearCallback(void *swig_v)
{
  btBroadphasePair *arg1 = 0 ;
  btCollisionDispatcher *arg2 = 0 ;
  btDispatcherInfo *arg3 = 0 ;
  
  struct swigargs {
    btBroadphasePair *arg1;
    btCollisionDispatcher *arg2;
    btDispatcherInfo *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphasePair **)&swig_a->arg1; 
  arg2 = *(btCollisionDispatcher **)&swig_a->arg2; 
  arg3 = *(btDispatcherInfo **)&swig_a->arg3; 
  
  btCollisionDispatcher::defaultNearCallback(*arg1,*arg2,(btDispatcherInfo const &)*arg3);
  
}


void
_wrap_btCollisionDispatcher_allocateCollisionAlgorithm(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    intgo arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_freeCollisionAlgorithm(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->freeCollisionAlgorithm(arg2);
  
}


void
_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_0(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btCollisionConfiguration *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btCollisionConfiguration *)(arg1)->getCollisionConfiguration();
  *(btCollisionConfiguration **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_1(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btCollisionConfiguration *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btCollisionConfiguration *)((btCollisionDispatcher const *)arg1)->getCollisionConfiguration();
  *(btCollisionConfiguration **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_setCollisionConfiguration(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *arg2 = (btCollisionConfiguration *) 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    btCollisionConfiguration *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  arg2 = *(btCollisionConfiguration **)&swig_a->arg2; 
  
  (arg1)->setCollisionConfiguration(arg2);
  
}


void
_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_0(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_1(void *swig_v)
{
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btCollisionDispatcher *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionDispatcher **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)((btCollisionDispatcher const *)arg1)->getInternalManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_delete_btBroadphaseAabbCallback(void *swig_v)
{
  btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) 0 ;
  
  struct swigargs {
    btBroadphaseAabbCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseAabbCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBroadphaseAabbCallback_process(void *swig_v)
{
  btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btBroadphaseAabbCallback *arg1;
    btBroadphaseProxy *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseAabbCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  result = (bool)(arg1)->process((btBroadphaseProxy const *)arg2);
  swig_a->result = result; 
}


void
_wrap_btBroadphaseRayCallback_m_rayDirectionInverse_set(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rayDirectionInverse = *arg2;
  
}


void
_wrap_btBroadphaseRayCallback_m_rayDirectionInverse_get(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_rayDirectionInverse);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseRayCallback_m_signs_set(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *arg2 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    unsigned int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  arg2 = *(unsigned int **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->m_signs;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
  
}


void
_wrap_btBroadphaseRayCallback_m_signs_get(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *result = 0 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    long : 0;
    unsigned int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  
  result = (unsigned int *)(unsigned int *) ((arg1)->m_signs);
  *(unsigned int **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseRayCallback_m_lambda_max_set(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lambda_max = arg2;
  
}


void
_wrap_btBroadphaseRayCallback_m_lambda_max_get(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_lambda_max);
  swig_a->result = result; 
}


void
_wrap_delete_btBroadphaseRayCallback(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBroadphaseRayCallback_process(void *swig_v)
{
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btBroadphaseRayCallback *arg1;
    btBroadphaseProxy *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseRayCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  btBroadphaseAabbCallback *swig_b0 = (btBroadphaseAabbCallback *)swig_a->arg1;
  result = (bool)(swig_b0)->process((btBroadphaseProxy const *)arg2);
  swig_a->result = result; 
}


void
_wrap_delete_btBroadphaseInterface(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBroadphaseInterface_createProxy(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
    void *arg5;
    short arg6;
    short arg7;
    btDispatcher *arg8;
    void *arg9;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  arg6 = (short)swig_a->arg6; 
  arg7 = (short)swig_a->arg7; 
  arg8 = *(btDispatcher **)&swig_a->arg8; 
  arg9 = *(void **)&swig_a->arg9; 
  
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseInterface_destroyProxy(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->destroyProxy(arg2,arg3);
  
}


void
_wrap_btBroadphaseInterface_setAabb(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btDispatcher *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btDispatcher **)&swig_a->arg5; 
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btBroadphaseInterface_getAabb(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBroadphaseInterface const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
}


void
_wrap_btBroadphaseInterface_rayTest__SWIG_0(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btBroadphaseInterface_rayTest__SWIG_1(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btBroadphaseInterface_rayTest__SWIG_2(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btBroadphaseInterface_aabbTest(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseAabbCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseAabbCallback **)&swig_a->arg4; 
  
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btBroadphaseInterface_calculateOverlappingPairs(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->calculateOverlappingPairs(arg2);
  
}


void
_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_0(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_1(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)((btBroadphaseInterface const *)arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btBroadphaseInterface_getBroadphaseAabb(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btBroadphaseInterface const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
}


void
_wrap_btBroadphaseInterface_resetPool(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->resetPool(arg2);
  
}


void
_wrap_btBroadphaseInterface_printStats(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  
  (arg1)->printStats();
  
}


void
_wrap_delete_btOverlappingPairCallback(void *swig_v)
{
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  
  struct swigargs {
    btOverlappingPairCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOverlappingPairCallback_addOverlappingPair(void *swig_v)
{
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCallback *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCallback_removeOverlappingPair(void *swig_v)
{
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCallback *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    btDispatcher *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCallback_removeOverlappingPairsContainingProxy(void *swig_v)
{
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCallback *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
}


void
_wrap_delete_btOverlapCallback(void *swig_v)
{
  btOverlapCallback *arg1 = (btOverlapCallback *) 0 ;
  
  struct swigargs {
    btOverlapCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlapCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOverlapCallback_processOverlap(void *swig_v)
{
  btOverlapCallback *arg1 = (btOverlapCallback *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btOverlapCallback *arg1;
    btBroadphasePair *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlapCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphasePair **)&swig_a->arg2; 
  
  result = (bool)(arg1)->processOverlap(*arg2);
  swig_a->result = result; 
}


void
_wrap_delete_btOverlapFilterCallback(void *swig_v)
{
  btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) 0 ;
  
  struct swigargs {
    btOverlapFilterCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlapFilterCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOverlapFilterCallback_needBroadphaseCollision(void *swig_v)
{
  btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btOverlapFilterCallback *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlapFilterCallback **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (bool)((btOverlapFilterCallback const *)arg1)->needBroadphaseCollision(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_gRemovePairs_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  gRemovePairs = arg1;
  
}


void
_wrap_gRemovePairs_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)gRemovePairs;
  swig_a->result = result; 
}


void
_wrap_gAddedPairs_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  gAddedPairs = arg1;
  
}


void
_wrap_gAddedPairs_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)gAddedPairs;
  swig_a->result = result; 
}


void
_wrap_gFindPairs_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  gFindPairs = arg1;
  
}


void
_wrap_gFindPairs_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)gFindPairs;
  swig_a->result = result; 
}


void
_wrap_BT_NULL_PAIR_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)(int)BT_NULL_PAIR;
  swig_a->result = result; 
}


void
_wrap_delete_btOverlappingPairCache(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)((btOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_getOverlappingPairArray(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_cleanOverlappingPair(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphasePair *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphasePair **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
}


void
_wrap_btOverlappingPairCache_getNumOverlappingPairs(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  int result;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (int)((btOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_cleanProxyFromPairs(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
}


void
_wrap_btOverlappingPairCache_setOverlapFilterCallback(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btOverlapFilterCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapFilterCallback **)&swig_a->arg2; 
  
  (arg1)->setOverlapFilterCallback(arg2);
  
}


void
_wrap_btOverlappingPairCache_processAllOverlappingPairs(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btOverlapCallback *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
}


void
_wrap_btOverlappingPairCache_findPair(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_hasDeferredRemoval(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  bool result;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (bool)(arg1)->hasDeferredRemoval();
  swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_setInternalGhostPairCallback(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btOverlappingPairCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCallback **)&swig_a->arg2; 
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
}


void
_wrap_btOverlappingPairCache_sortOverlappingPairs(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->sortOverlappingPairs(arg2);
  
}


void
_wrap_btOverlappingPairCache_addOverlappingPair(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  btOverlappingPairCallback *swig_b0 = (btOverlappingPairCallback *)swig_a->arg1;
  result = (btBroadphasePair *)(swig_b0)->addOverlappingPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_removeOverlappingPair(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    btDispatcher *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  btOverlappingPairCallback *swig_b0 = (btOverlappingPairCallback *)swig_a->arg1;
  result = (void *)(swig_b0)->removeOverlappingPair(arg2,arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btOverlappingPairCache_removeOverlappingPairsContainingProxy(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  btOverlappingPairCallback *swig_b0 = (btOverlappingPairCallback *)swig_a->arg1;
  (swig_b0)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
}


void
_wrap_new_btHashedOverlappingPairCache(void *swig_v)
{
  btHashedOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    long : 0;
    btHashedOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btHashedOverlappingPairCache *)new btHashedOverlappingPairCache();
  *(btHashedOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_delete_btHashedOverlappingPairCache(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
}


void
_wrap_btHashedOverlappingPairCache_removeOverlappingPair(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    btDispatcher *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_needsBroadphaseCollision(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (bool)((btHashedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_addOverlappingPair(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_cleanProxyFromPairs(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
}


void
_wrap_btHashedOverlappingPairCache_processAllOverlappingPairs(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btOverlapCallback *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
}


void
_wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)((btHashedOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_1(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &((btHashedOverlappingPairCache const *)arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_cleanOverlappingPair(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphasePair *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphasePair **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
}


void
_wrap_btHashedOverlappingPairCache_findPair(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_GetCount(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (int)((btHashedOverlappingPairCache const *)arg1)->GetCount();
  swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_getOverlapFilterCallback(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    btOverlapFilterCallback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  *(btOverlapFilterCallback **)&swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_setOverlapFilterCallback(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btOverlapFilterCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapFilterCallback **)&swig_a->arg2; 
  
  (arg1)->setOverlapFilterCallback(arg2);
  
}


void
_wrap_btHashedOverlappingPairCache_getNumOverlappingPairs(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (int)((btHashedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_hasDeferredRemoval(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  bool result;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  
  btOverlappingPairCache *swig_b0 = (btOverlappingPairCache *)swig_a->arg1;
  result = (bool)(swig_b0)->hasDeferredRemoval();
  swig_a->result = result; 
}


void
_wrap_btHashedOverlappingPairCache_setInternalGhostPairCallback(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btOverlappingPairCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCallback **)&swig_a->arg2; 
  
  btOverlappingPairCache *swig_b0 = (btOverlappingPairCache *)swig_a->arg1;
  (swig_b0)->setInternalGhostPairCallback(arg2);
  
}


void
_wrap_btHashedOverlappingPairCache_sortOverlappingPairs(void *swig_v)
{
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btHashedOverlappingPairCache *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  btOverlappingPairCache *swig_b0 = (btOverlappingPairCache *)swig_a->arg1;
  (swig_b0)->sortOverlappingPairs(arg2);
  
}


void
_wrap_new_btSortedOverlappingPairCache(void *swig_v)
{
  btSortedOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSortedOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSortedOverlappingPairCache *)new btSortedOverlappingPairCache();
  *(btSortedOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_delete_btSortedOverlappingPairCache(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSortedOverlappingPairCache_processAllOverlappingPairs(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btOverlapCallback *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
}


void
_wrap_btSortedOverlappingPairCache_removeOverlappingPair(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    btDispatcher *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_cleanOverlappingPair(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphasePair *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphasePair **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
}


void
_wrap_btSortedOverlappingPairCache_addOverlappingPair(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_findPair(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_cleanProxyFromPairs(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
}


void
_wrap_btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
}


void
_wrap_btSortedOverlappingPairCache_needsBroadphaseCollision(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (bool)((btSortedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_0(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_1(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &((btSortedOverlappingPairCache const *)arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)((btSortedOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getNumOverlappingPairs(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  int result;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (int)((btSortedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_getOverlapFilterCallback(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    btOverlapFilterCallback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  *(btOverlapFilterCallback **)&swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_setOverlapFilterCallback(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btOverlapFilterCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapFilterCallback **)&swig_a->arg2; 
  
  (arg1)->setOverlapFilterCallback(arg2);
  
}


void
_wrap_btSortedOverlappingPairCache_hasDeferredRemoval(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  bool result;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  
  result = (bool)(arg1)->hasDeferredRemoval();
  swig_a->result = result; 
}


void
_wrap_btSortedOverlappingPairCache_setInternalGhostPairCallback(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btOverlappingPairCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCallback **)&swig_a->arg2; 
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
}


void
_wrap_btSortedOverlappingPairCache_sortOverlappingPairs(void *swig_v)
{
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSortedOverlappingPairCache *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSortedOverlappingPairCache **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->sortOverlappingPairs(arg2);
  
}


void
_wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_0(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_1(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePair *)((btNullPairCache const *)arg1)->getOverlappingPairArrayPtr();
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_getOverlappingPairArray(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphasePair > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  *(btBroadphasePairArray **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_cleanOverlappingPair(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphasePair *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphasePair **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
}


void
_wrap_btNullPairCache_getNumOverlappingPairs(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  int result;
  
  struct swigargs {
    btNullPairCache *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  result = (int)((btNullPairCache const *)arg1)->getNumOverlappingPairs();
  swig_a->result = result; 
}


void
_wrap_btNullPairCache_cleanProxyFromPairs(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
}


void
_wrap_btNullPairCache_setOverlapFilterCallback(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btOverlapFilterCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapFilterCallback **)&swig_a->arg2; 
  
  (arg1)->setOverlapFilterCallback(arg2);
  
}


void
_wrap_btNullPairCache_processAllOverlappingPairs(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btOverlapCallback *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
}


void
_wrap_btNullPairCache_findPair(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_hasDeferredRemoval(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  bool result;
  
  struct swigargs {
    btNullPairCache *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  result = (bool)(arg1)->hasDeferredRemoval();
  swig_a->result = result; 
}


void
_wrap_btNullPairCache_setInternalGhostPairCallback(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btOverlappingPairCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCallback **)&swig_a->arg2; 
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
}


void
_wrap_btNullPairCache_addOverlappingPair(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    btBroadphasePair *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  *(btBroadphasePair **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_removeOverlappingPair(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    btDispatcher *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btDispatcher **)&swig_a->arg4; 
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btNullPairCache_removeOverlappingPairsContainingProxy(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
}


void
_wrap_btNullPairCache_sortOverlappingPairs(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->sortOverlappingPairs(arg2);
  
}


void
_wrap_new_btNullPairCache(void *swig_v)
{
  btNullPairCache *result = 0 ;
  
  struct swigargs {
    long : 0;
    btNullPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btNullPairCache *)new btNullPairCache();
  *(btNullPairCache **)&swig_a->result = result; 
}


void
_wrap_delete_btNullPairCache(void *swig_v)
{
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  
  struct swigargs {
    btNullPairCache *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNullPairCache **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btCollisionWorld(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btCollisionConfiguration *arg3 = (btCollisionConfiguration *) 0 ;
  btCollisionWorld *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btBroadphaseInterface *arg2;
    btCollisionConfiguration *arg3;
    long : 0;
    btCollisionWorld *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  arg3 = *(btCollisionConfiguration **)&swig_a->arg3; 
  
  result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2,arg3);
  *(btCollisionWorld **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionWorld(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionWorld_setBroadphase(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btBroadphaseInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  
  (arg1)->setBroadphase(arg2);
  
}


void
_wrap_btCollisionWorld_getBroadphase__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btBroadphaseInterface *)((btCollisionWorld const *)arg1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getBroadphase__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btBroadphaseInterface *)(arg1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getPairCache(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)(arg1)->getPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getDispatcher__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btDispatcher *)(arg1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getDispatcher__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btDispatcher *)((btCollisionWorld const *)arg1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_updateSingleAabb(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->updateSingleAabb(arg2);
  
}


void
_wrap_btCollisionWorld_updateAabbs(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  (arg1)->updateAabbs();
  
}


void
_wrap_btCollisionWorld_computeOverlappingPairs(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  (arg1)->computeOverlappingPairs();
  
}


void
_wrap_btCollisionWorld_setDebugDrawer(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  (arg1)->setDebugDrawer(arg2);
  
}


void
_wrap_btCollisionWorld_getDebugDrawer(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btIDebugDraw *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btIDebugDraw *)(arg1)->getDebugDrawer();
  *(btIDebugDraw **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_debugDrawWorld(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  (arg1)->debugDrawWorld();
  
}


void
_wrap_btCollisionWorld_debugDrawObject(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btTransform *arg2;
    btCollisionShape *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btCollisionWorld_getNumCollisionObjects(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (int)((btCollisionWorld const *)arg1)->getNumCollisionObjects();
  swig_a->result = result; 
}


void
_wrap_btCollisionWorld_rayTest(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  ((btCollisionWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btCollisionWorld_convexSweepTest__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
  
}


void
_wrap_btCollisionWorld_convexSweepTest__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
  
}


void
_wrap_btCollisionWorld_contactTest(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg3 = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
    ContactResultCallback *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(ContactResultCallback **)&swig_a->arg3; 
  
  (arg1)->contactTest(arg2,*arg3);
  
}


void
_wrap_btCollisionWorld_contactPairTest(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    ContactResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(ContactResultCallback **)&swig_a->arg4; 
  
  (arg1)->contactPairTest(arg2,arg3,*arg4);
  
}


void
_wrap_btCollisionWorld_rayTestSingle(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  RayResultCallback *arg6 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObject *arg3;
    btCollisionShape *arg4;
    btTransform *arg5;
    RayResultCallback *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btCollisionShape **)&swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(RayResultCallback **)&swig_a->arg6; 
  
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
  
}


void
_wrap_btCollisionWorld_rayTestSingleInternal(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObjectWrapper *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
  
}


void
_wrap_btCollisionWorld_objectQuerySingle(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObject *arg4;
    btCollisionShape *arg5;
    btTransform *arg6;
    ConvexResultCallback *arg7;
    float arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObject **)&swig_a->arg4; 
  arg5 = *(btCollisionShape **)&swig_a->arg5; 
  arg6 = *(btTransform **)&swig_a->arg6; 
  arg7 = *(ConvexResultCallback **)&swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
  
}


void
_wrap_btCollisionWorld_objectQuerySingleInternal(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObjectWrapper *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
  
}


void
_wrap_btCollisionWorld_addCollisionObject__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  (arg1)->addCollisionObject(arg2,arg3,arg4);
  
}


void
_wrap_btCollisionWorld_addCollisionObject__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  
  (arg1)->addCollisionObject(arg2,arg3);
  
}


void
_wrap_btCollisionWorld_addCollisionObject__SWIG_2(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->addCollisionObject(arg2);
  
}


void
_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btCollisionObjectArray *) &(arg1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btCollisionObjectArray *) &((btCollisionWorld const *)arg1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_removeCollisionObject(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->removeCollisionObject(arg2);
  
}


void
_wrap_btCollisionWorld_performDiscreteCollisionDetection(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  (arg1)->performDiscreteCollisionDetection();
  
}


void
_wrap_btCollisionWorld_getDispatchInfo__SWIG_0(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btDispatcherInfo *) &(arg1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getDispatchInfo__SWIG_1(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (btDispatcherInfo *) &((btCollisionWorld const *)arg1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btCollisionWorld_getForceUpdateAllAabbs(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  
  result = (bool)((btCollisionWorld const *)arg1)->getForceUpdateAllAabbs();
  swig_a->result = result; 
}


void
_wrap_btCollisionWorld_setForceUpdateAllAabbs(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setForceUpdateAllAabbs(arg2);
  
}


void
_wrap_btCollisionWorld_serialize(void *swig_v)
{
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCollisionWorld *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionWorld **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  (arg1)->serialize(arg2);
  
}


void
_wrap_delete_btCollisionShape(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionShape_getAabb(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btCollisionShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCollisionShape_getBoundingSphere(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  ((btCollisionShape const *)arg1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCollisionShape_getAngularMotionDisc(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionShape const *)arg1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_getContactBreakingThreshold(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCollisionShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btScalar)((btCollisionShape const *)arg1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_calculateTemporalAabb(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  ((btCollisionShape const *)arg1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCollisionShape_isPolyhedral(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isConvex2d(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isConvex(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isNonMoving(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isConcave(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isCompound(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isSoftBody(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_isInfinite(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (bool)((btCollisionShape const *)arg1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_setLocalScaling(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCollisionShape_getLocalScaling(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCollisionShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCollisionShape_calculateLocalInertia(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btCollisionShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCollisionShape_getName(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (char *)((btCollisionShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionShape_getShapeType(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (int)((btCollisionShape const *)arg1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = ((btCollisionShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCollisionShape_setMargin(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btCollisionShape_getMargin(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCollisionShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_setUserPointer(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->setUserPointer(arg2);
  
}


void
_wrap_btCollisionShape_getUserPointer(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (void *)((btCollisionShape const *)arg1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCollisionShape_calculateSerializeBufferSize(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  
  result = (int)((btCollisionShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCollisionShape_serialize(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btCollisionShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionShape_serializeSingleShape(void *swig_v)
{
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCollisionShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  ((btCollisionShape const *)arg1)->serializeSingleShape(arg2);
  
}


void
_wrap_btCollisionShapeData_m_name_set(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btCollisionShapeData_m_name_get(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCollisionShapeData_m_shapeType_set(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_shapeType = arg2;
  
}


void
_wrap_btCollisionShapeData_m_shapeType_get(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_shapeType);
  swig_a->result = result; 
}


void
_wrap_btCollisionShapeData_m_padding_set(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btCollisionShapeData_m_padding_get(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btCollisionShapeData(void *swig_v)
{
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionShapeData *)new btCollisionShapeData();
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionShapeData(void *swig_v)
{
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btCollisionShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btConvexShape(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexShape_localGetSupportingVertex(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexShape const *)arg1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexShape const *)arg1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexShape_getMarginNonVirtual(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConvexShape const *)arg1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_getAabbNonVirtual(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexShape const *)arg1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexShape_project(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  ((btConvexShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConvexShape_getAabb(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexShape_getAabbSlow(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexShape_setLocalScaling(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexShape_getLocalScaling(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btConvexShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexShape_setMargin(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btConvexShape_getMargin(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConvexShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  result = (int)((btConvexShape const *)arg1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btConvexShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConvexShape_getBoundingSphere(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConvexShape_getAngularMotionDisc(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_getContactBreakingThreshold(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConvexShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexShape_calculateTemporalAabb(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexShape_isPolyhedral(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isConvex2d(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isConvex(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isNonMoving(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isConcave(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isCompound(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isSoftBody(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_isInfinite(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_calculateLocalInertia(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConvexShape_getName(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (char *)((btCollisionShape const *)swig_b0)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexShape_getShapeType(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (int)((btCollisionShape const *)swig_b0)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = ((btCollisionShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexShape_setUserPointer(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  (swig_b0)->setUserPointer(arg2);
  
}


void
_wrap_btConvexShape_getUserPointer(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (void *)((btCollisionShape const *)swig_b0)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConvexShape_calculateSerializeBufferSize(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (int)((btCollisionShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConvexShape_serialize(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (char *)((btCollisionShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexShape_serializeSingleShape(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->serializeSingleShape(arg2);
  
}


void
_wrap_AabbExpand(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  AabbExpand(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_TestPointAgainstAabb2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (bool)TestPointAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_TestAabbAgainstAabb2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (bool)TestAabbAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_TestTriangleAgainstAabb2(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (bool)TestTriangleAgainstAabb2((btVector3 const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btOutcode(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (int)btOutcode((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btRayAabb2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int *arg3 ;
  btVector3 *arg4 ;
  btScalar *arg5 = 0 ;
  btScalar arg6 ;
  btScalar arg7 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    unsigned int *arg3;
    btVector3 (*arg4)[2];
    btScalar *arg5;
    float arg6;
    float arg7;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(unsigned int **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  
  result = (bool)btRayAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(unsigned int const (*))arg3,(btVector3 const (*))arg4,*arg5,arg6,arg7);
  swig_a->result = result; 
}


void
_wrap_btRayAabb(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btScalar *arg5;
    btVector3 *arg6;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  result = (bool)btRayAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,*arg5,*arg6);
  swig_a->result = result; 
}


void
_wrap_btTransformAabb__SWIG_0(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
    btTransform *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  btTransformAabb((btVector3 const &)*arg1,arg2,(btTransform const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btTransformAabb__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    float arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  btTransformAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,*arg5,*arg6);
  
}


void
_wrap_testQuantizedAabbAgainstQuantizedAabb(void *swig_v)
{
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  unsigned int result;
  
  struct swigargs {
    unsigned short *arg1;
    unsigned short *arg2;
    unsigned short *arg3;
    unsigned short *arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(unsigned short **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  arg3 = *(unsigned short **)&swig_a->arg3; 
  arg4 = *(unsigned short **)&swig_a->arg4; 
  
  result = (unsigned int)testQuantizedAabbAgainstQuantizedAabb((unsigned short const *)arg1,(unsigned short const *)arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
  swig_a->result = result; 
}


void
_wrap_delete_btConvexInternalShape(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexInternalShape_localGetSupportingVertex(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexInternalShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalShape_getImplicitShapeDimensions(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_setImplicitShapeDimensions(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConvexInternalShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSafeMargin(arg2);
  
}


void
_wrap_btConvexInternalShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConvexInternalShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalShape_getAabb(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexInternalShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalShape_getAabbSlow(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexInternalShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalShape_setLocalScaling(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalShape_getLocalScaling(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getLocalScalingNV(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_setMargin(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btConvexInternalShape_getMargin(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getMarginNV(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (int)((btConvexInternalShape const *)arg1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btConvexInternalShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConvexInternalShape_calculateSerializeBufferSize(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  result = (int)((btConvexInternalShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_serialize(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btConvexInternalShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexInternalShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = ((btConvexShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = ((btConvexShape const *)swig_b0)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = ((btConvexShape const *)swig_b0)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalShape_getMarginNonVirtual(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = (btScalar)((btConvexShape const *)swig_b0)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getAabbNonVirtual(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  ((btConvexShape const *)swig_b0)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalShape_project(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  ((btConvexShape const *)swig_b0)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConvexInternalShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  ((btConvexShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConvexInternalShape_getBoundingSphere(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConvexInternalShape_getAngularMotionDisc(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getContactBreakingThreshold(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_calculateTemporalAabb(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexInternalShape_isPolyhedral(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isConvex2d(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isConvex(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isNonMoving(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isConcave(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isCompound(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isSoftBody(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_isInfinite(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_calculateLocalInertia(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConvexInternalShape_getName(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (char *)((btCollisionShape const *)swig_b1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexInternalShape_getShapeType(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalShape_setUserPointer(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btConvexInternalShape_getUserPointer(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShape_serializeSingleShape(void *swig_v)
{
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConvexInternalShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_btConvexInternalShapeData_m_collisionShapeData_set(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
}


void
_wrap_btConvexInternalShapeData_m_collisionShapeData_get(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShapeData_m_localScaling_set(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localScaling = *arg2;
  
}


void
_wrap_btConvexInternalShapeData_m_localScaling_get(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShapeData_m_implicitShapeDimensions_set(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_implicitShapeDimensions = *arg2;
  
}


void
_wrap_btConvexInternalShapeData_m_implicitShapeDimensions_get(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_implicitShapeDimensions);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalShapeData_m_collisionMargin_set(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
}


void
_wrap_btConvexInternalShapeData_m_collisionMargin_get(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float result;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_collisionMargin);
  swig_a->result = result; 
}


void
_wrap_btConvexInternalShapeData_m_padding_set(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_padding = arg2;
  
}


void
_wrap_btConvexInternalShapeData_m_padding_get(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_padding);
  swig_a->result = result; 
}


void
_wrap_new_btConvexInternalShapeData(void *swig_v)
{
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConvexInternalShapeData *)new btConvexInternalShapeData();
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btConvexInternalShapeData(void *swig_v)
{
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btConvexInternalShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexInternalAabbCachingShape_setLocalScaling(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getAabb(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexInternalAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalAabbCachingShape_recalcLocalAabb(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  (arg1)->recalcLocalAabb();
  
}


void
_wrap_delete_btConvexInternalAabbCachingShape(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexInternalAabbCachingShape_localGetSupportingVertex(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = ((btConvexInternalShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalAabbCachingShape_getImplicitShapeDimensions(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_setImplicitShapeDimensions(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConvexInternalAabbCachingShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConvexInternalAabbCachingShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getAabbSlow(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getLocalScaling(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getLocalScalingNV(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_setMargin(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getMargin(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getMarginNV(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConvexInternalAabbCachingShape_calculateSerializeBufferSize(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_serialize(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (char *)((btConvexInternalShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexInternalAabbCachingShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalAabbCachingShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalAabbCachingShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalAabbCachingShape_getMarginNonVirtual(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getAabbNonVirtual(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexInternalAabbCachingShape_project(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConvexInternalAabbCachingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getBoundingSphere(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getAngularMotionDisc(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getContactBreakingThreshold(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_calculateTemporalAabb(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexInternalAabbCachingShape_isPolyhedral(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isConvex2d(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isConvex(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isNonMoving(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isConcave(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isCompound(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isSoftBody(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_isInfinite(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_calculateLocalInertia(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getName(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (char *)((btCollisionShape const *)swig_b2)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexInternalAabbCachingShape_getShapeType(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = ((btCollisionShape const *)swig_b2)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexInternalAabbCachingShape_setUserPointer(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btConvexInternalAabbCachingShape_getUserPointer(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConvexInternalAabbCachingShape_serializeSingleShape(void *swig_v)
{
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConvexInternalAabbCachingShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexInternalAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_delete_btPolyhedralConvexShape(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)(arg1)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  result = (bool)(arg1)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getConvexPolyhedron(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)arg1)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btPolyhedralConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btPolyhedralConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btPolyhedralConvexShape_calculateLocalInertia(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btPolyhedralConvexShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexShape_getNumVertices(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getNumEdges(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getEdge(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btPolyhedralConvexShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexShape_getVertex(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btPolyhedralConvexShape const *)arg1)->getVertex(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexShape_getNumPlanes(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getPlane(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btPolyhedralConvexShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btPolyhedralConvexShape_isInside(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (bool)((btPolyhedralConvexShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_localGetSupportingVertex(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = ((btConvexInternalShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexShape_getImplicitShapeDimensions(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_setImplicitShapeDimensions(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btPolyhedralConvexShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btPolyhedralConvexShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btPolyhedralConvexShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexShape_getAabb(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexShape_getAabbSlow(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexShape_setLocalScaling(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexShape_getLocalScaling(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getLocalScalingNV(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_setMargin(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btPolyhedralConvexShape_getMargin(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getMarginNV(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getPreferredPenetrationDirection(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexShape_calculateSerializeBufferSize(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_serialize(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (char *)((btConvexInternalShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btPolyhedralConvexShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexShape_getMarginNonVirtual(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getAabbNonVirtual(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexShape_project(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btPolyhedralConvexShape_getBoundingSphere(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexShape_getAngularMotionDisc(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getContactBreakingThreshold(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_calculateTemporalAabb(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btPolyhedralConvexShape_isPolyhedral(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isConvex2d(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isConvex(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isNonMoving(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isConcave(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isCompound(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isSoftBody(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_isInfinite(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getName(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (char *)((btCollisionShape const *)swig_b2)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btPolyhedralConvexShape_getShapeType(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = ((btCollisionShape const *)swig_b2)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexShape_setUserPointer(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btPolyhedralConvexShape_getUserPointer(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexShape_serializeSingleShape(void *swig_v)
{
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setLocalScaling(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getAabb(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_recalcLocalAabb(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  (arg1)->recalcLocalAabb();
  
}


void
_wrap_delete_btPolyhedralConvexAabbCachingShape(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (bool)(swig_b0)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (bool)(swig_b0)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getConvexPolyhedron(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)swig_b0)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = ((btPolyhedralConvexShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  ((btPolyhedralConvexShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_calculateLocalInertia(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  ((btPolyhedralConvexShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getNumVertices(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (int)((btPolyhedralConvexShape const *)swig_b0)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getNumEdges(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (int)((btPolyhedralConvexShape const *)swig_b0)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getEdge(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  ((btPolyhedralConvexShape const *)swig_b0)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getVertex(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  ((btPolyhedralConvexShape const *)swig_b0)->getVertex(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getNumPlanes(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (int)((btPolyhedralConvexShape const *)swig_b0)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getPlane(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  ((btPolyhedralConvexShape const *)swig_b0)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isInside(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (bool)((btPolyhedralConvexShape const *)swig_b0)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_localGetSupportingVertex(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = ((btConvexInternalShape const *)swig_b1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getImplicitShapeDimensions(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setImplicitShapeDimensions(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getAabbSlow(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getLocalScaling(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getLocalScalingNV(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setMargin(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setMargin(arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getMargin(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getMarginNV(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getPreferredPenetrationDirection(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_calculateSerializeBufferSize(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_serialize(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (char *)((btConvexInternalShape const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getMarginNonVirtual(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getAabbNonVirtual(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_project(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getBoundingSphere(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getAngularMotionDisc(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getContactBreakingThreshold(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_calculateTemporalAabb(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isPolyhedral(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isConvex2d(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isConvex(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isNonMoving(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isConcave(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isCompound(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isSoftBody(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_isInfinite(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getName(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (char *)((btCollisionShape const *)swig_b3)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getShapeType(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  int result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = ((btCollisionShape const *)swig_b3)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_setUserPointer(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btPolyhedralConvexAabbCachingShape_getUserPointer(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btPolyhedralConvexAabbCachingShape_serializeSingleShape(void *swig_v)
{
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btPolyhedralConvexAabbCachingShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPolyhedralConvexAabbCachingShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_btBoxShape_getHalfExtentsWithMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = ((btBoxShape const *)arg1)->getHalfExtentsWithMargin();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_getHalfExtentsWithoutMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btBoxShape const *)arg1)->getHalfExtentsWithoutMargin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_localGetSupportingVertex(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btBoxShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btBoxShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btBoxShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_new_btBoxShape(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btBoxShape *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btBoxShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btBoxShape *)new btBoxShape((btVector3 const &)*arg1);
  *(btBoxShape **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_setMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBoxShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btBoxShape_setLocalScaling(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btBoxShape_getAabb(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBoxShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBoxShape_calculateLocalInertia(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btBoxShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btBoxShape_getPlane(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btBoxShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btBoxShape_getNumPlanes(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (int)((btBoxShape const *)arg1)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getNumVertices(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (int)((btBoxShape const *)arg1)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getNumEdges(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (int)((btBoxShape const *)arg1)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getVertex(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btBoxShape const *)arg1)->getVertex(arg2,*arg3);
  
}


void
_wrap_btBoxShape_getPlaneEquation(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector4 *arg2 = 0 ;
  int arg3 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector4 *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector4 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  ((btBoxShape const *)arg1)->getPlaneEquation(*arg2,arg3);
  
}


void
_wrap_btBoxShape_getEdge(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBoxShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btBoxShape_isInside(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (bool)((btBoxShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getName(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (char *)((btBoxShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btBoxShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  result = (int)((btBoxShape const *)arg1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getPreferredPenetrationDirection(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btBoxShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_delete_btBoxShape(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBoxShape_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (bool)(swig_b0)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btBoxShape_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (bool)(swig_b0)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getConvexPolyhedron(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)swig_b0)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_getImplicitShapeDimensions(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_setImplicitShapeDimensions(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btBoxShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btBoxShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btBoxShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBoxShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btBoxShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btBoxShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btBoxShape_getAabbSlow(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBoxShape_getLocalScaling(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_getLocalScalingNV(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_getMargin(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getMarginNV(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_calculateSerializeBufferSize(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_serialize(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (char *)((btConvexInternalShape const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btBoxShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_getMarginNonVirtual(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getAabbNonVirtual(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBoxShape_project(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btBoxShape_getBoundingSphere(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btBoxShape_getAngularMotionDisc(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getContactBreakingThreshold(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btBoxShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btBoxShape_calculateTemporalAabb(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btBoxShape_isPolyhedral(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isConvex2d(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isConvex(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isNonMoving(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isConcave(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isCompound(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isSoftBody(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_isInfinite(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getShapeType(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btBoxShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = ((btCollisionShape const *)swig_b3)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBoxShape_setUserPointer(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btBoxShape_getUserPointer(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btBoxShape_serializeSingleShape(void *swig_v)
{
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btBoxShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBoxShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btPolyhedralConvexShape *swig_b0 = (btPolyhedralConvexShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btSphereShape(void *swig_v)
{
  btScalar arg1 ;
  btSphereShape *result = 0 ;
  
  struct swigargs {
    float arg1;
    long : 0;
    btSphereShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  result = (btSphereShape *)new btSphereShape(arg1);
  *(btSphereShape **)&swig_a->result = result; 
}


void
_wrap_btSphereShape_localGetSupportingVertex(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btSphereShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSphereShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btSphereShape_calculateLocalInertia(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btSphereShape_getAabb(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btSphereShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btSphereShape_getRadius(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  result = (btScalar)((btSphereShape const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_setUnscaledRadius(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setUnscaledRadius(arg2);
  
}


void
_wrap_btSphereShape_getName(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  result = (char *)((btSphereShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btSphereShape_setMargin(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btSphereShape_getMargin(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  result = (btScalar)((btSphereShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_delete_btSphereShape(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSphereShape_getImplicitShapeDimensions(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSphereShape_setImplicitShapeDimensions(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btSphereShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btSphereShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btSphereShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btSphereShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btSphereShape_getAabbSlow(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btSphereShape_setLocalScaling(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btSphereShape_getLocalScaling(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSphereShape_getLocalScalingNV(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSphereShape_getMarginNV(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getPreferredPenetrationDirection(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btSphereShape_calculateSerializeBufferSize(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_serialize(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (char *)((btConvexInternalShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btSphereShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSphereShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSphereShape_getMarginNonVirtual(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getAabbNonVirtual(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btSphereShape_project(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btSphereShape_getBoundingSphere(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btSphereShape_getAngularMotionDisc(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getContactBreakingThreshold(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btSphereShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btSphereShape_calculateTemporalAabb(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btSphereShape_isPolyhedral(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isConvex2d(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isConvex(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isNonMoving(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isConcave(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isCompound(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isSoftBody(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_isInfinite(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getShapeType(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btSphereShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = ((btCollisionShape const *)swig_b2)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSphereShape_setUserPointer(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btSphereShape_getUserPointer(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSphereShape_serializeSingleShape(void *swig_v)
{
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btSphereShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCapsuleShape__SWIG_1(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShape *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btCapsuleShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btCapsuleShape *)new btCapsuleShape(arg1,arg2);
  *(btCapsuleShape **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShape_calculateLocalInertia(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btCapsuleShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCapsuleShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btCapsuleShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btCapsuleShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCapsuleShape_setMargin(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btCapsuleShape_getAabb(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btCapsuleShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShape_getName(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = (char *)((btCapsuleShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCapsuleShape_getUpAxis(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = (int)((btCapsuleShape const *)arg1)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getRadius(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCapsuleShape const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getHalfHeight(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCapsuleShape const *)arg1)->getHalfHeight();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_setLocalScaling(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = ((btCapsuleShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShape_calculateSerializeBufferSize(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  result = (int)((btCapsuleShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_serialize(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btCapsuleShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btCapsuleShape(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCapsuleShape_localGetSupportingVertex(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = ((btConvexInternalShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShape_getImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShape_setImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCapsuleShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btCapsuleShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCapsuleShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShape_getAabbSlow(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShape_getLocalScaling(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getLocalScalingNV(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getMargin(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getMarginNV(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getPreferredPenetrationDirection(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCapsuleShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShape_getMarginNonVirtual(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getAabbNonVirtual(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShape_project(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCapsuleShape_getBoundingSphere(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCapsuleShape_getAngularMotionDisc(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getContactBreakingThreshold(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_calculateTemporalAabb(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCapsuleShape_isPolyhedral(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isConvex2d(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isConvex(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isNonMoving(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isConcave(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isCompound(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isSoftBody(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_isInfinite(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_getShapeType(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShape_setUserPointer(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btCapsuleShape_getUserPointer(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShape_serializeSingleShape(void *swig_v)
{
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCapsuleShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCapsuleShapeX(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeX *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btCapsuleShapeX *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btCapsuleShapeX *)new btCapsuleShapeX(arg1,arg2);
  *(btCapsuleShapeX **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getName(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  result = (char *)((btCapsuleShapeX const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btCapsuleShapeX(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCapsuleShapeX_calculateLocalInertia(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeX_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = ((btCapsuleShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCapsuleShapeX_setMargin(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btCapsuleShapeX_getAabb(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeX_getUpAxis(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (int)((btCapsuleShape const *)swig_b0)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getRadius(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (btScalar)((btCapsuleShape const *)swig_b0)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getHalfHeight(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (btScalar)((btCapsuleShape const *)swig_b0)->getHalfHeight();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_setLocalScaling(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeX_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = ((btCapsuleShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeX_calculateSerializeBufferSize(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (int)((btCapsuleShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_serialize(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (char *)((btCapsuleShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCapsuleShapeX_localGetSupportingVertex(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = ((btConvexInternalShape const *)swig_b1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeX_getImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_setImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeX_setSafeMargin__SWIG_0(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCapsuleShapeX_setSafeMargin__SWIG_1(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btCapsuleShapeX_setSafeMargin__SWIG_2(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCapsuleShapeX_setSafeMargin__SWIG_3(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeX_getAabbSlow(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeX_getLocalScaling(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getLocalScalingNV(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getMargin(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getMarginNV(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getPreferredPenetrationDirection(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeX_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeX_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeX_getMarginNonVirtual(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getAabbNonVirtual(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeX_project(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCapsuleShapeX_getBoundingSphere(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeX_getAngularMotionDisc(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getContactBreakingThreshold(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_calculateTemporalAabb(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCapsuleShapeX_isPolyhedral(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isConvex2d(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isConvex(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isNonMoving(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isConcave(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isCompound(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isSoftBody(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_isInfinite(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_getShapeType(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_setUserPointer(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btCapsuleShapeX_getUserPointer(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeX_serializeSingleShape(void *swig_v)
{
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCapsuleShapeX *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeX **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCapsuleShapeZ(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeZ *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btCapsuleShapeZ *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btCapsuleShapeZ *)new btCapsuleShapeZ(arg1,arg2);
  *(btCapsuleShapeZ **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getName(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  result = (char *)((btCapsuleShapeZ const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btCapsuleShapeZ(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCapsuleShapeZ_calculateLocalInertia(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeZ_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = ((btCapsuleShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCapsuleShapeZ_setMargin(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btCapsuleShapeZ_getAabb(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  ((btCapsuleShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeZ_getUpAxis(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (int)((btCapsuleShape const *)swig_b0)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getRadius(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (btScalar)((btCapsuleShape const *)swig_b0)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getHalfHeight(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (btScalar)((btCapsuleShape const *)swig_b0)->getHalfHeight();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_setLocalScaling(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeZ_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = ((btCapsuleShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeZ_calculateSerializeBufferSize(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (int)((btCapsuleShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_serialize(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  result = (char *)((btCapsuleShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCapsuleShapeZ_localGetSupportingVertex(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = ((btConvexInternalShape const *)swig_b1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeZ_getImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_setImplicitShapeDimensions(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeZ_setSafeMargin__SWIG_0(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCapsuleShapeZ_setSafeMargin__SWIG_1(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btCapsuleShapeZ_setSafeMargin__SWIG_2(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCapsuleShapeZ_setSafeMargin__SWIG_3(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCapsuleShapeZ_getAabbSlow(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeZ_getLocalScaling(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getLocalScalingNV(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getMargin(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getMarginNV(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getPreferredPenetrationDirection(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeZ_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeZ_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCapsuleShapeZ_getMarginNonVirtual(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getAabbNonVirtual(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCapsuleShapeZ_project(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCapsuleShapeZ_getBoundingSphere(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCapsuleShapeZ_getAngularMotionDisc(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getContactBreakingThreshold(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_calculateTemporalAabb(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCapsuleShapeZ_isPolyhedral(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isConvex2d(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isConvex(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isNonMoving(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isConcave(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isCompound(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isSoftBody(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_isInfinite(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_getShapeType(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_setUserPointer(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btCapsuleShapeZ_getUserPointer(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeZ_serializeSingleShape(void *swig_v)
{
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCapsuleShapeZ *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeZ **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCapsuleShape *swig_b0 = (btCapsuleShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_btCapsuleShapeData_m_convexInternalShapeData_set(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    btConvexInternalShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  arg2 = *(btConvexInternalShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
}


void
_wrap_btCapsuleShapeData_m_convexInternalShapeData_get(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_btCapsuleShapeData_m_upAxis_set(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upAxis = arg2;
  
}


void
_wrap_btCapsuleShapeData_m_upAxis_get(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_upAxis);
  swig_a->result = result; 
}


void
_wrap_btCapsuleShapeData_m_padding_set(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btCapsuleShapeData_m_padding_get(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btCapsuleShapeData(void *swig_v)
{
  btCapsuleShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCapsuleShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCapsuleShapeData *)new btCapsuleShapeData();
  *(btCapsuleShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btCapsuleShapeData(void *swig_v)
{
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  
  struct swigargs {
    btCapsuleShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCapsuleShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCylinderShape_getHalfExtentsWithMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = ((btCylinderShape const *)arg1)->getHalfExtentsWithMargin();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_getHalfExtentsWithoutMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCylinderShape const *)arg1)->getHalfExtentsWithoutMargin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_new_btCylinderShape(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btCylinderShape *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btCylinderShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btCylinderShape *)new btCylinderShape((btVector3 const &)*arg1);
  *(btCylinderShape **)&swig_a->result = result; 
}


void
_wrap_btCylinderShape_getAabb(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btCylinderShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShape_calculateLocalInertia(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btCylinderShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCylinderShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btCylinderShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCylinderShape_setMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btCylinderShape_localGetSupportingVertex(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_getUpAxis(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = (int)((btCylinderShape const *)arg1)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = ((btCylinderShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_getRadius(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCylinderShape const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_setLocalScaling(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShape_getName(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = (char *)((btCylinderShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCylinderShape_calculateSerializeBufferSize(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  result = (int)((btCylinderShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_serialize(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btCylinderShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btCylinderShape(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCylinderShape_getImplicitShapeDimensions(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShape_setImplicitShapeDimensions(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCylinderShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btCylinderShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCylinderShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShape_getAabbSlow(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShape_getLocalScaling(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShape_getLocalScalingNV(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShape_getMargin(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getMarginNV(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getPreferredPenetrationDirection(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCylinderShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShape_getMarginNonVirtual(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getAabbNonVirtual(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShape_project(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCylinderShape_getBoundingSphere(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCylinderShape_getAngularMotionDisc(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getContactBreakingThreshold(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_calculateTemporalAabb(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCylinderShape_isPolyhedral(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isConvex2d(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isConvex(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isNonMoving(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isConcave(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isCompound(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isSoftBody(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_isInfinite(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_getShapeType(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCylinderShape_setUserPointer(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btCylinderShape_getUserPointer(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCylinderShape_serializeSingleShape(void *swig_v)
{
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCylinderShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCylinderShapeX(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btCylinderShapeX *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btCylinderShapeX *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btCylinderShapeX *)new btCylinderShapeX((btVector3 const &)*arg1);
  *(btCylinderShapeX **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btCylinderShapeX const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btCylinderShapeX const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCylinderShapeX_getName(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  result = (char *)((btCylinderShapeX const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCylinderShapeX_getRadius(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  result = (btScalar)((btCylinderShapeX const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_delete_btCylinderShapeX(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCylinderShapeX_getHalfExtentsWithMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->getHalfExtentsWithMargin();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_getHalfExtentsWithoutMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (btVector3 *) &((btCylinderShape const *)swig_b0)->getHalfExtentsWithoutMargin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getAabb(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  ((btCylinderShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeX_calculateLocalInertia(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  ((btCylinderShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCylinderShapeX_setMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btCylinderShapeX_localGetSupportingVertex(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_getUpAxis(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (int)((btCylinderShape const *)swig_b0)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_setLocalScaling(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeX_calculateSerializeBufferSize(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (int)((btCylinderShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_serialize(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (char *)((btCylinderShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCylinderShapeX_getImplicitShapeDimensions(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_setImplicitShapeDimensions(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeX_setSafeMargin__SWIG_0(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCylinderShapeX_setSafeMargin__SWIG_1(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btCylinderShapeX_setSafeMargin__SWIG_2(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCylinderShapeX_setSafeMargin__SWIG_3(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeX_getAabbSlow(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeX_getLocalScaling(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getLocalScalingNV(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getMargin(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getMarginNV(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getPreferredPenetrationDirection(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCylinderShapeX_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeX_getMarginNonVirtual(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getAabbNonVirtual(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeX_project(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCylinderShapeX_getBoundingSphere(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCylinderShapeX_getAngularMotionDisc(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getContactBreakingThreshold(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_calculateTemporalAabb(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCylinderShapeX_isPolyhedral(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isConvex2d(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isConvex(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isNonMoving(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isConcave(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isCompound(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isSoftBody(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_isInfinite(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_getShapeType(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_setUserPointer(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btCylinderShapeX_getUserPointer(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeX_serializeSingleShape(void *swig_v)
{
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCylinderShapeX *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeX **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCylinderShapeZ(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btCylinderShapeZ *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btCylinderShapeZ *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btCylinderShapeZ *)new btCylinderShapeZ((btVector3 const &)*arg1);
  *(btCylinderShapeZ **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btCylinderShapeZ const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btCylinderShapeZ const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btCylinderShapeZ_getName(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  result = (char *)((btCylinderShapeZ const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCylinderShapeZ_getRadius(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  result = (btScalar)((btCylinderShapeZ const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_delete_btCylinderShapeZ(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCylinderShapeZ_getHalfExtentsWithMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->getHalfExtentsWithMargin();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_getHalfExtentsWithoutMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (btVector3 *) &((btCylinderShape const *)swig_b0)->getHalfExtentsWithoutMargin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getAabb(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  ((btCylinderShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeZ_calculateLocalInertia(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  ((btCylinderShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCylinderShapeZ_setMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btCylinderShapeZ_localGetSupportingVertex(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_getUpAxis(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (int)((btCylinderShape const *)swig_b0)->getUpAxis();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = ((btCylinderShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_setLocalScaling(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeZ_calculateSerializeBufferSize(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (int)((btCylinderShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_serialize(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  result = (char *)((btCylinderShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCylinderShapeZ_getImplicitShapeDimensions(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_setImplicitShapeDimensions(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeZ_setSafeMargin__SWIG_0(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btCylinderShapeZ_setSafeMargin__SWIG_1(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btCylinderShapeZ_setSafeMargin__SWIG_2(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btCylinderShapeZ_setSafeMargin__SWIG_3(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btCylinderShapeZ_getAabbSlow(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeZ_getLocalScaling(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getLocalScalingNV(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getMargin(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getMarginNV(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getNumPreferredPenetrationDirections(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getPreferredPenetrationDirection(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btCylinderShapeZ_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_localGetSupportVertexNonVirtual(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCylinderShapeZ_getMarginNonVirtual(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getAabbNonVirtual(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCylinderShapeZ_project(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btCylinderShapeZ_getBoundingSphere(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCylinderShapeZ_getAngularMotionDisc(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getContactBreakingThreshold(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_calculateTemporalAabb(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCylinderShapeZ_isPolyhedral(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isConvex2d(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isConvex(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isNonMoving(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isConcave(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isCompound(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isSoftBody(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_isInfinite(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_getShapeType(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_setUserPointer(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btCylinderShapeZ_getUserPointer(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeZ_serializeSingleShape(void *swig_v)
{
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCylinderShapeZ *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeZ **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCylinderShape *swig_b0 = (btCylinderShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_btCylinderShapeData_m_convexInternalShapeData_set(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    btConvexInternalShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  arg2 = *(btConvexInternalShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
}


void
_wrap_btCylinderShapeData_m_convexInternalShapeData_get(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_btCylinderShapeData_m_upAxis_set(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upAxis = arg2;
  
}


void
_wrap_btCylinderShapeData_m_upAxis_get(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_upAxis);
  swig_a->result = result; 
}


void
_wrap_btCylinderShapeData_m_padding_set(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btCylinderShapeData_m_padding_get(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btCylinderShapeData(void *swig_v)
{
  btCylinderShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCylinderShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCylinderShapeData *)new btCylinderShapeData();
  *(btCylinderShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btCylinderShapeData(void *swig_v)
{
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  
  struct swigargs {
    btCylinderShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCylinderShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btConeShape(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShape *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btConeShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btConeShape *)new btConeShape(arg1,arg2);
  *(btConeShape **)&swig_a->result = result; 
}


void
_wrap_btConeShape_localGetSupportingVertex(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConeShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConeShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConeShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConeShape_getRadius(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConeShape const *)arg1)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getHeight(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConeShape const *)arg1)->getHeight();
  swig_a->result = result; 
}


void
_wrap_btConeShape_calculateLocalInertia(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btConeShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConeShape_getName(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = (char *)((btConeShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConeShape_setConeUpIndex(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeShape *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setConeUpIndex(arg2);
  
}


void
_wrap_btConeShape_getConeUpIndex(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = (int)((btConeShape const *)arg1)->getConeUpIndex();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = ((btConeShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShape_setLocalScaling(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShape_calculateSerializeBufferSize(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  result = (int)((btConeShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConeShape_serialize(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btConeShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btConeShape(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  
  struct swigargs {
    btConeShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConeShape_getImplicitShapeDimensions(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShape_setImplicitShapeDimensions(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConeShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin(arg2);
  
}


void
_wrap_btConeShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConeShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShape_getAabb(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShape_getAabbSlow(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShape_getLocalScaling(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShape_getLocalScalingNV(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b0)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShape_setMargin(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btConeShape_getMargin(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getMarginNV(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (btScalar)((btConvexInternalShape const *)swig_b0)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  result = (int)((btConvexInternalShape const *)swig_b0)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  ((btConvexInternalShape const *)swig_b0)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConeShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = ((btConvexShape const *)swig_b1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShape_getMarginNonVirtual(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  result = (btScalar)((btConvexShape const *)swig_b1)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getAabbNonVirtual(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShape_project(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  ((btConvexShape const *)swig_b1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConeShape_getBoundingSphere(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConeShape_getAngularMotionDisc(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getContactBreakingThreshold(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConeShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConeShape_calculateTemporalAabb(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConeShape_isPolyhedral(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isConvex2d(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isConvex(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isNonMoving(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isConcave(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isCompound(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isSoftBody(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConeShape_isInfinite(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConeShape_getShapeType(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConeShape_setUserPointer(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btConeShape_getUserPointer(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConeShape_serializeSingleShape(void *swig_v)
{
  btConeShape *arg1 = (btConeShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConeShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalShape *swig_b0 = (btConvexInternalShape *)swig_a->arg1;
  btConvexShape *swig_b1 = (btConvexShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btConeShapeX(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeX *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btConeShapeX *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btConeShapeX *)new btConeShapeX(arg1,arg2);
  *(btConeShapeX **)&swig_a->result = result; 
}


void
_wrap_btConeShapeX_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  result = ((btConeShapeX const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeX_getName(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  result = (char *)((btConeShapeX const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btConeShapeX(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConeShapeX_localGetSupportingVertex(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = ((btConeShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeX_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = ((btConeShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  ((btConeShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConeShapeX_getRadius(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (btScalar)((btConeShape const *)swig_b0)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getHeight(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (btScalar)((btConeShape const *)swig_b0)->getHeight();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_calculateLocalInertia(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  ((btConeShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConeShapeX_setConeUpIndex(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  (swig_b0)->setConeUpIndex(arg2);
  
}


void
_wrap_btConeShapeX_getConeUpIndex(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (int)((btConeShape const *)swig_b0)->getConeUpIndex();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_setLocalScaling(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeX_calculateSerializeBufferSize(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (int)((btConeShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_serialize(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (char *)((btConeShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConeShapeX_getImplicitShapeDimensions(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeX_setImplicitShapeDimensions(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeX_setSafeMargin__SWIG_0(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConeShapeX_setSafeMargin__SWIG_1(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btConeShapeX_setSafeMargin__SWIG_2(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConeShapeX_setSafeMargin__SWIG_3(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeX_getAabb(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeX_getAabbSlow(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeX_getLocalScaling(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeX_getLocalScalingNV(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeX_setMargin(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setMargin(arg2);
  
}


void
_wrap_btConeShapeX_getMargin(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getMarginNV(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getPreferredPenetrationDirection(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConeShapeX_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeX_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeX_getMarginNonVirtual(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getAabbNonVirtual(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeX_project(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConeShapeX_getBoundingSphere(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConeShapeX_getAngularMotionDisc(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getContactBreakingThreshold(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeX *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_calculateTemporalAabb(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConeShapeX_isPolyhedral(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isConvex2d(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isConvex(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isNonMoving(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isConcave(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isCompound(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isSoftBody(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_isInfinite(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_getShapeType(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConeShapeX_setUserPointer(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btConeShapeX_getUserPointer(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConeShapeX_serializeSingleShape(void *swig_v)
{
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConeShapeX *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeX **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btConeShapeZ(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeZ *result = 0 ;
  
  struct swigargs {
    float arg1;
    float arg2;
    long : 0;
    btConeShapeZ *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btConeShapeZ *)new btConeShapeZ(arg1,arg2);
  *(btConeShapeZ **)&swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  result = ((btConeShapeZ const *)arg1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeZ_getName(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  result = (char *)((btConeShapeZ const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btConeShapeZ(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConeShapeZ_localGetSupportingVertex(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = ((btConeShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeZ_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = ((btConeShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  ((btConeShape const *)swig_b0)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConeShapeZ_getRadius(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (btScalar)((btConeShape const *)swig_b0)->getRadius();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getHeight(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (btScalar)((btConeShape const *)swig_b0)->getHeight();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_calculateLocalInertia(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  ((btConeShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConeShapeZ_setConeUpIndex(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  (swig_b0)->setConeUpIndex(arg2);
  
}


void
_wrap_btConeShapeZ_getConeUpIndex(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (int)((btConeShape const *)swig_b0)->getConeUpIndex();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_setLocalScaling(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeZ_calculateSerializeBufferSize(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (int)((btConeShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_serialize(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  result = (char *)((btConeShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConeShapeZ_getImplicitShapeDimensions(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeZ_setImplicitShapeDimensions(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeZ_setSafeMargin__SWIG_0(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConeShapeZ_setSafeMargin__SWIG_1(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btConeShapeZ_setSafeMargin__SWIG_2(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConeShapeZ_setSafeMargin__SWIG_3(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConeShapeZ_getAabb(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeZ_getAabbSlow(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeZ_getLocalScaling(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getLocalScalingNV(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConeShapeZ_setMargin(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setMargin(arg2);
  
}


void
_wrap_btConeShapeZ_getMargin(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getMarginNV(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getPreferredPenetrationDirection(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConeShapeZ_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeZ_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeShapeZ_getMarginNonVirtual(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getAabbNonVirtual(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConeShapeZ_project(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConeShapeZ_getBoundingSphere(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConeShapeZ_getAngularMotionDisc(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getContactBreakingThreshold(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_calculateTemporalAabb(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConeShapeZ_isPolyhedral(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isConvex2d(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isConvex(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isNonMoving(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isConcave(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isCompound(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isSoftBody(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_isInfinite(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  bool result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_getShapeType(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConeShapeZ_setUserPointer(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btConeShapeZ_getUserPointer(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConeShapeZ_serializeSingleShape(void *swig_v)
{
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConeShapeZ *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeZ **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConeShape *swig_b0 = (btConeShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_btConeShapeData_m_convexInternalShapeData_set(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btConeShapeData *arg1;
    btConvexInternalShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  arg2 = *(btConvexInternalShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
}


void
_wrap_btConeShapeData_m_convexInternalShapeData_get(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    btConeShapeData *arg1;
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_btConeShapeData_m_upIndex_set(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upIndex = arg2;
  
}


void
_wrap_btConeShapeData_m_upIndex_get(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btConeShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_upIndex);
  swig_a->result = result; 
}


void
_wrap_btConeShapeData_m_padding_set(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btConeShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btConeShapeData_m_padding_get(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btConeShapeData(void *swig_v)
{
  btConeShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConeShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConeShapeData *)new btConeShapeData();
  *(btConeShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btConeShapeData(void *swig_v)
{
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  
  struct swigargs {
    btConeShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btTriangleCallback(void *swig_v)
{
  btTriangleCallback *arg1 = (btTriangleCallback *) 0 ;
  
  struct swigargs {
    btTriangleCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleCallback_processTriangle(void *swig_v)
{
  btTriangleCallback *arg1 = (btTriangleCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  struct swigargs {
    btTriangleCallback *arg1;
    btVector3 *arg2;
    intgo arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleCallback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->processTriangle(arg2,arg3,arg4);
  
}


void
_wrap_delete_btInternalTriangleIndexCallback(void *swig_v)
{
  btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) 0 ;
  
  struct swigargs {
    btInternalTriangleIndexCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btInternalTriangleIndexCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btInternalTriangleIndexCallback_internalProcessTriangleIndex(void *swig_v)
{
  btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  struct swigargs {
    btInternalTriangleIndexCallback *arg1;
    btVector3 *arg2;
    intgo arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btInternalTriangleIndexCallback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->internalProcessTriangleIndex(arg2,arg3,arg4);
  
}


void
_wrap_PHY_FLOAT(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_FLOAT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PHY_DOUBLE(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_DOUBLE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PHY_INTEGER(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_INTEGER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PHY_SHORT(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_SHORT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PHY_FIXEDPOINT88(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_FIXEDPOINT88;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PHY_UCHAR(void *swig_v)
{
  PHY_ScalarType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = PHY_UCHAR;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btConcaveShape(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConcaveShape_processAllTriangles(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConcaveShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btConcaveShape_getMargin(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  result = (btScalar)((btConcaveShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_setMargin(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btConcaveShape_getAabb(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConcaveShape_getBoundingSphere(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConcaveShape_getAngularMotionDisc(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_getContactBreakingThreshold(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConcaveShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_calculateTemporalAabb(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConcaveShape_isPolyhedral(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isConvex2d(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isConvex(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isNonMoving(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isConcave(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isCompound(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isSoftBody(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_isInfinite(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_setLocalScaling(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConcaveShape_getLocalScaling(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btVector3 *) &((btCollisionShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConcaveShape_calculateLocalInertia(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConcaveShape_getName(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (char *)((btCollisionShape const *)swig_b0)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConcaveShape_getShapeType(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  int result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (int)((btCollisionShape const *)swig_b0)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = ((btCollisionShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConcaveShape_setUserPointer(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  (swig_b0)->setUserPointer(arg2);
  
}


void
_wrap_btConcaveShape_getUserPointer(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (void *)((btCollisionShape const *)swig_b0)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConcaveShape_calculateSerializeBufferSize(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  int result;
  
  struct swigargs {
    btConcaveShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (int)((btCollisionShape const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConcaveShape_serialize(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (char *)((btCollisionShape const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConcaveShape_serializeSingleShape(void *swig_v)
{
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConcaveShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConcaveShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btStaticPlaneShape(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btStaticPlaneShape *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
    long : 0;
    btStaticPlaneShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btStaticPlaneShape *)new btStaticPlaneShape((btVector3 const &)*arg1,arg2);
  *(btStaticPlaneShape **)&swig_a->result = result; 
}


void
_wrap_delete_btStaticPlaneShape(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btStaticPlaneShape_getAabb(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btStaticPlaneShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btStaticPlaneShape_processAllTriangles(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btStaticPlaneShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btStaticPlaneShape_calculateLocalInertia(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btStaticPlaneShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btStaticPlaneShape_setLocalScaling(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btStaticPlaneShape_getLocalScaling(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_getPlaneNormal(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getPlaneNormal();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_getPlaneConstant(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  result = (btScalar *) &((btStaticPlaneShape const *)arg1)->getPlaneConstant();
  swig_a->result = (btScalar)*result; 
}


void
_wrap_btStaticPlaneShape_getName(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  result = (char *)((btStaticPlaneShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btStaticPlaneShape_calculateSerializeBufferSize(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  int result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  result = (int)((btStaticPlaneShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_serialize(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btStaticPlaneShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btStaticPlaneShape_getMargin(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  result = (btScalar)((btConcaveShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_setMargin(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btStaticPlaneShape_getBoundingSphere(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btStaticPlaneShape_getAngularMotionDisc(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_getContactBreakingThreshold(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_calculateTemporalAabb(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btStaticPlaneShape_isPolyhedral(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isConvex2d(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isConvex(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isNonMoving(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isConcave(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isCompound(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isSoftBody(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_isInfinite(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  bool result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_getShapeType(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  int result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btStaticPlaneShape_setUserPointer(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btStaticPlaneShape_getUserPointer(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShape_serializeSingleShape(void *swig_v)
{
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btStaticPlaneShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_btStaticPlaneShapeData_m_collisionShapeData_set(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
}


void
_wrap_btStaticPlaneShapeData_m_collisionShapeData_get(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShapeData_m_localScaling_set(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localScaling = *arg2;
  
}


void
_wrap_btStaticPlaneShapeData_m_localScaling_get(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShapeData_m_planeNormal_set(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_planeNormal = *arg2;
  
}


void
_wrap_btStaticPlaneShapeData_m_planeNormal_get(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_planeNormal);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btStaticPlaneShapeData_m_planeConstant_set(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_planeConstant = arg2;
  
}


void
_wrap_btStaticPlaneShapeData_m_planeConstant_get(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float result;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_planeConstant);
  swig_a->result = result; 
}


void
_wrap_btStaticPlaneShapeData_m_pad_set(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btStaticPlaneShapeData_m_pad_get(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btStaticPlaneShapeData(void *swig_v)
{
  btStaticPlaneShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btStaticPlaneShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btStaticPlaneShapeData *)new btStaticPlaneShapeData();
  *(btStaticPlaneShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btStaticPlaneShapeData(void *swig_v)
{
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  
  struct swigargs {
    btStaticPlaneShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStaticPlaneShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btConvexHullShape__SWIG_0(void *swig_v)
{
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  int arg3 ;
  btConvexHullShape *result = 0 ;
  
  struct swigargs {
    btScalar *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    btConvexHullShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScalar **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2,arg3);
  *(btConvexHullShape **)&swig_a->result = result; 
}


void
_wrap_new_btConvexHullShape__SWIG_1(void *swig_v)
{
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  btConvexHullShape *result = 0 ;
  
  struct swigargs {
    btScalar *arg1;
    intgo arg2;
    long : 0;
    btConvexHullShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScalar **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2);
  *(btConvexHullShape **)&swig_a->result = result; 
}


void
_wrap_new_btConvexHullShape__SWIG_2(void *swig_v)
{
  btScalar *arg1 = (btScalar *) 0 ;
  btConvexHullShape *result = 0 ;
  
  struct swigargs {
    btScalar *arg1;
    long : 0;
    btConvexHullShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScalar **)&swig_a->arg1; 
  
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1);
  *(btConvexHullShape **)&swig_a->result = result; 
}


void
_wrap_new_btConvexHullShape__SWIG_3(void *swig_v)
{
  btConvexHullShape *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConvexHullShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConvexHullShape *)new btConvexHullShape();
  *(btConvexHullShape **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_addPoint__SWIG_0(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  bool arg3 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  (arg1)->addPoint((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConvexHullShape_addPoint__SWIG_1(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->addPoint((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexHullShape_getUnscaledPoints__SWIG_0(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (btVector3 *)(arg1)->getUnscaledPoints();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getUnscaledPoints__SWIG_1(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getUnscaledPoints();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getPoints(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getPoints();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getScaledPoint(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = ((btConvexHullShape const *)arg1)->getScaledPoint(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_getNumPoints(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (int)((btConvexHullShape const *)arg1)->getNumPoints();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_localGetSupportingVertex(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConvexHullShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConvexHullShape_project(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  ((btConvexHullShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexHullShape_getName(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (char *)((btConvexHullShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexHullShape_getNumVertices(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (int)((btConvexHullShape const *)arg1)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getNumEdges(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (int)((btConvexHullShape const *)arg1)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getEdge(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexHullShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexHullShape_getVertex(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btConvexHullShape const *)arg1)->getVertex(arg2,*arg3);
  
}


void
_wrap_btConvexHullShape_getNumPlanes(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (int)((btConvexHullShape const *)arg1)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getPlane(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConvexHullShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btConvexHullShape_isInside(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (bool)((btConvexHullShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_setLocalScaling(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexHullShape_calculateSerializeBufferSize(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  result = (int)((btConvexHullShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_serialize(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btConvexHullShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btConvexHullShape(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexHullShape_getNonvirtualAabb(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  ((btPolyhedralConvexAabbCachingShape const *)swig_b0)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
  
}


void
_wrap_btConvexHullShape_getAabb(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  ((btPolyhedralConvexAabbCachingShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexHullShape_recalcLocalAabb(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  (swig_b0)->recalcLocalAabb();
  
}


void
_wrap_btConvexHullShape_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getConvexPolyhedron(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)swig_b1)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_calculateLocalInertia(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  ((btPolyhedralConvexShape const *)swig_b1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConvexHullShape_getImplicitShapeDimensions(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_setImplicitShapeDimensions(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexHullShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConvexHullShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2);
  
}


void
_wrap_btConvexHullShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConvexHullShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexHullShape_getAabbSlow(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexHullShape_getLocalScaling(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getLocalScalingNV(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_setMargin(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setMargin(arg2);
  
}


void
_wrap_btConvexHullShape_getMargin(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getMarginNV(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (int)((btConvexInternalShape const *)swig_b2)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConvexHullShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_getMarginNonVirtual(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = (btScalar)((btConvexShape const *)swig_b3)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getAabbNonVirtual(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  ((btConvexShape const *)swig_b3)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexHullShape_getBoundingSphere(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConvexHullShape_getAngularMotionDisc(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getContactBreakingThreshold(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_calculateTemporalAabb(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexHullShape_isPolyhedral(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isConvex2d(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isConvex(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isNonMoving(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isConcave(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isCompound(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isSoftBody(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_isInfinite(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getShapeType(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (int)((btCollisionShape const *)swig_b4)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConvexHullShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = ((btCollisionShape const *)swig_b4)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexHullShape_setUserPointer(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  (swig_b4)->setUserPointer(arg2);
  
}


void
_wrap_btConvexHullShape_getUserPointer(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (void *)((btCollisionShape const *)swig_b4)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShape_serializeSingleShape(void *swig_v)
{
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConvexHullShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->serializeSingleShape(arg2);
  
}


void
_wrap_btConvexHullShapeData_m_convexInternalShapeData_set(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    btConvexInternalShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  arg2 = *(btConvexInternalShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
}


void
_wrap_btConvexHullShapeData_m_convexInternalShapeData_get(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_set(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_unscaledPointsFloatPtr = arg2;
  
}


void
_wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_get(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *) ((arg1)->m_unscaledPointsFloatPtr);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_set(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_unscaledPointsDoublePtr = arg2;
  
}


void
_wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_get(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *) ((arg1)->m_unscaledPointsDoublePtr);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btConvexHullShapeData_m_numUnscaledPoints_set(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numUnscaledPoints = arg2;
  
}


void
_wrap_btConvexHullShapeData_m_numUnscaledPoints_get(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numUnscaledPoints);
  swig_a->result = result; 
}


void
_wrap_btConvexHullShapeData_m_padding3_set(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding3, (const char *)arg2, 4-1);
      arg1->m_padding3[4-1] = 0;
    } else {
      arg1->m_padding3[0] = 0;
    }
  }
  
}


void
_wrap_btConvexHullShapeData_m_padding3_get(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btConvexHullShapeData(void *swig_v)
{
  btConvexHullShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConvexHullShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConvexHullShapeData *)new btConvexHullShapeData();
  *(btConvexHullShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btConvexHullShapeData(void *swig_v)
{
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  
  struct swigargs {
    btConvexHullShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexHullShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btStridingMeshInterface(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btStridingMeshInterface_InternalProcessAllTriangles(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btInternalTriangleIndexCallback *arg2 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    btInternalTriangleIndexCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(btInternalTriangleIndexCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btStridingMeshInterface const *)arg1)->InternalProcessAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btStridingMeshInterface_calculateAabbBruteForce(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->calculateAabbBruteForce(*arg2,*arg3);
  
}


void
_wrap_btStridingMeshInterface_unLockVertexBase(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->unLockVertexBase(arg2);
  
}


void
_wrap_btStridingMeshInterface_unLockReadOnlyVertexBase(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  ((btStridingMeshInterface const *)arg1)->unLockReadOnlyVertexBase(arg2);
  
}


void
_wrap_btStridingMeshInterface_getNumSubParts(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  result = (int)((btStridingMeshInterface const *)arg1)->getNumSubParts();
  swig_a->result = result; 
}


void
_wrap_btStridingMeshInterface_preallocateVertices(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateVertices(arg2);
  
}


void
_wrap_btStridingMeshInterface_preallocateIndices(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateIndices(arg2);
  
}


void
_wrap_btStridingMeshInterface_hasPremadeAabb(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool result;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  result = (bool)((btStridingMeshInterface const *)arg1)->hasPremadeAabb();
  swig_a->result = result; 
}


void
_wrap_btStridingMeshInterface_setPremadeAabb(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btStridingMeshInterface const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btStridingMeshInterface_getPremadeAabb(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btStridingMeshInterface const *)arg1)->getPremadeAabb(arg2,arg3);
  
}


void
_wrap_btStridingMeshInterface_getScaling(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btStridingMeshInterface const *)arg1)->getScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btStridingMeshInterface_setScaling(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btStridingMeshInterface_calculateSerializeBufferSize(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  result = (int)((btStridingMeshInterface const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btStridingMeshInterface_serialize(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btStridingMeshInterface const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btIntIndexData_m_value_set(void *swig_v)
{
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIntIndexData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIntIndexData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_value = arg2;
  
}


void
_wrap_btIntIndexData_m_value_get(void *swig_v)
{
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int result;
  
  struct swigargs {
    btIntIndexData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIntIndexData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_value);
  swig_a->result = result; 
}


void
_wrap_new_btIntIndexData(void *swig_v)
{
  btIntIndexData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btIntIndexData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btIntIndexData *)new btIntIndexData();
  *(btIntIndexData **)&swig_a->result = result; 
}


void
_wrap_delete_btIntIndexData(void *swig_v)
{
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  
  struct swigargs {
    btIntIndexData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIntIndexData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btShortIntIndexData_m_value_set(void *swig_v)
{
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btShortIntIndexData *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexData **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  if (arg1) (arg1)->m_value = arg2;
  
}


void
_wrap_btShortIntIndexData_m_value_get(void *swig_v)
{
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short result;
  
  struct swigargs {
    btShortIntIndexData *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexData **)&swig_a->arg1; 
  
  result = (short) ((arg1)->m_value);
  swig_a->result = result; 
}


void
_wrap_btShortIntIndexData_m_pad_set(void *swig_v)
{
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btShortIntIndexData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btShortIntIndexData_m_pad_get(void *swig_v)
{
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btShortIntIndexData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btShortIntIndexData(void *swig_v)
{
  btShortIntIndexData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btShortIntIndexData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btShortIntIndexData *)new btShortIntIndexData();
  *(btShortIntIndexData **)&swig_a->result = result; 
}


void
_wrap_delete_btShortIntIndexData(void *swig_v)
{
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  
  struct swigargs {
    btShortIntIndexData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btShortIntIndexTripletData_m_values_set(void *swig_v)
{
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *arg2 ;
  
  struct swigargs {
    btShortIntIndexTripletData *arg1;
    short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexTripletData **)&swig_a->arg1; 
  arg2 = *(short **)&swig_a->arg2; 
  
  {
    size_t ii;
    short *b = (short *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  
}


void
_wrap_btShortIntIndexTripletData_m_values_get(void *swig_v)
{
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *result = 0 ;
  
  struct swigargs {
    btShortIntIndexTripletData *arg1;
    long : 0;
    short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexTripletData **)&swig_a->arg1; 
  
  result = (short *)(short *) ((arg1)->m_values);
  *(short **)&swig_a->result = result; 
}


void
_wrap_btShortIntIndexTripletData_m_pad_set(void *swig_v)
{
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btShortIntIndexTripletData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexTripletData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btShortIntIndexTripletData_m_pad_get(void *swig_v)
{
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btShortIntIndexTripletData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexTripletData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btShortIntIndexTripletData(void *swig_v)
{
  btShortIntIndexTripletData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btShortIntIndexTripletData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btShortIntIndexTripletData *)new btShortIntIndexTripletData();
  *(btShortIntIndexTripletData **)&swig_a->result = result; 
}


void
_wrap_delete_btShortIntIndexTripletData(void *swig_v)
{
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  
  struct swigargs {
    btShortIntIndexTripletData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btShortIntIndexTripletData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCharIndexTripletData_m_values_set(void *swig_v)
{
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *arg2 ;
  
  struct swigargs {
    btCharIndexTripletData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCharIndexTripletData **)&swig_a->arg1; 
  arg2 = (unsigned char *)swig_a->arg2.p; 
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
}


void
_wrap_btCharIndexTripletData_m_values_get(void *swig_v)
{
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btCharIndexTripletData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCharIndexTripletData **)&swig_a->arg1; 
  
  result = (unsigned char *)(unsigned char *) ((arg1)->m_values);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCharIndexTripletData_m_pad_set(void *swig_v)
{
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char arg2 ;
  
  struct swigargs {
    btCharIndexTripletData *arg1;
    char arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCharIndexTripletData **)&swig_a->arg1; 
  arg2 = (char)swig_a->arg2; 
  
  if (arg1) (arg1)->m_pad = arg2;
  
}


void
_wrap_btCharIndexTripletData_m_pad_get(void *swig_v)
{
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char result;
  
  struct swigargs {
    btCharIndexTripletData *arg1;
    long : 0;
    char result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCharIndexTripletData **)&swig_a->arg1; 
  
  result = (char) ((arg1)->m_pad);
  swig_a->result = result; 
}


void
_wrap_new_btCharIndexTripletData(void *swig_v)
{
  btCharIndexTripletData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCharIndexTripletData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCharIndexTripletData *)new btCharIndexTripletData();
  *(btCharIndexTripletData **)&swig_a->result = result; 
}


void
_wrap_delete_btCharIndexTripletData(void *swig_v)
{
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  
  struct swigargs {
    btCharIndexTripletData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCharIndexTripletData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMeshPartData_m_vertices3f_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_vertices3f = arg2;
  
}


void
_wrap_btMeshPartData_m_vertices3f_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *) ((arg1)->m_vertices3f);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_vertices3d_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_vertices3d = arg2;
  
}


void
_wrap_btMeshPartData_m_vertices3d_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *) ((arg1)->m_vertices3d);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_indices32_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *arg2 = (btIntIndexData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btIntIndexData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btIntIndexData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_indices32 = arg2;
  
}


void
_wrap_btMeshPartData_m_indices32_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btIntIndexData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btIntIndexData *) ((arg1)->m_indices32);
  *(btIntIndexData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_3indices16_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *arg2 = (btShortIntIndexTripletData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btShortIntIndexTripletData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btShortIntIndexTripletData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_3indices16 = arg2;
  
}


void
_wrap_btMeshPartData_m_3indices16_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btShortIntIndexTripletData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btShortIntIndexTripletData *) ((arg1)->m_3indices16);
  *(btShortIntIndexTripletData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_3indices8_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *arg2 = (btCharIndexTripletData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btCharIndexTripletData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btCharIndexTripletData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_3indices8 = arg2;
  
}


void
_wrap_btMeshPartData_m_3indices8_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btCharIndexTripletData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btCharIndexTripletData *) ((arg1)->m_3indices8);
  *(btCharIndexTripletData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_indices16_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *arg2 = (btShortIntIndexData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    btShortIntIndexData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = *(btShortIntIndexData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_indices16 = arg2;
  
}


void
_wrap_btMeshPartData_m_indices16_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *result = 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    btShortIntIndexData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (btShortIntIndexData *) ((arg1)->m_indices16);
  *(btShortIntIndexData **)&swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_numTriangles_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numTriangles = arg2;
  
}


void
_wrap_btMeshPartData_m_numTriangles_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numTriangles);
  swig_a->result = result; 
}


void
_wrap_btMeshPartData_m_numVertices_set(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btMeshPartData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numVertices = arg2;
  
}


void
_wrap_btMeshPartData_m_numVertices_get(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  struct swigargs {
    btMeshPartData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numVertices);
  swig_a->result = result; 
}


void
_wrap_new_btMeshPartData(void *swig_v)
{
  btMeshPartData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMeshPartData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMeshPartData *)new btMeshPartData();
  *(btMeshPartData **)&swig_a->result = result; 
}


void
_wrap_delete_btMeshPartData(void *swig_v)
{
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  
  struct swigargs {
    btMeshPartData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMeshPartData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btStridingMeshInterfaceData_m_meshPartsPtr_set(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *arg2 = (btMeshPartData *) 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    btMeshPartData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  arg2 = *(btMeshPartData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_meshPartsPtr = arg2;
  
}


void
_wrap_btStridingMeshInterfaceData_m_meshPartsPtr_get(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    long : 0;
    btMeshPartData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  
  result = (btMeshPartData *) ((arg1)->m_meshPartsPtr);
  *(btMeshPartData **)&swig_a->result = result; 
}


void
_wrap_btStridingMeshInterfaceData_m_scaling_set(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_scaling = *arg2;
  
}


void
_wrap_btStridingMeshInterfaceData_m_scaling_get(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_scaling);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btStridingMeshInterfaceData_m_numMeshParts_set(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numMeshParts = arg2;
  
}


void
_wrap_btStridingMeshInterfaceData_m_numMeshParts_get(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int result;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numMeshParts);
  swig_a->result = result; 
}


void
_wrap_btStridingMeshInterfaceData_m_padding_set(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btStridingMeshInterfaceData_m_padding_get(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btStridingMeshInterfaceData(void *swig_v)
{
  btStridingMeshInterfaceData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btStridingMeshInterfaceData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btStridingMeshInterfaceData *)new btStridingMeshInterfaceData();
  *(btStridingMeshInterfaceData **)&swig_a->result = result; 
}


void
_wrap_delete_btStridingMeshInterfaceData(void *swig_v)
{
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  
  struct swigargs {
    btStridingMeshInterfaceData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterfaceData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btIndexedMesh_m_numTriangles_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numTriangles = arg2;
  
}


void
_wrap_btIndexedMesh_m_numTriangles_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numTriangles);
  swig_a->result = result; 
}


void
_wrap_btIndexedMesh_m_triangleIndexBase_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (unsigned char *)swig_a->arg2.p; 
  
  if (arg1) (arg1)->m_triangleIndexBase = (unsigned char const *)arg2;
  
}


void
_wrap_btIndexedMesh_m_triangleIndexBase_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (unsigned char *) ((arg1)->m_triangleIndexBase);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btIndexedMesh_m_triangleIndexStride_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_triangleIndexStride = arg2;
  
}


void
_wrap_btIndexedMesh_m_triangleIndexStride_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_triangleIndexStride);
  swig_a->result = result; 
}


void
_wrap_btIndexedMesh_m_numVertices_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numVertices = arg2;
  
}


void
_wrap_btIndexedMesh_m_numVertices_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numVertices);
  swig_a->result = result; 
}


void
_wrap_btIndexedMesh_m_vertexBase_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (unsigned char *)swig_a->arg2.p; 
  
  if (arg1) (arg1)->m_vertexBase = (unsigned char const *)arg2;
  
}


void
_wrap_btIndexedMesh_m_vertexBase_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (unsigned char *) ((arg1)->m_vertexBase);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btIndexedMesh_m_vertexStride_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_vertexStride = arg2;
  
}


void
_wrap_btIndexedMesh_m_vertexStride_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_vertexStride);
  swig_a->result = result; 
}


void
_wrap_btIndexedMesh_m_indexType_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (PHY_ScalarType)swig_a->arg2; 
  
  if (arg1) (arg1)->m_indexType = arg2;
  
}


void
_wrap_btIndexedMesh_m_indexType_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (PHY_ScalarType) ((arg1)->m_indexType);
  swig_a->result = (intgo)result; 
}


void
_wrap_btIndexedMesh_m_vertexType_set(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  arg2 = (PHY_ScalarType)swig_a->arg2; 
  
  if (arg1) (arg1)->m_vertexType = arg2;
  
}


void
_wrap_btIndexedMesh_m_vertexType_get(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  struct swigargs {
    btIndexedMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  result = (PHY_ScalarType) ((arg1)->m_vertexType);
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btIndexedMesh(void *swig_v)
{
  btIndexedMesh *result = 0 ;
  
  struct swigargs {
    long : 0;
    btIndexedMesh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btIndexedMesh *)new btIndexedMesh();
  *(btIndexedMesh **)&swig_a->result = result; 
}


void
_wrap_delete_btIndexedMesh(void *swig_v)
{
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  
  struct swigargs {
    btIndexedMesh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIndexedMesh **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btTriangleIndexVertexArray__SWIG_0(void *swig_v)
{
  btTriangleIndexVertexArray *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleIndexVertexArray *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray();
  *(btTriangleIndexVertexArray **)&swig_a->result = result; 
}


void
_wrap_delete_btTriangleIndexVertexArray(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btTriangleIndexVertexArray__SWIG_1(void *swig_v)
{
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar *arg5 = (btScalar *) 0 ;
  int arg6 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    int *arg2;
    intgo arg3;
    intgo arg4;
    btScalar *arg5;
    intgo arg6;
    long : 0;
    btTriangleIndexVertexArray *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  arg6 = (int)swig_a->arg6; 
  
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray(arg1,arg2,arg3,arg4,arg5,arg6);
  *(btTriangleIndexVertexArray **)&swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  PHY_ScalarType arg3 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btIndexedMesh *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btIndexedMesh **)&swig_a->arg2; 
  arg3 = (PHY_ScalarType)swig_a->arg3; 
  
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2,arg3);
  
}


void
_wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btIndexedMesh *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btIndexedMesh **)&swig_a->arg2; 
  
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_unLockVertexBase(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->unLockVertexBase(arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_unLockReadOnlyVertexBase(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  ((btTriangleIndexVertexArray const *)arg1)->unLockReadOnlyVertexBase(arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_getNumSubParts(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  result = (int)((btTriangleIndexVertexArray const *)arg1)->getNumSubParts();
  swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    btAlignedObjectArray< btIndexedMesh > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  result = (IndexedMeshArray *) &(arg1)->getIndexedMeshArray();
  *(IndexedMeshArray **)&swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_1(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    btAlignedObjectArray< btIndexedMesh > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  result = (IndexedMeshArray *) &((btTriangleIndexVertexArray const *)arg1)->getIndexedMeshArray();
  *(IndexedMeshArray **)&swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_preallocateVertices(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateVertices(arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_preallocateIndices(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateIndices(arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_hasPremadeAabb(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  result = (bool)((btTriangleIndexVertexArray const *)arg1)->hasPremadeAabb();
  swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_setPremadeAabb(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btTriangleIndexVertexArray const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btTriangleIndexVertexArray_getPremadeAabb(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btTriangleIndexVertexArray const *)arg1)->getPremadeAabb(arg2,arg3);
  
}


void
_wrap_btTriangleIndexVertexArray_InternalProcessAllTriangles(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btInternalTriangleIndexCallback *arg2 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btInternalTriangleIndexCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btInternalTriangleIndexCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  ((btStridingMeshInterface const *)swig_b0)->InternalProcessAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btTriangleIndexVertexArray_calculateAabbBruteForce(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  (swig_b0)->calculateAabbBruteForce(*arg2,*arg3);
  
}


void
_wrap_btTriangleIndexVertexArray_getScaling(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  result = (btVector3 *) &((btStridingMeshInterface const *)swig_b0)->getScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_setScaling(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  (swig_b0)->setScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btTriangleIndexVertexArray_calculateSerializeBufferSize(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  result = (int)((btStridingMeshInterface const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btTriangleIndexVertexArray_serialize(void *swig_v)
{
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleIndexVertexArray *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleIndexVertexArray **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btStridingMeshInterface *swig_b0 = (btStridingMeshInterface *)swig_a->arg1;
  result = (char *)((btStridingMeshInterface const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTriangleMesh_m_weldingThreshold_set(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_weldingThreshold = arg2;
  
}


void
_wrap_btTriangleMesh_m_weldingThreshold_get(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_weldingThreshold);
  swig_a->result = result; 
}


void
_wrap_new_btTriangleMesh__SWIG_0(void *swig_v)
{
  bool arg1 ;
  bool arg2 ;
  btTriangleMesh *result = 0 ;
  
  struct swigargs {
    bool arg1;
    bool arg2;
    long : 0;
    btTriangleMesh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (bool)swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  result = (btTriangleMesh *)new btTriangleMesh(arg1,arg2);
  *(btTriangleMesh **)&swig_a->result = result; 
}


void
_wrap_new_btTriangleMesh__SWIG_1(void *swig_v)
{
  bool arg1 ;
  btTriangleMesh *result = 0 ;
  
  struct swigargs {
    bool arg1;
    long : 0;
    btTriangleMesh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (bool)swig_a->arg1; 
  
  result = (btTriangleMesh *)new btTriangleMesh(arg1);
  *(btTriangleMesh **)&swig_a->result = result; 
}


void
_wrap_new_btTriangleMesh__SWIG_2(void *swig_v)
{
  btTriangleMesh *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleMesh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleMesh *)new btTriangleMesh();
  *(btTriangleMesh **)&swig_a->result = result; 
}


void
_wrap_btTriangleMesh_getUse32bitIndices(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  result = (bool)((btTriangleMesh const *)arg1)->getUse32bitIndices();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_getUse4componentVertices(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  result = (bool)((btTriangleMesh const *)arg1)->getUse4componentVertices();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_addTriangle__SWIG_0(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    bool arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btTriangleMesh_addTriangle__SWIG_1(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btTriangleMesh_getNumTriangles(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  result = (int)((btTriangleMesh const *)arg1)->getNumTriangles();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_preallocateVertices(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateVertices(arg2);
  
}


void
_wrap_btTriangleMesh_preallocateIndices(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->preallocateIndices(arg2);
  
}


void
_wrap_btTriangleMesh_findOrAddVertex(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    bool arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (int)(arg1)->findOrAddVertex((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_addIndex(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->addIndex(arg2);
  
}


void
_wrap_delete_btTriangleMesh(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleMesh_addIndexedMesh__SWIG_0(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  PHY_ScalarType arg3 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btIndexedMesh *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btIndexedMesh **)&swig_a->arg2; 
  arg3 = (PHY_ScalarType)swig_a->arg3; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  (swig_b0)->addIndexedMesh((btIndexedMesh const &)*arg2,arg3);
  
}


void
_wrap_btTriangleMesh_addIndexedMesh__SWIG_1(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btIndexedMesh *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btIndexedMesh **)&swig_a->arg2; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  (swig_b0)->addIndexedMesh((btIndexedMesh const &)*arg2);
  
}


void
_wrap_btTriangleMesh_unLockVertexBase(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  (swig_b0)->unLockVertexBase(arg2);
  
}


void
_wrap_btTriangleMesh_unLockReadOnlyVertexBase(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  ((btTriangleIndexVertexArray const *)swig_b0)->unLockReadOnlyVertexBase(arg2);
  
}


void
_wrap_btTriangleMesh_getNumSubParts(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  result = (int)((btTriangleIndexVertexArray const *)swig_b0)->getNumSubParts();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_getIndexedMeshArray__SWIG_0(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    btAlignedObjectArray< btIndexedMesh > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  result = (IndexedMeshArray *) &(swig_b0)->getIndexedMeshArray();
  *(IndexedMeshArray **)&swig_a->result = result; 
}


void
_wrap_btTriangleMesh_getIndexedMeshArray__SWIG_1(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    btAlignedObjectArray< btIndexedMesh > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  result = (IndexedMeshArray *) &((btTriangleIndexVertexArray const *)swig_b0)->getIndexedMeshArray();
  *(IndexedMeshArray **)&swig_a->result = result; 
}


void
_wrap_btTriangleMesh_hasPremadeAabb(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  result = (bool)((btTriangleIndexVertexArray const *)swig_b0)->hasPremadeAabb();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_setPremadeAabb(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  ((btTriangleIndexVertexArray const *)swig_b0)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btTriangleMesh_getPremadeAabb(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  ((btTriangleIndexVertexArray const *)swig_b0)->getPremadeAabb(arg2,arg3);
  
}


void
_wrap_btTriangleMesh_InternalProcessAllTriangles(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btInternalTriangleIndexCallback *arg2 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btInternalTriangleIndexCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btInternalTriangleIndexCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  ((btStridingMeshInterface const *)swig_b1)->InternalProcessAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btTriangleMesh_calculateAabbBruteForce(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  (swig_b1)->calculateAabbBruteForce(*arg2,*arg3);
  
}


void
_wrap_btTriangleMesh_getScaling(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  result = (btVector3 *) &((btStridingMeshInterface const *)swig_b1)->getScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTriangleMesh_setScaling(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  (swig_b1)->setScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btTriangleMesh_calculateSerializeBufferSize(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleMesh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  result = (int)((btStridingMeshInterface const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btTriangleMesh_serialize(void *swig_v)
{
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleMesh *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMesh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btTriangleIndexVertexArray *swig_b0 = (btTriangleIndexVertexArray *)swig_a->arg1;
  btStridingMeshInterface *swig_b1 = (btStridingMeshInterface *)swig_b0;
  result = (char *)((btStridingMeshInterface const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btConvexTriangleMeshShape__SWIG_0(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    bool arg2;
    long : 0;
    btConvexTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1,arg2);
  *(btConvexTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_new_btConvexTriangleMeshShape__SWIG_1(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    long : 0;
    btConvexTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1);
  *(btConvexTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getMeshInterface__SWIG_0(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getMeshInterface__SWIG_1(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btStridingMeshInterface *)((btConvexTriangleMeshShape const *)arg1)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_localGetSupportingVertex(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConvexTriangleMeshShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_getName(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (char *)((btConvexTriangleMeshShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexTriangleMeshShape_getNumVertices(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getNumEdges(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getEdge(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btConvexTriangleMeshShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_getVertex(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btConvexTriangleMeshShape const *)arg1)->getVertex(arg2,*arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_getNumPlanes(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getPlane(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btConvexTriangleMeshShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_isInside(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (bool)((btConvexTriangleMeshShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_setLocalScaling(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_getLocalScaling(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btConvexTriangleMeshShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_calculatePrincipalAxisTransform(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  
  ((btConvexTriangleMeshShape const *)arg1)->calculatePrincipalAxisTransform(*arg2,*arg3,*arg4);
  
}


void
_wrap_delete_btConvexTriangleMeshShape(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConvexTriangleMeshShape_getNonvirtualAabb(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  ((btPolyhedralConvexAabbCachingShape const *)swig_b0)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
  
}


void
_wrap_btConvexTriangleMeshShape_getAabb(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  ((btPolyhedralConvexAabbCachingShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_recalcLocalAabb(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  (swig_b0)->recalcLocalAabb();
  
}


void
_wrap_btConvexTriangleMeshShape_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getConvexPolyhedron(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)swig_b1)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_calculateLocalInertia(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  ((btPolyhedralConvexShape const *)swig_b1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_getImplicitShapeDimensions(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_setImplicitShapeDimensions(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_getAabbSlow(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_getLocalScalingNV(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_setMargin(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setMargin(arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_getMargin(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getMarginNV(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (int)((btConvexInternalShape const *)swig_b2)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getPreferredPenetrationDirection(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_calculateSerializeBufferSize(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (int)((btConvexInternalShape const *)swig_b2)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_serialize(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (char *)((btConvexInternalShape const *)swig_b2)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btConvexTriangleMeshShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexTriangleMeshShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexTriangleMeshShape_getMarginNonVirtual(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = (btScalar)((btConvexShape const *)swig_b3)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getAabbNonVirtual(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  ((btConvexShape const *)swig_b3)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btConvexTriangleMeshShape_project(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  ((btConvexShape const *)swig_b3)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btConvexTriangleMeshShape_getBoundingSphere(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btConvexTriangleMeshShape_getAngularMotionDisc(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getContactBreakingThreshold(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_calculateTemporalAabb(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btConvexTriangleMeshShape_isPolyhedral(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isConvex2d(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isConvex(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isNonMoving(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isConcave(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isCompound(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isSoftBody(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_isInfinite(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getShapeType(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (int)((btCollisionShape const *)swig_b4)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = ((btCollisionShape const *)swig_b4)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConvexTriangleMeshShape_setUserPointer(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  (swig_b4)->setUserPointer(arg2);
  
}


void
_wrap_btConvexTriangleMeshShape_getUserPointer(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (void *)((btCollisionShape const *)swig_b4)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConvexTriangleMeshShape_serializeSingleShape(void *swig_v)
{
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btConvexTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->serializeSingleShape(arg2);
  
}


void
_wrap_delete_btTriangleMeshShape(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleMeshShape_localGetSupportingVertex(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTriangleMeshShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTriangleMeshShape_recalcLocalAabb(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  (arg1)->recalcLocalAabb();
  
}


void
_wrap_btTriangleMeshShape_getAabb(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btTriangleMeshShape_processAllTriangles(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btTriangleMeshShape_calculateLocalInertia(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btTriangleMeshShape_setLocalScaling(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btTriangleMeshShape_getLocalScaling(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getMeshInterface__SWIG_0(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getMeshInterface__SWIG_1(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btStridingMeshInterface *)((btTriangleMeshShape const *)arg1)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getLocalAabbMin(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getLocalAabbMax(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMax();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getName(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  result = (char *)((btTriangleMeshShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTriangleMeshShape_getMargin(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  result = (btScalar)((btConcaveShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_setMargin(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btTriangleMeshShape_getBoundingSphere(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btTriangleMeshShape_getAngularMotionDisc(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getContactBreakingThreshold(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_calculateTemporalAabb(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btTriangleMeshShape_isPolyhedral(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isConvex2d(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isConvex(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isNonMoving(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isConcave(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isCompound(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isSoftBody(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_isInfinite(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getShapeType(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btTriangleMeshShape_setUserPointer(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btTriangleMeshShape_getUserPointer(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_calculateSerializeBufferSize(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShape_serialize(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (char *)((btCollisionShape const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTriangleMeshShape_serializeSingleShape(void *swig_v)
{
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_btQuantizedBvhNode_m_quantizedAabbMin_set(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btQuantizedBvhNode_m_quantizedAabbMin_get(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_m_quantizedAabbMax_set(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btQuantizedBvhNode_m_quantizedAabbMax_get(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
  
}


void
_wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_isLeafNode(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  bool result;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (bool)((btQuantizedBvhNode const *)arg1)->isLeafNode();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_getEscapeIndex(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getEscapeIndex();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_getTriangleIndex(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getTriangleIndex();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNode_getPartId(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getPartId();
  swig_a->result = result; 
}


void
_wrap_delete_btQuantizedBvhNode(void *swig_v)
{
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  
  struct swigargs {
    btQuantizedBvhNode *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNode **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOptimizedBvhNode_m_aabbMinOrg_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNode_m_aabbMinOrg_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_aabbMinOrg);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNode_m_aabbMaxOrg_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNode_m_aabbMaxOrg_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_aabbMaxOrg);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNode_m_escapeIndex_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNode_m_escapeIndex_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_escapeIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNode_m_subPart_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_subPart = arg2;
  
}


void
_wrap_btOptimizedBvhNode_m_subPart_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_subPart);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNode_m_triangleIndex_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNode_m_triangleIndex_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_triangleIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNode_m_padding_set(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 20-1);
      arg1->m_padding[20-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btOptimizedBvhNode_m_padding_get(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btOptimizedBvhNode(void *swig_v)
{
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNode *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNode **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBvhSubtreeInfo_m_quantizedAabbMin_set(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btBvhSubtreeInfo_m_quantizedAabbMin_get(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfo_m_quantizedAabbMax_set(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btBvhSubtreeInfo_m_quantizedAabbMax_get(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfo_m_rootNodeIndex_set(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
  
}


void
_wrap_btBvhSubtreeInfo_m_rootNodeIndex_get(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_rootNodeIndex);
  swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfo_m_subtreeSize_set(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_subtreeSize = arg2;
  
}


void
_wrap_btBvhSubtreeInfo_m_subtreeSize_get(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_subtreeSize);
  swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfo_m_padding_set(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  {
    size_t ii;
    int *b = (int *) arg1->m_padding;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


void
_wrap_btBvhSubtreeInfo_m_padding_get(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  result = (int *)(int *) ((arg1)->m_padding);
  *(int **)&swig_a->result = result; 
}


void
_wrap_new_btBvhSubtreeInfo(void *swig_v)
{
  btBvhSubtreeInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBvhSubtreeInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBvhSubtreeInfo *)new btBvhSubtreeInfo();
  *(btBvhSubtreeInfo **)&swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfo_setAabbFromQuantizeNode(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  btQuantizedBvhNode *arg2 = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
    btQuantizedBvhNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhNode **)&swig_a->arg2; 
  
  (arg1)->setAabbFromQuantizeNode((btQuantizedBvhNode const &)*arg2);
  
}


void
_wrap_delete_btBvhSubtreeInfo(void *swig_v)
{
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  
  struct swigargs {
    btBvhSubtreeInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btNodeOverlapCallback(void *swig_v)
{
  btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) 0 ;
  
  struct swigargs {
    btNodeOverlapCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNodeOverlapCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btNodeOverlapCallback_processNode(void *swig_v)
{
  btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btNodeOverlapCallback *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btNodeOverlapCallback **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->processNode(arg2,arg3);
  
}


void
_wrap_TRAVERSAL_STACKLESS_btQuantizedBvh(void *swig_v)
{
  btQuantizedBvh::btTraversalMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btQuantizedBvh::TRAVERSAL_STACKLESS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TRAVERSAL_STACKLESS_CACHE_FRIENDLY_btQuantizedBvh(void *swig_v)
{
  btQuantizedBvh::btTraversalMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btQuantizedBvh::TRAVERSAL_STACKLESS_CACHE_FRIENDLY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_TRAVERSAL_RECURSIVE_btQuantizedBvh(void *swig_v)
{
  btQuantizedBvh::btTraversalMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btQuantizedBvh::TRAVERSAL_RECURSIVE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btQuantizedBvh(void *swig_v)
{
  btQuantizedBvh *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuantizedBvh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuantizedBvh *)new btQuantizedBvh();
  *(btQuantizedBvh **)&swig_a->result = result; 
}


void
_wrap_delete_btQuantizedBvh(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuantizedBvh_setQuantizationValues__SWIG_0(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btQuantizedBvh_setQuantizationValues__SWIG_1(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btQuantizedBvh_getLeafNodeArray(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btQuantizedBvhNode > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (QuantizedNodeArray *) &(arg1)->getLeafNodeArray();
  *(QuantizedNodeArray **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_buildInternal(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  (arg1)->buildInternal();
  
}


void
_wrap_btQuantizedBvh_reportAabbOverlappingNodex(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btQuantizedBvh const *)arg1)->reportAabbOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btQuantizedBvh_reportRayOverlappingNodex(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btQuantizedBvh const *)arg1)->reportRayOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btQuantizedBvh_reportBoxCastOverlappingNodex(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  ((btQuantizedBvh const *)arg1)->reportBoxCastOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btQuantizedBvh_quantize(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    unsigned short *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btQuantizedBvh const *)arg1)->quantize(arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btQuantizedBvh_quantizeWithClamp(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    unsigned short *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btQuantizedBvh const *)arg1)->quantizeWithClamp(arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btQuantizedBvh_unQuantize(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    unsigned short *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  result = ((btQuantizedBvh const *)arg1)->unQuantize((unsigned short const *)arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btQuantizedBvh_setTraversalMode(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvh::btTraversalMode arg2 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = (btQuantizedBvh::btTraversalMode)swig_a->arg2; 
  
  (arg1)->setTraversalMode(arg2);
  
}


void
_wrap_btQuantizedBvh_getQuantizedNodeArray(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btQuantizedBvhNode > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (QuantizedNodeArray *) &(arg1)->getQuantizedNodeArray();
  *(QuantizedNodeArray **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_getSubtreeInfoArray(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  BvhSubtreeInfoArray *result = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btBvhSubtreeInfo > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (BvhSubtreeInfoArray *) &(arg1)->getSubtreeInfoArray();
  *(BvhSubtreeInfoArray **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_calculateSerializeBufferSize(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (unsigned int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_serialize__SWIG_0(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    void *arg2;
    intgo arg3;
    bool arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  result = (bool)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_deSerializeInPlace(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  btQuantizedBvh *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    bool arg3;
    long : 0;
    btQuantizedBvh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btQuantizedBvh *)btQuantizedBvh::deSerializeInPlace(arg1,arg2,arg3);
  *(btQuantizedBvh **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_getAlignmentSerializationPadding(void *swig_v)
{
  unsigned int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (unsigned int)btQuantizedBvh::getAlignmentSerializationPadding();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_calculateSerializeBufferSizeNew(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSizeNew();
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvh_serialize__SWIG_1(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btQuantizedBvh_deSerializeFloat(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhFloatData *arg2 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btQuantizedBvhFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhFloatData **)&swig_a->arg2; 
  
  (arg1)->deSerializeFloat(*arg2);
  
}


void
_wrap_btQuantizedBvh_deSerializeDouble(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhDoubleData *arg2 = 0 ;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    btQuantizedBvhDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhDoubleData **)&swig_a->arg2; 
  
  (arg1)->deSerializeDouble(*arg2);
  
}


void
_wrap_btQuantizedBvh_isQuantized(void *swig_v)
{
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  bool result;
  
  struct swigargs {
    btQuantizedBvh *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvh **)&swig_a->arg1; 
  
  result = (bool)(arg1)->isQuantized();
  swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfoData_m_rootNodeIndex_set(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
  
}


void
_wrap_btBvhSubtreeInfoData_m_rootNodeIndex_get(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_rootNodeIndex);
  swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfoData_m_subtreeSize_set(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_subtreeSize = arg2;
  
}


void
_wrap_btBvhSubtreeInfoData_m_subtreeSize_get(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_subtreeSize);
  swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_set(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_get(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_set(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_get(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_new_btBvhSubtreeInfoData(void *swig_v)
{
  btBvhSubtreeInfoData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBvhSubtreeInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBvhSubtreeInfoData *)new btBvhSubtreeInfoData();
  *(btBvhSubtreeInfoData **)&swig_a->result = result; 
}


void
_wrap_delete_btBvhSubtreeInfoData(void *swig_v)
{
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  
  struct swigargs {
    btBvhSubtreeInfoData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhSubtreeInfoData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_aabbMinOrg);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_aabbMaxOrg);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_escapeIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeFloatData_m_subPart_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_subPart = arg2;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_subPart_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_subPart);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_triangleIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeFloatData_m_pad_set(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btOptimizedBvhNodeFloatData_m_pad_get(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btOptimizedBvhNodeFloatData(void *swig_v)
{
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btOptimizedBvhNodeFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btOptimizedBvhNodeFloatData *)new btOptimizedBvhNodeFloatData();
  *(btOptimizedBvhNodeFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btOptimizedBvhNodeFloatData(void *swig_v)
{
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMinOrg);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMaxOrg);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_escapeIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_subPart_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_subPart = arg2;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_subPart_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_subPart);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_triangleIndex);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_pad_set(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btOptimizedBvhNodeDoubleData_m_pad_get(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btOptimizedBvhNodeDoubleData(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btOptimizedBvhNodeDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btOptimizedBvhNodeDoubleData *)new btOptimizedBvhNodeDoubleData();
  *(btOptimizedBvhNodeDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btOptimizedBvhNodeDoubleData(void *swig_v)
{
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  
  struct swigargs {
    btOptimizedBvhNodeDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_set(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_get(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_set(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    unsigned short *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
}


void
_wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_get(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    long : 0;
    unsigned short *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  *(unsigned short **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
  
}


void
_wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  swig_a->result = result; 
}


void
_wrap_new_btQuantizedBvhNodeData(void *swig_v)
{
  btQuantizedBvhNodeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuantizedBvhNodeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuantizedBvhNodeData *)new btQuantizedBvhNodeData();
  *(btQuantizedBvhNodeData **)&swig_a->result = result; 
}


void
_wrap_delete_btQuantizedBvhNodeData(void *swig_v)
{
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhNodeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhNodeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuantizedBvhFloatData_m_bvhAabbMin_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_bvhAabbMin_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMin);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_bvhAabbMax_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_bvhAabbMax_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMax);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_bvhQuantization_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_bvhQuantization_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhQuantization);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_curNodeIndex_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_curNodeIndex = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_curNodeIndex_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_curNodeIndex);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_useQuantization_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useQuantization = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_useQuantization_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useQuantization);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *arg2 = (btOptimizedBvhNodeFloatData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btOptimizedBvhNodeFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btOptimizedBvhNodeFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btOptimizedBvhNodeFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btOptimizedBvhNodeFloatData *) ((arg1)->m_contiguousNodesPtr);
  *(btOptimizedBvhNodeFloatData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btQuantizedBvhNodeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhNodeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btQuantizedBvhNodeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  *(btQuantizedBvhNodeData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    btBvhSubtreeInfoData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = *(btBvhSubtreeInfoData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    btBvhSubtreeInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  *(btBvhSubtreeInfoData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_traversalMode_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_traversalMode = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_traversalMode_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_traversalMode);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_set(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
  
}


void
_wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_get(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numSubtreeHeaders);
  swig_a->result = result; 
}


void
_wrap_new_btQuantizedBvhFloatData(void *swig_v)
{
  btQuantizedBvhFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuantizedBvhFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuantizedBvhFloatData *)new btQuantizedBvhFloatData();
  *(btQuantizedBvhFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btQuantizedBvhFloatData(void *swig_v)
{
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMin);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMax);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhQuantization_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_bvhQuantization_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhQuantization);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_curNodeIndex_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_curNodeIndex = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_curNodeIndex_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_curNodeIndex);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_useQuantization_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useQuantization = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_useQuantization_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useQuantization);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *arg2 = (btOptimizedBvhNodeDoubleData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btOptimizedBvhNodeDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btOptimizedBvhNodeDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btOptimizedBvhNodeDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btOptimizedBvhNodeDoubleData *) ((arg1)->m_contiguousNodesPtr);
  *(btOptimizedBvhNodeDoubleData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btQuantizedBvhNodeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhNodeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btQuantizedBvhNodeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  *(btQuantizedBvhNodeData **)&swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_traversalMode_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_traversalMode = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_traversalMode_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_traversalMode);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numSubtreeHeaders);
  swig_a->result = result; 
}


void
_wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_set(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    btBvhSubtreeInfoData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  arg2 = *(btBvhSubtreeInfoData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
  
}


void
_wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_get(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
    long : 0;
    btBvhSubtreeInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  *(btBvhSubtreeInfoData **)&swig_a->result = result; 
}


void
_wrap_new_btQuantizedBvhDoubleData(void *swig_v)
{
  btQuantizedBvhDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btQuantizedBvhDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btQuantizedBvhDoubleData *)new btQuantizedBvhDoubleData();
  *(btQuantizedBvhDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btQuantizedBvhDoubleData(void *swig_v)
{
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  
  struct swigargs {
    btQuantizedBvhDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btQuantizedBvhDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btOptimizedBvh(void *swig_v)
{
  btOptimizedBvh *result = 0 ;
  
  struct swigargs {
    long : 0;
    btOptimizedBvh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btOptimizedBvh *)new btOptimizedBvh();
  *(btOptimizedBvh **)&swig_a->result = result; 
}


void
_wrap_delete_btOptimizedBvh(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btOptimizedBvh_build(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  bool arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btStridingMeshInterface *arg2;
    bool arg3;
    btVector3 *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btStridingMeshInterface **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->build(arg2,arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btOptimizedBvh_refit(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btStridingMeshInterface *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btStridingMeshInterface **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->refit(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btOptimizedBvh_refitPartial(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btStridingMeshInterface *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btStridingMeshInterface **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->refitPartial(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btOptimizedBvh_updateBvhNodes(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btStridingMeshInterface *arg2;
    intgo arg3;
    intgo arg4;
    intgo arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btStridingMeshInterface **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  
  (arg1)->updateBvhNodes(arg2,arg3,arg4,arg5);
  
}


void
_wrap_btOptimizedBvh_serializeInPlace(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    void *arg2;
    intgo arg3;
    bool arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  result = (bool)((btOptimizedBvh const *)arg1)->serializeInPlace(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_deSerializeInPlace(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  btOptimizedBvh *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    bool arg3;
    long : 0;
    btOptimizedBvh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btOptimizedBvh *)btOptimizedBvh::deSerializeInPlace(arg1,arg2,arg3);
  *(btOptimizedBvh **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_setQuantizationValues__SWIG_0(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btOptimizedBvh_setQuantizationValues__SWIG_1(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btOptimizedBvh_getLeafNodeArray(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btQuantizedBvhNode > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (QuantizedNodeArray *) &(swig_b0)->getLeafNodeArray();
  *(QuantizedNodeArray **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_buildInternal(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->buildInternal();
  
}


void
_wrap_btOptimizedBvh_reportAabbOverlappingNodex(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  ((btQuantizedBvh const *)swig_b0)->reportAabbOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btOptimizedBvh_reportRayOverlappingNodex(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  ((btQuantizedBvh const *)swig_b0)->reportRayOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btOptimizedBvh_reportBoxCastOverlappingNodex(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btNodeOverlapCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btNodeOverlapCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  ((btQuantizedBvh const *)swig_b0)->reportBoxCastOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btOptimizedBvh_quantize(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    unsigned short *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  ((btQuantizedBvh const *)swig_b0)->quantize(arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btOptimizedBvh_quantizeWithClamp(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    unsigned short *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  ((btQuantizedBvh const *)swig_b0)->quantizeWithClamp(arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btOptimizedBvh_unQuantize(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    unsigned short *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(unsigned short **)&swig_a->arg2; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = ((btQuantizedBvh const *)swig_b0)->unQuantize((unsigned short const *)arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btOptimizedBvh_setTraversalMode(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btQuantizedBvh::btTraversalMode arg2 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = (btQuantizedBvh::btTraversalMode)swig_a->arg2; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->setTraversalMode(arg2);
  
}


void
_wrap_btOptimizedBvh_getQuantizedNodeArray(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btQuantizedBvhNode > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (QuantizedNodeArray *) &(swig_b0)->getQuantizedNodeArray();
  *(QuantizedNodeArray **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_getSubtreeInfoArray(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  BvhSubtreeInfoArray *result = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    btAlignedObjectArray< btBvhSubtreeInfo > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (BvhSubtreeInfoArray *) &(swig_b0)->getSubtreeInfoArray();
  *(BvhSubtreeInfoArray **)&swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_calculateSerializeBufferSize(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (unsigned int)((btQuantizedBvh const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_serialize__SWIG_0(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    void *arg2;
    intgo arg3;
    bool arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (bool)((btQuantizedBvh const *)swig_b0)->serialize(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_serialize__SWIG_1(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (char *)((btQuantizedBvh const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btOptimizedBvh_getAlignmentSerializationPadding(void *swig_v)
{
  unsigned int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (unsigned int)btQuantizedBvh::getAlignmentSerializationPadding();
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_calculateSerializeBufferSizeNew(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  int result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (int)((btQuantizedBvh const *)swig_b0)->calculateSerializeBufferSizeNew();
  swig_a->result = result; 
}


void
_wrap_btOptimizedBvh_deSerializeFloat(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btQuantizedBvhFloatData *arg2 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btQuantizedBvhFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhFloatData **)&swig_a->arg2; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->deSerializeFloat(*arg2);
  
}


void
_wrap_btOptimizedBvh_deSerializeDouble(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btQuantizedBvhDoubleData *arg2 = 0 ;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    btQuantizedBvhDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhDoubleData **)&swig_a->arg2; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  (swig_b0)->deSerializeDouble(*arg2);
  
}


void
_wrap_btOptimizedBvh_isQuantized(void *swig_v)
{
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  bool result;
  
  struct swigargs {
    btOptimizedBvh *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOptimizedBvh **)&swig_a->arg1; 
  
  btQuantizedBvh *swig_b0 = (btQuantizedBvh *)swig_a->arg1;
  result = (bool)(swig_b0)->isQuantized();
  swig_a->result = result; 
}


void
_wrap_btHashString_m_string_set(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btHashString *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if (arg2) {
      arg1->m_string = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_string, (const char *)arg2);
    } else {
      arg1->m_string = 0;
    }
  }
  
}


void
_wrap_btHashString_m_string_get(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btHashString *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_string);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btHashString_m_hash_set(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int arg2 ;
  
  struct swigargs {
    btHashString *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hash = arg2;
  
}


void
_wrap_btHashString_m_hash_get(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btHashString *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  
  result = (unsigned int) ((arg1)->m_hash);
  swig_a->result = result; 
}


void
_wrap_btHashString_getHash(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btHashString *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  
  result = (unsigned int)((btHashString const *)arg1)->getHash();
  swig_a->result = result; 
}


void
_wrap_new_btHashString(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  btHashString *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    btHashString *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  result = (btHashString *)new btHashString((char const *)arg1);
  *(btHashString **)&swig_a->result = result; 
}


void
_wrap_btHashString_portableStringCompare(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  struct swigargs {
    btHashString *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = (char *)swig_a->arg3.p; 
  
  result = (int)((btHashString const *)arg1)->portableStringCompare((char const *)arg2,(char const *)arg3);
  swig_a->result = result; 
}


void
_wrap_btHashString_equals(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  btHashString *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btHashString *arg1;
    btHashString *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  arg2 = *(btHashString **)&swig_a->arg2; 
  
  result = (bool)((btHashString const *)arg1)->equals((btHashString const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_delete_btHashString(void *swig_v)
{
  btHashString *arg1 = (btHashString *) 0 ;
  
  struct swigargs {
    btHashString *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashString **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_HASH_NULL_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)(int)BT_HASH_NULL;
  swig_a->result = result; 
}


void
_wrap_new_btHashInt(void *swig_v)
{
  int arg1 ;
  btHashInt *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    btHashInt *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (btHashInt *)new btHashInt(arg1);
  *(btHashInt **)&swig_a->result = result; 
}


void
_wrap_btHashInt_getUid1(void *swig_v)
{
  btHashInt *arg1 = (btHashInt *) 0 ;
  int result;
  
  struct swigargs {
    btHashInt *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashInt **)&swig_a->arg1; 
  
  result = (int)((btHashInt const *)arg1)->getUid1();
  swig_a->result = result; 
}


void
_wrap_btHashInt_setUid1(void *swig_v)
{
  btHashInt *arg1 = (btHashInt *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHashInt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashInt **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setUid1(arg2);
  
}


void
_wrap_btHashInt_equals(void *swig_v)
{
  btHashInt *arg1 = (btHashInt *) 0 ;
  btHashInt *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btHashInt *arg1;
    btHashInt *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashInt **)&swig_a->arg1; 
  arg2 = *(btHashInt **)&swig_a->arg2; 
  
  result = (bool)((btHashInt const *)arg1)->equals((btHashInt const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btHashInt_getHash(void *swig_v)
{
  btHashInt *arg1 = (btHashInt *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btHashInt *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashInt **)&swig_a->arg1; 
  
  result = (unsigned int)((btHashInt const *)arg1)->getHash();
  swig_a->result = result; 
}


void
_wrap_delete_btHashInt(void *swig_v)
{
  btHashInt *arg1 = (btHashInt *) 0 ;
  
  struct swigargs {
    btHashInt *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashInt **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btHashPtr(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  btHashPtr *result = 0 ;
  
  struct swigargs {
    void *arg1;
    long : 0;
    btHashPtr *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  
  result = (btHashPtr *)new btHashPtr((void const *)arg1);
  *(btHashPtr **)&swig_a->result = result; 
}


void
_wrap_btHashPtr_getPointer(void *swig_v)
{
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btHashPtr *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashPtr **)&swig_a->arg1; 
  
  result = (void *)((btHashPtr const *)arg1)->getPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btHashPtr_equals(void *swig_v)
{
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  btHashPtr *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btHashPtr *arg1;
    btHashPtr *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashPtr **)&swig_a->arg1; 
  arg2 = *(btHashPtr **)&swig_a->arg2; 
  
  result = (bool)((btHashPtr const *)arg1)->equals((btHashPtr const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btHashPtr_getHash(void *swig_v)
{
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btHashPtr *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashPtr **)&swig_a->arg1; 
  
  result = (unsigned int)((btHashPtr const *)arg1)->getHash();
  swig_a->result = result; 
}


void
_wrap_delete_btHashPtr(void *swig_v)
{
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  
  struct swigargs {
    btHashPtr *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHashPtr **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_sBulletDNAstr_set(void *swig_v)
{
  char *arg1 ;
  
  struct swigargs {
    _gostring_ arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  {
    if (arg1) strcpy((char *)sBulletDNAstr, (const char *)arg1);
    else sBulletDNAstr[0] = 0;
  }
  
}


void
_wrap_sBulletDNAstr_get(void *swig_v)
{
  char *result = 0 ;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (char *)(char *)sBulletDNAstr;
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_sBulletDNAlen_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  sBulletDNAlen = arg1;
  
}


void
_wrap_sBulletDNAlen_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)sBulletDNAlen;
  swig_a->result = result; 
}


void
_wrap_sBulletDNAstr64_set(void *swig_v)
{
  char *arg1 ;
  
  struct swigargs {
    _gostring_ arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  {
    if (arg1) strcpy((char *)sBulletDNAstr64, (const char *)arg1);
    else sBulletDNAstr64[0] = 0;
  }
  
}


void
_wrap_sBulletDNAstr64_get(void *swig_v)
{
  char *result = 0 ;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (char *)(char *)sBulletDNAstr64;
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_sBulletDNAlen64_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  sBulletDNAlen64 = arg1;
  
}


void
_wrap_sBulletDNAlen64_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)sBulletDNAlen64;
  swig_a->result = result; 
}


void
_wrap_btStrLen(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  int result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  
  result = (int)btStrLen((char const *)arg1);
  swig_a->result = result; 
}


void
_wrap_btChunk_m_chunkCode_set(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btChunk *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_chunkCode = arg2;
  
}


void
_wrap_btChunk_m_chunkCode_get(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  struct swigargs {
    btChunk *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_chunkCode);
  swig_a->result = result; 
}


void
_wrap_btChunk_m_length_set(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btChunk *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_length = arg2;
  
}


void
_wrap_btChunk_m_length_get(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  struct swigargs {
    btChunk *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_length);
  swig_a->result = result; 
}


void
_wrap_btChunk_m_oldPtr_set(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btChunk *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_oldPtr = arg2;
  
}


void
_wrap_btChunk_m_oldPtr_get(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btChunk *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_oldPtr);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btChunk_m_dna_nr_set(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btChunk *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dna_nr = arg2;
  
}


void
_wrap_btChunk_m_dna_nr_get(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  struct swigargs {
    btChunk *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_dna_nr);
  swig_a->result = result; 
}


void
_wrap_btChunk_m_number_set(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btChunk *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_number = arg2;
  
}


void
_wrap_btChunk_m_number_get(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  struct swigargs {
    btChunk *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_number);
  swig_a->result = result; 
}


void
_wrap_new_btChunk(void *swig_v)
{
  btChunk *result = 0 ;
  
  struct swigargs {
    long : 0;
    btChunk *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btChunk *)new btChunk();
  *(btChunk **)&swig_a->result = result; 
}


void
_wrap_delete_btChunk(void *swig_v)
{
  btChunk *arg1 = (btChunk *) 0 ;
  
  struct swigargs {
    btChunk *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btChunk **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_SERIALIZE_NO_BVH(void *swig_v)
{
  btSerializationFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SERIALIZE_NO_BVH;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SERIALIZE_NO_TRIANGLEINFOMAP(void *swig_v)
{
  btSerializationFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SERIALIZE_NO_TRIANGLEINFOMAP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SERIALIZE_NO_DUPLICATE_ASSERT(void *swig_v)
{
  btSerializationFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SERIALIZE_NO_DUPLICATE_ASSERT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btSerializer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSerializer_getBufferPointer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  result = (unsigned char *)((btSerializer const *)arg1)->getBufferPointer();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btSerializer_getCurrentBufferSize(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  struct swigargs {
    btSerializer *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  result = (int)((btSerializer const *)arg1)->getCurrentBufferSize();
  swig_a->result = result; 
}


void
_wrap_btSerializer_allocate(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    long long arg2;
    intgo arg3;
    long : 0;
    btChunk *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  *(btChunk **)&swig_a->result = result; 
}


void
_wrap_btSerializer_finalizeChunk(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    btChunk *arg2;
    _gostring_ arg3;
    intgo arg4;
    void *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = *(btChunk **)&swig_a->arg2; 
  arg3 = (char *)swig_a->arg3.p; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
  
}


void
_wrap_btSerializer_findPointer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    void *arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  result = (void *)(arg1)->findPointer(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSerializer_getUniquePointer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    void *arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  result = (void *)(arg1)->getUniquePointer(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSerializer_startSerialization(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  (arg1)->startSerialization();
  
}


void
_wrap_btSerializer_finishSerialization(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  (arg1)->finishSerialization();
  
}


void
_wrap_btSerializer_findNameForPointer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    void *arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  result = (char *)((btSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btSerializer_registerNameForPointer(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    void *arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (char *)swig_a->arg3.p; 
  
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
  
}


void
_wrap_btSerializer_serializeName(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btSerializer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  (arg1)->serializeName((char const *)arg2);
  
}


void
_wrap_btSerializer_getSerializationFlags(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  struct swigargs {
    btSerializer *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  
  result = (int)((btSerializer const *)arg1)->getSerializationFlags();
  swig_a->result = result; 
}


void
_wrap_btSerializer_setSerializationFlags(void *swig_v)
{
  btSerializer *arg1 = (btSerializer *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSerializer *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSerializer **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setSerializationFlags(arg2);
  
}


void
_wrap_new_btPointerUid(void *swig_v)
{
  btPointerUid *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPointerUid *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPointerUid *)new btPointerUid();
  *(btPointerUid **)&swig_a->result = result; 
}


void
_wrap_delete_btPointerUid(void *swig_v)
{
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  
  struct swigargs {
    btPointerUid *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPointerUid **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btDefaultSerializer__SWIG_0(void *swig_v)
{
  int arg1 ;
  btDefaultSerializer *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    btDefaultSerializer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (btDefaultSerializer *)new btDefaultSerializer(arg1);
  *(btDefaultSerializer **)&swig_a->result = result; 
}


void
_wrap_new_btDefaultSerializer__SWIG_1(void *swig_v)
{
  btDefaultSerializer *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDefaultSerializer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDefaultSerializer *)new btDefaultSerializer();
  *(btDefaultSerializer **)&swig_a->result = result; 
}


void
_wrap_delete_btDefaultSerializer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDefaultSerializer_writeHeader(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = (unsigned char *)swig_a->arg2.p; 
  
  ((btDefaultSerializer const *)arg1)->writeHeader(arg2);
  
}


void
_wrap_btDefaultSerializer_startSerialization(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  (arg1)->startSerialization();
  
}


void
_wrap_btDefaultSerializer_finishSerialization(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  (arg1)->finishSerialization();
  
}


void
_wrap_btDefaultSerializer_getUniquePointer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    void *arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  result = (void *)(arg1)->getUniquePointer(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btDefaultSerializer_getBufferPointer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  result = (unsigned char *)((btDefaultSerializer const *)arg1)->getBufferPointer();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btDefaultSerializer_getCurrentBufferSize(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  result = (int)((btDefaultSerializer const *)arg1)->getCurrentBufferSize();
  swig_a->result = result; 
}


void
_wrap_btDefaultSerializer_finalizeChunk(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    btChunk *arg2;
    _gostring_ arg3;
    intgo arg4;
    void *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = *(btChunk **)&swig_a->arg2; 
  arg3 = (char *)swig_a->arg3.p; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
  
}


void
_wrap_btDefaultSerializer_internalAlloc(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    long long arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (unsigned char *)(arg1)->internalAlloc(arg2);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btDefaultSerializer_allocate(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    long long arg2;
    intgo arg3;
    long : 0;
    btChunk *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  *(btChunk **)&swig_a->result = result; 
}


void
_wrap_btDefaultSerializer_findNameForPointer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    void *arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  result = (char *)((btDefaultSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btDefaultSerializer_registerNameForPointer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    void *arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (char *)swig_a->arg3.p; 
  
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
  
}


void
_wrap_btDefaultSerializer_serializeName(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  (arg1)->serializeName((char const *)arg2);
  
}


void
_wrap_btDefaultSerializer_getSerializationFlags(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  
  result = (int)((btDefaultSerializer const *)arg1)->getSerializationFlags();
  swig_a->result = result; 
}


void
_wrap_btDefaultSerializer_setSerializationFlags(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setSerializationFlags(arg2);
  
}


void
_wrap_btDefaultSerializer_findPointer(void *swig_v)
{
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDefaultSerializer *arg1;
    void *arg2;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultSerializer **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btSerializer *swig_b0 = (btSerializer *)swig_a->arg1;
  result = (void *)(swig_b0)->findPointer(arg2);
  *(void **)&swig_a->result = result; 
}


void
_wrap_new_btTriangleInfo(void *swig_v)
{
  btTriangleInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleInfo *)new btTriangleInfo();
  *(btTriangleInfo **)&swig_a->result = result; 
}


void
_wrap_btTriangleInfo_m_flags_set(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_flags = arg2;
  
}


void
_wrap_btTriangleInfo_m_flags_get(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_flags);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfo_m_edgeV0V1Angle_set(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
  
}


void
_wrap_btTriangleInfo_m_edgeV0V1Angle_get(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_edgeV0V1Angle);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfo_m_edgeV1V2Angle_set(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
  
}


void
_wrap_btTriangleInfo_m_edgeV1V2Angle_get(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_edgeV1V2Angle);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfo_m_edgeV2V0Angle_set(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
  
}


void
_wrap_btTriangleInfo_m_edgeV2V0Angle_get(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_edgeV2V0Angle);
  swig_a->result = result; 
}


void
_wrap_delete_btTriangleInfo(void *swig_v)
{
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  
  struct swigargs {
    btTriangleInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleInfoMap_m_convexEpsilon_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexEpsilon = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_convexEpsilon_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_convexEpsilon);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_m_planarEpsilon_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_planarEpsilon = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_planarEpsilon_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_planarEpsilon);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_m_equalVertexThreshold_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_equalVertexThreshold_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_equalVertexThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_m_edgeDistanceThreshold_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_edgeDistanceThreshold_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_edgeDistanceThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxEdgeAngleThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxEdgeAngleThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_m_zeroAreaThreshold_set(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMap_m_zeroAreaThreshold_get(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_zeroAreaThreshold);
  swig_a->result = result; 
}


void
_wrap_new_btTriangleInfoMap(void *swig_v)
{
  btTriangleInfoMap *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleInfoMap *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleInfoMap *)new btTriangleInfoMap();
  *(btTriangleInfoMap **)&swig_a->result = result; 
}


void
_wrap_delete_btTriangleInfoMap(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleInfoMap_calculateSerializeBufferSize(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  
  result = (int)((btTriangleInfoMap const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMap_serialize(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btTriangleInfoMap const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTriangleInfoMap_deSerialize(void *swig_v)
{
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btTriangleInfoMapData *arg2 = 0 ;
  
  struct swigargs {
    btTriangleInfoMap *arg1;
    btTriangleInfoMapData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMap **)&swig_a->arg1; 
  arg2 = *(btTriangleInfoMapData **)&swig_a->arg2; 
  
  (arg1)->deSerialize(*arg2);
  
}


void
_wrap_btTriangleInfoData_m_flags_set(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_flags = arg2;
  
}


void
_wrap_btTriangleInfoData_m_flags_get(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_flags);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoData_m_edgeV0V1Angle_set(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
  
}


void
_wrap_btTriangleInfoData_m_edgeV0V1Angle_get(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_edgeV0V1Angle);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoData_m_edgeV1V2Angle_set(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
  
}


void
_wrap_btTriangleInfoData_m_edgeV1V2Angle_get(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_edgeV1V2Angle);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoData_m_edgeV2V0Angle_set(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
  
}


void
_wrap_btTriangleInfoData_m_edgeV2V0Angle_get(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_edgeV2V0Angle);
  swig_a->result = result; 
}


void
_wrap_new_btTriangleInfoData(void *swig_v)
{
  btTriangleInfoData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleInfoData *)new btTriangleInfoData();
  *(btTriangleInfoData **)&swig_a->result = result; 
}


void
_wrap_delete_btTriangleInfoData(void *swig_v)
{
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  
  struct swigargs {
    btTriangleInfoData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTriangleInfoMapData_m_hashTablePtr_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_hashTablePtr = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_hashTablePtr_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int *) ((arg1)->m_hashTablePtr);
  *(int **)&swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_nextPtr_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_nextPtr = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_nextPtr_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int *) ((arg1)->m_nextPtr);
  *(int **)&swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_valueArrayPtr_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *arg2 = (btTriangleInfoData *) 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    btTriangleInfoData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = *(btTriangleInfoData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_valueArrayPtr = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_valueArrayPtr_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    btTriangleInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (btTriangleInfoData *) ((arg1)->m_valueArrayPtr);
  *(btTriangleInfoData **)&swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_keyArrayPtr_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_keyArrayPtr = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_keyArrayPtr_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int *) ((arg1)->m_keyArrayPtr);
  *(int **)&swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_convexEpsilon_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexEpsilon = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_convexEpsilon_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_convexEpsilon);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_planarEpsilon_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_planarEpsilon = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_planarEpsilon_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_planarEpsilon);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_equalVertexThreshold_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_equalVertexThreshold_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_equalVertexThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_edgeDistanceThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_zeroAreaThreshold_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_zeroAreaThreshold_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_zeroAreaThreshold);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_nextSize_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_nextSize = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_nextSize_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_nextSize);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_hashTableSize_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hashTableSize = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_hashTableSize_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_hashTableSize);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_numValues_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numValues = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_numValues_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numValues);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_numKeys_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numKeys = arg2;
  
}


void
_wrap_btTriangleInfoMapData_m_numKeys_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numKeys);
  swig_a->result = result; 
}


void
_wrap_btTriangleInfoMapData_m_padding_set(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btTriangleInfoMapData_m_padding_get(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btTriangleInfoMapData(void *swig_v)
{
  btTriangleInfoMapData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleInfoMapData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleInfoMapData *)new btTriangleInfoMapData();
  *(btTriangleInfoMapData **)&swig_a->result = result; 
}


void
_wrap_delete_btTriangleInfoMapData(void *swig_v)
{
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  
  struct swigargs {
    btTriangleInfoMapData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleInfoMapData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btBvhTriangleMeshShape__SWIG_0(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    bool arg2;
    bool arg3;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,arg3);
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_new_btBvhTriangleMeshShape__SWIG_1(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    bool arg2;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2);
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_new_btBvhTriangleMeshShape__SWIG_2(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    bool arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    bool arg5;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_new_btBvhTriangleMeshShape__SWIG_3(void *swig_v)
{
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btStridingMeshInterface *arg1;
    bool arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btStridingMeshInterface **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_delete_btBvhTriangleMeshShape(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBvhTriangleMeshShape_getOwnsBvh(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->getOwnsBvh();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_performRaycast(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->performRaycast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btBvhTriangleMeshShape_performConvexcast(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->performConvexcast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btBvhTriangleMeshShape_processAllTriangles(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btBvhTriangleMeshShape_refitTree(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->refitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btBvhTriangleMeshShape_partialRefitTree(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->partialRefitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btBvhTriangleMeshShape_getName(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btBvhTriangleMeshShape_setLocalScaling(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_getOptimizedBvh(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btOptimizedBvh *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btOptimizedBvh *)(arg1)->getOptimizedBvh();
  *(btOptimizedBvh **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btOptimizedBvh *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btOptimizedBvh **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setOptimizedBvh(arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btOptimizedBvh *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btOptimizedBvh **)&swig_a->arg2; 
  
  (arg1)->setOptimizedBvh(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_buildOptimizedBvh(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  (arg1)->buildOptimizedBvh();
  
}


void
_wrap_btBvhTriangleMeshShape_usesQuantizedAabbCompression(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->usesQuantizedAabbCompression();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_setTriangleInfoMap(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *arg2 = (btTriangleInfoMap *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTriangleInfoMap *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleInfoMap **)&swig_a->arg2; 
  
  (arg1)->setTriangleInfoMap(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btTriangleInfoMap *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btTriangleInfoMap *)((btBvhTriangleMeshShape const *)arg1)->getTriangleInfoMap();
  *(btTriangleInfoMap **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_1(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btTriangleInfoMap *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btTriangleInfoMap *)(arg1)->getTriangleInfoMap();
  *(btTriangleInfoMap **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_calculateSerializeBufferSize(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (int)((btBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_serialize(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btBvhTriangleMeshShape_serializeSingleBvh(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleBvh(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleTriangleInfoMap(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_localGetSupportingVertex(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = ((btTriangleMeshShape const *)swig_b0)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBvhTriangleMeshShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = ((btTriangleMeshShape const *)swig_b0)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBvhTriangleMeshShape_recalcLocalAabb(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  (swig_b0)->recalcLocalAabb();
  
}


void
_wrap_btBvhTriangleMeshShape_getAabb(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  ((btTriangleMeshShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBvhTriangleMeshShape_calculateLocalInertia(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  ((btTriangleMeshShape const *)swig_b0)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btBvhTriangleMeshShape_getLocalScaling(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = (btVector3 *) &((btTriangleMeshShape const *)swig_b0)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getMeshInterface__SWIG_0(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = (btStridingMeshInterface *)(swig_b0)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getMeshInterface__SWIG_1(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btStridingMeshInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = (btStridingMeshInterface *)((btTriangleMeshShape const *)swig_b0)->getMeshInterface();
  *(btStridingMeshInterface **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getLocalAabbMin(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = (btVector3 *) &((btTriangleMeshShape const *)swig_b0)->getLocalAabbMin();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getLocalAabbMax(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  result = (btVector3 *) &((btTriangleMeshShape const *)swig_b0)->getLocalAabbMax();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getMargin(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  result = (btScalar)((btConcaveShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_setMargin(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  (swig_b1)->setMargin(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_getBoundingSphere(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btBvhTriangleMeshShape_getAngularMotionDisc(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getContactBreakingThreshold(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (btScalar)((btCollisionShape const *)swig_b2)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_calculateTemporalAabb(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btBvhTriangleMeshShape_isPolyhedral(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isConvex2d(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isConvex(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isNonMoving(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isConcave(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isCompound(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isSoftBody(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_isInfinite(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (bool)((btCollisionShape const *)swig_b2)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getShapeType(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (int)((btCollisionShape const *)swig_b2)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = ((btCollisionShape const *)swig_b2)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBvhTriangleMeshShape_setUserPointer(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  (swig_b2)->setUserPointer(arg2);
  
}


void
_wrap_btBvhTriangleMeshShape_getUserPointer(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  result = (void *)((btCollisionShape const *)swig_b2)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btBvhTriangleMeshShape_serializeSingleShape(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btTriangleMeshShape *swig_b0 = (btTriangleMeshShape *)swig_a->arg1;
  btConcaveShape *swig_b1 = (btConcaveShape *)swig_b0;
  btCollisionShape *swig_b2 = (btCollisionShape *)swig_b1;
  ((btCollisionShape const *)swig_b2)->serializeSingleShape(arg2);
  
}


void
_wrap_btTriangleMeshShapeData_m_collisionShapeData_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_collisionShapeData_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_meshInterface_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *arg2 = (btStridingMeshInterfaceData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    btStridingMeshInterfaceData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btStridingMeshInterfaceData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_meshInterface = *arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_meshInterface_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    btStridingMeshInterfaceData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btStridingMeshInterfaceData *)& ((arg1)->m_meshInterface);
  *(btStridingMeshInterfaceData **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *arg2 = (btQuantizedBvhFloatData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    btQuantizedBvhFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_quantizedFloatBvh = arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    btQuantizedBvhFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btQuantizedBvhFloatData *) ((arg1)->m_quantizedFloatBvh);
  *(btQuantizedBvhFloatData **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *arg2 = (btQuantizedBvhDoubleData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    btQuantizedBvhDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btQuantizedBvhDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_quantizedDoubleBvh = arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    btQuantizedBvhDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btQuantizedBvhDoubleData *) ((arg1)->m_quantizedDoubleBvh);
  *(btQuantizedBvhDoubleData **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_triangleInfoMap_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *arg2 = (btTriangleInfoMapData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    btTriangleInfoMapData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btTriangleInfoMapData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_triangleInfoMap = arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_triangleInfoMap_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    btTriangleInfoMapData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btTriangleInfoMapData *) ((arg1)->m_triangleInfoMap);
  *(btTriangleInfoMapData **)&swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_collisionMargin_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
}


void
_wrap_btTriangleMeshShapeData_m_collisionMargin_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float result;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_collisionMargin);
  swig_a->result = result; 
}


void
_wrap_btTriangleMeshShapeData_m_pad3_set(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad3, (const char *)arg2, 4-1);
      arg1->m_pad3[4-1] = 0;
    } else {
      arg1->m_pad3[0] = 0;
    }
  }
  
}


void
_wrap_btTriangleMeshShapeData_m_pad3_get(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btTriangleMeshShapeData(void *swig_v)
{
  btTriangleMeshShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTriangleMeshShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTriangleMeshShapeData *)new btTriangleMeshShapeData();
  *(btTriangleMeshShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btTriangleMeshShapeData(void *swig_v)
{
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  
  struct swigargs {
    btTriangleMeshShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTriangleMeshShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btScaledBvhTriangleMeshShape(void *swig_v)
{
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScaledBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    long : 0;
    btScaledBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScaledBvhTriangleMeshShape *)new btScaledBvhTriangleMeshShape(arg1,(btVector3 const &)*arg2);
  *(btScaledBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_delete_btScaledBvhTriangleMeshShape(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getAabb(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btScaledBvhTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_setLocalScaling(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getLocalScaling(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btScaledBvhTriangleMeshShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_calculateLocalInertia(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btScaledBvhTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_processAllTriangles(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btScaledBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getChildShape__SWIG_0(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btBvhTriangleMeshShape *)(arg1)->getChildShape();
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_getChildShape__SWIG_1(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    btBvhTriangleMeshShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (btBvhTriangleMeshShape *)((btScaledBvhTriangleMeshShape const *)arg1)->getChildShape();
  *(btBvhTriangleMeshShape **)&swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_getName(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btScaledBvhTriangleMeshShape_calculateSerializeBufferSize(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  result = (int)((btScaledBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_serialize(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btScaledBvhTriangleMeshShape_getMargin(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  result = (btScalar)((btConcaveShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_setMargin(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getBoundingSphere(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getAngularMotionDisc(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_getContactBreakingThreshold(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_calculateTemporalAabb(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_isPolyhedral(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isConvex2d(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isConvex(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isNonMoving(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isConcave(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isCompound(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isSoftBody(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_isInfinite(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  bool result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_getShapeType(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  int result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btScaledBvhTriangleMeshShape_setUserPointer(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btScaledBvhTriangleMeshShape_getUserPointer(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btScaledBvhTriangleMeshShape_serializeSingleShape(void *swig_v)
{
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btScaledBvhTriangleMeshShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledBvhTriangleMeshShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_btScaledTriangleMeshShapeData_m_trimeshShapeData_set(void *swig_v)
{
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *arg2 = (btTriangleMeshShapeData *) 0 ;
  
  struct swigargs {
    btScaledTriangleMeshShapeData *arg1;
    btTriangleMeshShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btTriangleMeshShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_trimeshShapeData = *arg2;
  
}


void
_wrap_btScaledTriangleMeshShapeData_m_trimeshShapeData_get(void *swig_v)
{
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *result = 0 ;
  
  struct swigargs {
    btScaledTriangleMeshShapeData *arg1;
    long : 0;
    btTriangleMeshShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btTriangleMeshShapeData *)& ((arg1)->m_trimeshShapeData);
  *(btTriangleMeshShapeData **)&swig_a->result = result; 
}


void
_wrap_btScaledTriangleMeshShapeData_m_localScaling_set(void *swig_v)
{
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btScaledTriangleMeshShapeData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledTriangleMeshShapeData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localScaling = *arg2;
  
}


void
_wrap_btScaledTriangleMeshShapeData_m_localScaling_get(void *swig_v)
{
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btScaledTriangleMeshShapeData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledTriangleMeshShapeData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_new_btScaledTriangleMeshShapeData(void *swig_v)
{
  btScaledTriangleMeshShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btScaledTriangleMeshShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btScaledTriangleMeshShapeData *)new btScaledTriangleMeshShapeData();
  *(btScaledTriangleMeshShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btScaledTriangleMeshShapeData(void *swig_v)
{
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  
  struct swigargs {
    btScaledTriangleMeshShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btScaledTriangleMeshShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCompoundShapeChild_m_transform_set(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_transform = *arg2;
  
}


void
_wrap_btCompoundShapeChild_m_transform_get(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_transform);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeChild_m_childShape_set(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    btCollisionShape *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  arg2 = *(btCollisionShape **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_childShape = arg2;
  
}


void
_wrap_btCompoundShapeChild_m_childShape_get(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  result = (btCollisionShape *) ((arg1)->m_childShape);
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeChild_m_childShapeType_set(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_childShapeType = arg2;
  
}


void
_wrap_btCompoundShapeChild_m_childShapeType_get(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_childShapeType);
  swig_a->result = result; 
}


void
_wrap_btCompoundShapeChild_m_childMargin_set(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_childMargin = arg2;
  
}


void
_wrap_btCompoundShapeChild_m_childMargin_get(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_childMargin);
  swig_a->result = result; 
}


void
_wrap_btCompoundShapeChild_m_node_set(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_node = arg2;
  
}


void
_wrap_btCompoundShapeChild_m_node_get(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  result = (btDbvtNode *) ((arg1)->m_node);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_delete_btCompoundShapeChild(void *swig_v)
{
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  
  struct swigargs {
    btCompoundShapeChild *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChild **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btCompoundShape__SWIG_0(void *swig_v)
{
  bool arg1 ;
  btCompoundShape *result = 0 ;
  
  struct swigargs {
    bool arg1;
    long : 0;
    btCompoundShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (bool)swig_a->arg1; 
  
  result = (btCompoundShape *)new btCompoundShape(arg1);
  *(btCompoundShape **)&swig_a->result = result; 
}


void
_wrap_new_btCompoundShape__SWIG_1(void *swig_v)
{
  btCompoundShape *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCompoundShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCompoundShape *)new btCompoundShape();
  *(btCompoundShape **)&swig_a->result = result; 
}


void
_wrap_delete_btCompoundShape(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCompoundShape_addChildShape(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btTransform *arg2;
    btCollisionShape *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  
  (arg1)->addChildShape((btTransform const &)*arg2,arg3);
  
}


void
_wrap_btCompoundShape_removeChildShape(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btCollisionShape *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btCollisionShape **)&swig_a->arg2; 
  
  (arg1)->removeChildShape(arg2);
  
}


void
_wrap_btCompoundShape_removeChildShapeByIndex(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->removeChildShapeByIndex(arg2);
  
}


void
_wrap_btCompoundShape_getNumChildShapes(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (int)((btCompoundShape const *)arg1)->getNumChildShapes();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_getChildShape__SWIG_0(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btCollisionShape *)(arg1)->getChildShape(arg2);
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_getChildShape__SWIG_1(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btCollisionShape *)((btCompoundShape const *)arg1)->getChildShape(arg2);
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_getChildTransform__SWIG_0(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTransform *) &(arg1)->getChildTransform(arg2);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_getChildTransform__SWIG_1(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTransform *) &((btCompoundShape const *)arg1)->getChildTransform(arg2);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_updateChildTransform__SWIG_0(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    btTransform *arg3;
    bool arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3,arg4);
  
}


void
_wrap_btCompoundShape_updateChildTransform__SWIG_1(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    intgo arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btCompoundShape_getChildList(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCompoundShapeChild *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    btCompoundShapeChild *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (btCompoundShapeChild *)(arg1)->getChildList();
  *(btCompoundShapeChild **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_getAabb(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btCompoundShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btCompoundShape_recalculateLocalAabb(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  (arg1)->recalculateLocalAabb();
  
}


void
_wrap_btCompoundShape_setLocalScaling(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btCompoundShape_getLocalScaling(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btCompoundShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_calculateLocalInertia(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btCompoundShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btCompoundShape_setMargin(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btCompoundShape_getMargin(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (btScalar)((btCompoundShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_getName(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (char *)((btCompoundShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCompoundShape_getDynamicAabbTree__SWIG_0(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btDbvt *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    btDbvt *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (btDbvt *)((btCompoundShape const *)arg1)->getDynamicAabbTree();
  *(btDbvt **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_getDynamicAabbTree__SWIG_1(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btDbvt *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    btDbvt *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (btDbvt *)(arg1)->getDynamicAabbTree();
  *(btDbvt **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_createAabbTreeFromChildren(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  (arg1)->createAabbTreeFromChildren();
  
}


void
_wrap_btCompoundShape_calculatePrincipalAxisTransform(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btScalar *arg2;
    btTransform *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btCompoundShape const *)arg1)->calculatePrincipalAxisTransform(arg2,*arg3,*arg4);
  
}


void
_wrap_btCompoundShape_getUpdateRevision(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (int)((btCompoundShape const *)arg1)->getUpdateRevision();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_calculateSerializeBufferSize(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  result = (int)((btCompoundShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_serialize(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btCompoundShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btCompoundShape_getBoundingSphere(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btCompoundShape_getAngularMotionDisc(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_getContactBreakingThreshold(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btCompoundShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (btScalar)((btCollisionShape const *)swig_b0)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_calculateTemporalAabb(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btCompoundShape_isPolyhedral(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isConvex2d(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isConvex(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isNonMoving(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isConcave(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isCompound(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isSoftBody(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_isInfinite(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  bool result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (bool)((btCollisionShape const *)swig_b0)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_getShapeType(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (int)((btCollisionShape const *)swig_b0)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btCompoundShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = ((btCollisionShape const *)swig_b0)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btCompoundShape_setUserPointer(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  (swig_b0)->setUserPointer(arg2);
  
}


void
_wrap_btCompoundShape_getUserPointer(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  result = (void *)((btCollisionShape const *)swig_b0)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btCompoundShape_serializeSingleShape(void *swig_v)
{
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btCompoundShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCollisionShape *swig_b0 = (btCollisionShape *)swig_a->arg1;
  ((btCollisionShape const *)swig_b0)->serializeSingleShape(arg2);
  
}


void
_wrap_btCompoundShapeChildData_m_transform_set(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_transform = *arg2;
  
}


void
_wrap_btCompoundShapeChildData_m_transform_get(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_transform);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeChildData_m_childShape_set(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_childShape = arg2;
  
}


void
_wrap_btCompoundShapeChildData_m_childShape_get(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *) ((arg1)->m_childShape);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeChildData_m_childShapeType_set(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_childShapeType = arg2;
  
}


void
_wrap_btCompoundShapeChildData_m_childShapeType_get(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_childShapeType);
  swig_a->result = result; 
}


void
_wrap_btCompoundShapeChildData_m_childMargin_set(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_childMargin = arg2;
  
}


void
_wrap_btCompoundShapeChildData_m_childMargin_get(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float result;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_childMargin);
  swig_a->result = result; 
}


void
_wrap_new_btCompoundShapeChildData(void *swig_v)
{
  btCompoundShapeChildData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCompoundShapeChildData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCompoundShapeChildData *)new btCompoundShapeChildData();
  *(btCompoundShapeChildData **)&swig_a->result = result; 
}


void
_wrap_delete_btCompoundShapeChildData(void *swig_v)
{
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  
  struct swigargs {
    btCompoundShapeChildData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeChildData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCompoundShapeData_m_collisionShapeData_set(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    btCollisionShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  arg2 = *(btCollisionShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
}


void
_wrap_btCompoundShapeData_m_collisionShapeData_get(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    long : 0;
    btCollisionShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  *(btCollisionShapeData **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeData_m_childShapePtr_set(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *arg2 = (btCompoundShapeChildData *) 0 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    btCompoundShapeChildData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  arg2 = *(btCompoundShapeChildData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_childShapePtr = arg2;
  
}


void
_wrap_btCompoundShapeData_m_childShapePtr_get(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *result = 0 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    long : 0;
    btCompoundShapeChildData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  
  result = (btCompoundShapeChildData *) ((arg1)->m_childShapePtr);
  *(btCompoundShapeChildData **)&swig_a->result = result; 
}


void
_wrap_btCompoundShapeData_m_numChildShapes_set(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numChildShapes = arg2;
  
}


void
_wrap_btCompoundShapeData_m_numChildShapes_get(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numChildShapes);
  swig_a->result = result; 
}


void
_wrap_btCompoundShapeData_m_collisionMargin_set(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
}


void
_wrap_btCompoundShapeData_m_collisionMargin_get(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float result;
  
  struct swigargs {
    btCompoundShapeData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_collisionMargin);
  swig_a->result = result; 
}


void
_wrap_new_btCompoundShapeData(void *swig_v)
{
  btCompoundShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCompoundShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCompoundShapeData *)new btCompoundShapeData();
  *(btCompoundShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btCompoundShapeData(void *swig_v)
{
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  
  struct swigargs {
    btCompoundShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCompoundShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btBU_Simplex1to4__SWIG_0(void *swig_v)
{
  btBU_Simplex1to4 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btBU_Simplex1to4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4();
  *(btBU_Simplex1to4 **)&swig_a->result = result; 
}


void
_wrap_new_btBU_Simplex1to4__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    long : 0;
    btBU_Simplex1to4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1);
  *(btBU_Simplex1to4 **)&swig_a->result = result; 
}


void
_wrap_new_btBU_Simplex1to4__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btBU_Simplex1to4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btBU_Simplex1to4 **)&swig_a->result = result; 
}


void
_wrap_new_btBU_Simplex1to4__SWIG_3(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    btBU_Simplex1to4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  *(btBU_Simplex1to4 **)&swig_a->result = result; 
}


void
_wrap_new_btBU_Simplex1to4__SWIG_4(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btBU_Simplex1to4 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btBU_Simplex1to4 **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_reset(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  (arg1)->reset();
  
}


void
_wrap_btBU_Simplex1to4_getAabb(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBU_Simplex1to4 const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBU_Simplex1to4_addVertex(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->addVertex((btVector3 const &)*arg2);
  
}


void
_wrap_btBU_Simplex1to4_getNumVertices(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumVertices();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getNumEdges(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumEdges();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getEdge(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    intgo arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btBU_Simplex1to4 const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
}


void
_wrap_btBU_Simplex1to4_getVertex(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btBU_Simplex1to4 const *)arg1)->getVertex(arg2,*arg3);
  
}


void
_wrap_btBU_Simplex1to4_getNumPlanes(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumPlanes();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getPlane(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btBU_Simplex1to4 const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
}


void
_wrap_btBU_Simplex1to4_getIndex(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    intgo arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getIndex(arg2);
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isInside(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    float arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (bool)((btBU_Simplex1to4 const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getName(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  result = (char *)((btBU_Simplex1to4 const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btBU_Simplex1to4(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btBU_Simplex1to4_getNonvirtualAabb(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  ((btPolyhedralConvexAabbCachingShape const *)swig_b0)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
  
}


void
_wrap_btBU_Simplex1to4_setLocalScaling(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btBU_Simplex1to4_recalcLocalAabb(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  (swig_b0)->recalcLocalAabb();
  
}


void
_wrap_btBU_Simplex1to4_initializePolyhedralFeatures__SWIG_0(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures(arg2);
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_initializePolyhedralFeatures__SWIG_1(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (bool)(swig_b1)->initializePolyhedralFeatures();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getConvexPolyhedron(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    btConvexPolyhedron *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)swig_b1)->getConvexPolyhedron();
  *(btConvexPolyhedron **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  result = ((btPolyhedralConvexShape const *)swig_b1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBU_Simplex1to4_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  ((btPolyhedralConvexShape const *)swig_b1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btBU_Simplex1to4_calculateLocalInertia(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  ((btPolyhedralConvexShape const *)swig_b1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btBU_Simplex1to4_localGetSupportingVertex(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = ((btConvexInternalShape const *)swig_b2)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBU_Simplex1to4_getImplicitShapeDimensions(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_setImplicitShapeDimensions(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btBU_Simplex1to4_setSafeMargin__SWIG_0(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btBU_Simplex1to4_setSafeMargin__SWIG_1(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin(arg2);
  
}


void
_wrap_btBU_Simplex1to4_setSafeMargin__SWIG_2(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btBU_Simplex1to4_setSafeMargin__SWIG_3(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btBU_Simplex1to4_getAabbSlow(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBU_Simplex1to4_getLocalScaling(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getLocalScalingNV(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b2)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_setMargin(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  (swig_b2)->setMargin(arg2);
  
}


void
_wrap_btBU_Simplex1to4_getMargin(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getMarginNV(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (btScalar)((btConvexInternalShape const *)swig_b2)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getNumPreferredPenetrationDirections(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (int)((btConvexInternalShape const *)swig_b2)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getPreferredPenetrationDirection(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  ((btConvexInternalShape const *)swig_b2)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btBU_Simplex1to4_calculateSerializeBufferSize(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (int)((btConvexInternalShape const *)swig_b2)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_serialize(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  result = (char *)((btConvexInternalShape const *)swig_b2)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btBU_Simplex1to4_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBU_Simplex1to4_localGetSupportVertexNonVirtual(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = ((btConvexShape const *)swig_b3)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBU_Simplex1to4_getMarginNonVirtual(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  result = (btScalar)((btConvexShape const *)swig_b3)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getAabbNonVirtual(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  ((btConvexShape const *)swig_b3)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btBU_Simplex1to4_project(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  ((btConvexShape const *)swig_b3)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btBU_Simplex1to4_getBoundingSphere(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btBU_Simplex1to4_getAngularMotionDisc(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getContactBreakingThreshold(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (btScalar)((btCollisionShape const *)swig_b4)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_calculateTemporalAabb(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btBU_Simplex1to4_isPolyhedral(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isConvex2d(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isConvex(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isNonMoving(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isConcave(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isCompound(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isSoftBody(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_isInfinite(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  bool result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (bool)((btCollisionShape const *)swig_b4)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getShapeType(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (int)((btCollisionShape const *)swig_b4)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = ((btCollisionShape const *)swig_b4)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btBU_Simplex1to4_setUserPointer(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  (swig_b4)->setUserPointer(arg2);
  
}


void
_wrap_btBU_Simplex1to4_getUserPointer(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  result = (void *)((btCollisionShape const *)swig_b4)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btBU_Simplex1to4_serializeSingleShape(void *swig_v)
{
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btBU_Simplex1to4 *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBU_Simplex1to4 **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btPolyhedralConvexAabbCachingShape *swig_b0 = (btPolyhedralConvexAabbCachingShape *)swig_a->arg1;
  btPolyhedralConvexShape *swig_b1 = (btPolyhedralConvexShape *)swig_b0;
  btConvexInternalShape *swig_b2 = (btConvexInternalShape *)swig_b1;
  btConvexShape *swig_b3 = (btConvexShape *)swig_b2;
  btCollisionShape *swig_b4 = (btCollisionShape *)swig_b3;
  ((btCollisionShape const *)swig_b4)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btEmptyShape(void *swig_v)
{
  btEmptyShape *result = 0 ;
  
  struct swigargs {
    long : 0;
    btEmptyShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btEmptyShape *)new btEmptyShape();
  *(btEmptyShape **)&swig_a->result = result; 
}


void
_wrap_delete_btEmptyShape(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btEmptyShape_getAabb(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btEmptyShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btEmptyShape_setLocalScaling(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btEmptyShape_getLocalScaling(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btEmptyShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btEmptyShape_calculateLocalInertia(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btEmptyShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btEmptyShape_getName(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  result = (char *)((btEmptyShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btEmptyShape_processAllTriangles(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btTriangleCallback *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btTriangleCallback **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btEmptyShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btEmptyShape_getMargin(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  result = (btScalar)((btConcaveShape const *)swig_b0)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_setMargin(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  (swig_b0)->setMargin(arg2);
  
}


void
_wrap_btEmptyShape_getBoundingSphere(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btEmptyShape_getAngularMotionDisc(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_getContactBreakingThreshold(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btEmptyShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_calculateTemporalAabb(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btEmptyShape_isPolyhedral(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isConvex2d(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isConvex(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isNonMoving(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isConcave(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isCompound(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isSoftBody(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_isInfinite(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  bool result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_getShapeType(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  int result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btEmptyShape_setUserPointer(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btEmptyShape_getUserPointer(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btEmptyShape_calculateSerializeBufferSize(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  int result;
  
  struct swigargs {
    btEmptyShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btEmptyShape_serialize(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (char *)((btCollisionShape const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btEmptyShape_serializeSingleShape(void *swig_v)
{
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btEmptyShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btEmptyShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConcaveShape *swig_b0 = (btConcaveShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btMultiSphereShape(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btMultiSphereShape *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btScalar *arg2;
    intgo arg3;
    long : 0;
    btMultiSphereShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btMultiSphereShape *)new btMultiSphereShape((btVector3 const *)arg1,(btScalar const *)arg2,arg3);
  *(btMultiSphereShape **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_calculateLocalInertia(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btMultiSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btMultiSphereShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btMultiSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btMultiSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btMultiSphereShape_getSphereCount(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  result = (int)((btMultiSphereShape const *)arg1)->getSphereCount();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getSpherePosition(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btVector3 *) &((btMultiSphereShape const *)arg1)->getSpherePosition(arg2);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getSphereRadius(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btMultiSphereShape const *)arg1)->getSphereRadius(arg2);
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getName(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  result = (char *)((btMultiSphereShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btMultiSphereShape_calculateSerializeBufferSize(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  result = (int)((btMultiSphereShape const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_serialize(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btMultiSphereShape const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btMultiSphereShape(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMultiSphereShape_setLocalScaling(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  (swig_b0)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btMultiSphereShape_getAabb(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  ((btConvexInternalAabbCachingShape const *)swig_b0)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btMultiSphereShape_recalcLocalAabb(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  (swig_b0)->recalcLocalAabb();
  
}


void
_wrap_btMultiSphereShape_localGetSupportingVertex(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = ((btConvexInternalShape const *)swig_b1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMultiSphereShape_getImplicitShapeDimensions(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getImplicitShapeDimensions();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_setImplicitShapeDimensions(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
}


void
_wrap_btMultiSphereShape_setSafeMargin__SWIG_0(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2,arg3);
  
}


void
_wrap_btMultiSphereShape_setSafeMargin__SWIG_1(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin(arg2);
  
}


void
_wrap_btMultiSphereShape_setSafeMargin__SWIG_2(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btMultiSphereShape_setSafeMargin__SWIG_3(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setSafeMargin((btVector3 const &)*arg2);
  
}


void
_wrap_btMultiSphereShape_getAabbSlow(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btMultiSphereShape_getLocalScaling(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getLocalScalingNV(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btVector3 *) &((btConvexInternalShape const *)swig_b1)->getLocalScalingNV();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_setMargin(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  (swig_b1)->setMargin(arg2);
  
}


void
_wrap_btMultiSphereShape_getMargin(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getMarginNV(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (btScalar)((btConvexInternalShape const *)swig_b1)->getMarginNV();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  result = (int)((btConvexInternalShape const *)swig_b1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getPreferredPenetrationDirection(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  ((btConvexInternalShape const *)swig_b1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btMultiSphereShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMultiSphereShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = ((btConvexShape const *)swig_b2)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMultiSphereShape_getMarginNonVirtual(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  result = (btScalar)((btConvexShape const *)swig_b2)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getAabbNonVirtual(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btMultiSphereShape_project(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  ((btConvexShape const *)swig_b2)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btMultiSphereShape_getBoundingSphere(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btMultiSphereShape_getAngularMotionDisc(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getContactBreakingThreshold(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (btScalar)((btCollisionShape const *)swig_b3)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_calculateTemporalAabb(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btMultiSphereShape_isPolyhedral(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isConvex2d(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isConvex(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isNonMoving(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isConcave(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isCompound(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isSoftBody(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_isInfinite(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (bool)((btCollisionShape const *)swig_b3)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getShapeType(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (int)((btCollisionShape const *)swig_b3)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = ((btCollisionShape const *)swig_b3)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btMultiSphereShape_setUserPointer(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  (swig_b3)->setUserPointer(arg2);
  
}


void
_wrap_btMultiSphereShape_getUserPointer(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  result = (void *)((btCollisionShape const *)swig_b3)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShape_serializeSingleShape(void *swig_v)
{
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btMultiSphereShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexInternalAabbCachingShape *swig_b0 = (btConvexInternalAabbCachingShape *)swig_a->arg1;
  btConvexInternalShape *swig_b1 = (btConvexInternalShape *)swig_b0;
  btConvexShape *swig_b2 = (btConvexShape *)swig_b1;
  btCollisionShape *swig_b3 = (btCollisionShape *)swig_b2;
  ((btCollisionShape const *)swig_b3)->serializeSingleShape(arg2);
  
}


void
_wrap_btPositionAndRadius_m_pos_set(void *swig_v)
{
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btPositionAndRadius *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPositionAndRadius **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pos = *arg2;
  
}


void
_wrap_btPositionAndRadius_m_pos_get(void *swig_v)
{
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btPositionAndRadius *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPositionAndRadius **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_pos);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btPositionAndRadius_m_radius_set(void *swig_v)
{
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btPositionAndRadius *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPositionAndRadius **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_radius = arg2;
  
}


void
_wrap_btPositionAndRadius_m_radius_get(void *swig_v)
{
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float result;
  
  struct swigargs {
    btPositionAndRadius *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPositionAndRadius **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_radius);
  swig_a->result = result; 
}


void
_wrap_new_btPositionAndRadius(void *swig_v)
{
  btPositionAndRadius *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPositionAndRadius *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPositionAndRadius *)new btPositionAndRadius();
  *(btPositionAndRadius **)&swig_a->result = result; 
}


void
_wrap_delete_btPositionAndRadius(void *swig_v)
{
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  
  struct swigargs {
    btPositionAndRadius *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPositionAndRadius **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMultiSphereShapeData_m_convexInternalShapeData_set(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    btConvexInternalShapeData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  arg2 = *(btConvexInternalShapeData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
}


void
_wrap_btMultiSphereShapeData_m_convexInternalShapeData_get(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    long : 0;
    btConvexInternalShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  *(btConvexInternalShapeData **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShapeData_m_localPositionArrayPtr_set(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *arg2 = (btPositionAndRadius *) 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    btPositionAndRadius *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  arg2 = *(btPositionAndRadius **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_localPositionArrayPtr = arg2;
  
}


void
_wrap_btMultiSphereShapeData_m_localPositionArrayPtr_get(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *result = 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    long : 0;
    btPositionAndRadius *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  
  result = (btPositionAndRadius *) ((arg1)->m_localPositionArrayPtr);
  *(btPositionAndRadius **)&swig_a->result = result; 
}


void
_wrap_btMultiSphereShapeData_m_localPositionArraySize_set(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_localPositionArraySize = arg2;
  
}


void
_wrap_btMultiSphereShapeData_m_localPositionArraySize_get(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int result;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_localPositionArraySize);
  swig_a->result = result; 
}


void
_wrap_btMultiSphereShapeData_m_padding_set(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btMultiSphereShapeData_m_padding_get(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btMultiSphereShapeData(void *swig_v)
{
  btMultiSphereShapeData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btMultiSphereShapeData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btMultiSphereShapeData *)new btMultiSphereShapeData();
  *(btMultiSphereShapeData **)&swig_a->result = result; 
}


void
_wrap_delete_btMultiSphereShapeData(void *swig_v)
{
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  
  struct swigargs {
    btMultiSphereShapeData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSphereShapeData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btUniformScalingShape(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  btUniformScalingShape *result = 0 ;
  
  struct swigargs {
    btConvexShape *arg1;
    float arg2;
    long : 0;
    btUniformScalingShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (btUniformScalingShape *)new btUniformScalingShape(arg1,arg2);
  *(btUniformScalingShape **)&swig_a->result = result; 
}


void
_wrap_delete_btUniformScalingShape(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btUniformScalingShape_localGetSupportingVertexWithoutMargin(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniformScalingShape_localGetSupportingVertex(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  ((btUniformScalingShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
}


void
_wrap_btUniformScalingShape_calculateLocalInertia(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btUniformScalingShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
}


void
_wrap_btUniformScalingShape_getUniformScalingFactor(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (btScalar)((btUniformScalingShape const *)arg1)->getUniformScalingFactor();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getChildShape__SWIG_0(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btConvexShape *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    btConvexShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (btConvexShape *)(arg1)->getChildShape();
  *(btConvexShape **)&swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getChildShape__SWIG_1(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btConvexShape *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    btConvexShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (btConvexShape *)((btUniformScalingShape const *)arg1)->getChildShape();
  *(btConvexShape **)&swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getName(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (char *)((btUniformScalingShape const *)arg1)->getName();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btUniformScalingShape_getAabb(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btUniformScalingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btUniformScalingShape_getAabbSlow(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btUniformScalingShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btUniformScalingShape_setLocalScaling(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
}


void
_wrap_btUniformScalingShape_getLocalScaling(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btUniformScalingShape const *)arg1)->getLocalScaling();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_setMargin(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMargin(arg2);
  
}


void
_wrap_btUniformScalingShape_getMargin(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (btScalar)((btUniformScalingShape const *)arg1)->getMargin();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getNumPreferredPenetrationDirections(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  result = (int)((btUniformScalingShape const *)arg1)->getNumPreferredPenetrationDirections();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getPreferredPenetrationDirection(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    intgo arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btUniformScalingShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
}


void
_wrap_btUniformScalingShape_localGetSupportVertexWithoutMarginNonVirtual(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = ((btConvexShape const *)swig_b0)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniformScalingShape_localGetSupportVertexNonVirtual(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = ((btConvexShape const *)swig_b0)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniformScalingShape_getMarginNonVirtual(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  result = (btScalar)((btConvexShape const *)swig_b0)->getMarginNonVirtual();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getAabbNonVirtual(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  ((btConvexShape const *)swig_b0)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
}


void
_wrap_btUniformScalingShape_project(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btScalar *arg4;
    btScalar *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btScalar **)&swig_a->arg4; 
  arg5 = *(btScalar **)&swig_a->arg5; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  ((btConvexShape const *)swig_b0)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
}


void
_wrap_btUniformScalingShape_getBoundingSphere(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btVector3 *arg2;
    btScalar *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->getBoundingSphere(*arg2,*arg3);
  
}


void
_wrap_btUniformScalingShape_getAngularMotionDisc(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getAngularMotionDisc();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getContactBreakingThreshold(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    float arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (btScalar)((btCollisionShape const *)swig_b1)->getContactBreakingThreshold(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_calculateTemporalAabb(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btTransform *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    btVector3 *arg6;
    btVector3 *arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
}


void
_wrap_btUniformScalingShape_isPolyhedral(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isPolyhedral();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isConvex2d(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex2d();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isConvex(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConvex();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isNonMoving(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isNonMoving();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isConcave(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isConcave();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isCompound(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isCompound();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isSoftBody(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isSoftBody();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_isInfinite(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  bool result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (bool)((btCollisionShape const *)swig_b1)->isInfinite();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getShapeType(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->getShapeType();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_getAnisotropicRollingFrictionDirection(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = ((btCollisionShape const *)swig_b1)->getAnisotropicRollingFrictionDirection();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniformScalingShape_setUserPointer(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  (swig_b1)->setUserPointer(arg2);
  
}


void
_wrap_btUniformScalingShape_getUserPointer(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (void *)((btCollisionShape const *)swig_b1)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_calculateSerializeBufferSize(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int result;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (int)((btCollisionShape const *)swig_b1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btUniformScalingShape_serialize(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  result = (char *)((btCollisionShape const *)swig_b1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btUniformScalingShape_serializeSingleShape(void *swig_v)
{
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btUniformScalingShape *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniformScalingShape **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btConvexShape *swig_b0 = (btConvexShape *)swig_a->arg1;
  btCollisionShape *swig_b1 = (btCollisionShape *)swig_b0;
  ((btCollisionShape const *)swig_b1)->serializeSingleShape(arg2);
  
}


void
_wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_0(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btCollisionAlgorithmConstructionInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo();
  *(btCollisionAlgorithmConstructionInfo **)&swig_a->result = result; 
}


void
_wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_1(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    intgo arg2;
    long : 0;
    btCollisionAlgorithmConstructionInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo(arg1,arg2);
  *(btCollisionAlgorithmConstructionInfo **)&swig_a->result = result; 
}


void
_wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher1_set(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_dispatcher1 = arg2;
  
}


void
_wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher1_get(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  
  result = (btDispatcher *) ((arg1)->m_dispatcher1);
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btCollisionAlgorithmConstructionInfo_m_manifold_set(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
    btPersistentManifold *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btPersistentManifold **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_manifold = arg2;
  
}


void
_wrap_btCollisionAlgorithmConstructionInfo_m_manifold_get(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *result = 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
    long : 0;
    btPersistentManifold *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  
  result = (btPersistentManifold *) ((arg1)->m_manifold);
  *(btPersistentManifold **)&swig_a->result = result; 
}


void
_wrap_delete_btCollisionAlgorithmConstructionInfo(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btCollisionAlgorithm(void *swig_v)
{
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithm *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithm **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionAlgorithm_processCollision(void *swig_v)
{
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  struct swigargs {
    btCollisionAlgorithm *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
}


void
_wrap_btCollisionAlgorithm_calculateTimeOfImpact(void *swig_v)
{
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  struct swigargs {
    btCollisionAlgorithm *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btCollisionAlgorithm_getAllContactManifolds(void *swig_v)
{
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  struct swigargs {
    btCollisionAlgorithm *arg1;
    btAlignedObjectArray< btPersistentManifold * > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btManifoldArray **)&swig_a->arg2; 
  
  (arg1)->getAllContactManifolds(*arg2);
  
}


void
_wrap_delete_btActivatingCollisionAlgorithm(void *swig_v)
{
  btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) 0 ;
  
  struct swigargs {
    btActivatingCollisionAlgorithm *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActivatingCollisionAlgorithm **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btActivatingCollisionAlgorithm_processCollision(void *swig_v)
{
  btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  struct swigargs {
    btActivatingCollisionAlgorithm *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActivatingCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  btCollisionAlgorithm *swig_b0 = (btCollisionAlgorithm *)swig_a->arg1;
  (swig_b0)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
}


void
_wrap_btActivatingCollisionAlgorithm_calculateTimeOfImpact(void *swig_v)
{
  btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  struct swigargs {
    btActivatingCollisionAlgorithm *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActivatingCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  btCollisionAlgorithm *swig_b0 = (btCollisionAlgorithm *)swig_a->arg1;
  result = (btScalar)(swig_b0)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btActivatingCollisionAlgorithm_getAllContactManifolds(void *swig_v)
{
  btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  struct swigargs {
    btActivatingCollisionAlgorithm *arg1;
    btAlignedObjectArray< btPersistentManifold * > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActivatingCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btManifoldArray **)&swig_a->arg2; 
  
  btCollisionAlgorithm *swig_b0 = (btCollisionAlgorithm *)swig_a->arg1;
  (swig_b0)->getAllContactManifolds(*arg2);
  
}


void
_wrap_new_btSphereSphereCollisionAlgorithm__SWIG_0(void *swig_v)
{
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btPersistentManifold *arg1;
    btCollisionAlgorithmConstructionInfo *arg2;
    btCollisionObjectWrapper *arg3;
    btCollisionObjectWrapper *arg4;
    long : 0;
    btSphereSphereCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPersistentManifold **)&swig_a->arg1; 
  arg2 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm(arg1,(btCollisionAlgorithmConstructionInfo const &)*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  *(btSphereSphereCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_new_btSphereSphereCollisionAlgorithm__SWIG_1(void *swig_v)
{
  btCollisionAlgorithmConstructionInfo *arg1 = 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  struct swigargs {
    btCollisionAlgorithmConstructionInfo *arg1;
    long : 0;
    btSphereSphereCollisionAlgorithm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionAlgorithmConstructionInfo **)&swig_a->arg1; 
  
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm((btCollisionAlgorithmConstructionInfo const &)*arg1);
  *(btSphereSphereCollisionAlgorithm **)&swig_a->result = result; 
}


void
_wrap_btSphereSphereCollisionAlgorithm_processCollision(void *swig_v)
{
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  struct swigargs {
    btSphereSphereCollisionAlgorithm *arg1;
    btCollisionObjectWrapper *arg2;
    btCollisionObjectWrapper *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereSphereCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectWrapper **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
}


void
_wrap_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(void *swig_v)
{
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSphereSphereCollisionAlgorithm *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    btDispatcherInfo *arg4;
    btManifoldResult *arg5;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereSphereCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btDispatcherInfo **)&swig_a->arg4; 
  arg5 = *(btManifoldResult **)&swig_a->arg5; 
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btSphereSphereCollisionAlgorithm_getAllContactManifolds(void *swig_v)
{
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  struct swigargs {
    btSphereSphereCollisionAlgorithm *arg1;
    btAlignedObjectArray< btPersistentManifold * > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereSphereCollisionAlgorithm **)&swig_a->arg1; 
  arg2 = *(btManifoldArray **)&swig_a->arg2; 
  
  (arg1)->getAllContactManifolds(*arg2);
  
}


void
_wrap_delete_btSphereSphereCollisionAlgorithm(void *swig_v)
{
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  
  struct swigargs {
    btSphereSphereCollisionAlgorithm *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSphereSphereCollisionAlgorithm **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btCollisionConfiguration(void *swig_v)
{
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  
  struct swigargs {
    btCollisionConfiguration *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionConfiguration **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btCollisionConfiguration_getPersistentManifoldPool(void *swig_v)
{
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btCollisionConfiguration *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getPersistentManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btCollisionConfiguration_getCollisionAlgorithmPool(void *swig_v)
{
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btCollisionConfiguration *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getCollisionAlgorithmPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btCollisionConfiguration_getCollisionAlgorithmCreateFunc(void *swig_v)
{
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  struct swigargs {
    btCollisionConfiguration *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    btCollisionAlgorithmCreateFunc *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  *(btCollisionAlgorithmCreateFunc **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    btPoolAllocator *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btPoolAllocator **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_persistentManifoldPool = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (btPoolAllocator *) ((arg1)->m_persistentManifoldPool);
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    btPoolAllocator *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btPoolAllocator **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionAlgorithmPool = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (btPoolAllocator *) ((arg1)->m_collisionAlgorithmPool);
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_defaultMaxPersistentManifoldPoolSize = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_defaultMaxPersistentManifoldPoolSize);
  swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_defaultMaxCollisionAlgorithmPoolSize = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_defaultMaxCollisionAlgorithmPoolSize);
  swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_customCollisionAlgorithmMaxElementSize = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_customCollisionAlgorithmMaxElementSize);
  swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useEpaPenetrationAlgorithm = arg2;
  
}


void
_wrap_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useEpaPenetrationAlgorithm);
  swig_a->result = result; 
}


void
_wrap_new_btDefaultCollisionConstructionInfo(void *swig_v)
{
  btDefaultCollisionConstructionInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDefaultCollisionConstructionInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDefaultCollisionConstructionInfo *)new btDefaultCollisionConstructionInfo();
  *(btDefaultCollisionConstructionInfo **)&swig_a->result = result; 
}


void
_wrap_delete_btDefaultCollisionConstructionInfo(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btDefaultCollisionConfiguration__SWIG_0(void *swig_v)
{
  btDefaultCollisionConstructionInfo *arg1 = 0 ;
  btDefaultCollisionConfiguration *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConstructionInfo *arg1;
    long : 0;
    btDefaultCollisionConfiguration *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConstructionInfo **)&swig_a->arg1; 
  
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration((btDefaultCollisionConstructionInfo const &)*arg1);
  *(btDefaultCollisionConfiguration **)&swig_a->result = result; 
}


void
_wrap_new_btDefaultCollisionConfiguration__SWIG_1(void *swig_v)
{
  btDefaultCollisionConfiguration *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDefaultCollisionConfiguration *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration();
  *(btDefaultCollisionConfiguration **)&swig_a->result = result; 
}


void
_wrap_delete_btDefaultCollisionConfiguration(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDefaultCollisionConfiguration_getPersistentManifoldPool(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getPersistentManifoldPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmPool(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    long : 0;
    btPoolAllocator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btPoolAllocator *)(arg1)->getCollisionAlgorithmPool();
  *(btPoolAllocator **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConfiguration_getSimplexSolver(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btVoronoiSimplexSolver *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    long : 0;
    btVoronoiSimplexSolver *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  result = (btVoronoiSimplexSolver *)(arg1)->getSimplexSolver();
  *(btVoronoiSimplexSolver **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    btCollisionAlgorithmCreateFunc *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  *(btCollisionAlgorithmCreateFunc **)&swig_a->result = result; 
}


void
_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->setConvexConvexMultipointIterations(arg2,arg3);
  
}


void
_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setConvexConvexMultipointIterations(arg2);
  
}


void
_wrap_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  (arg1)->setConvexConvexMultipointIterations();
  
}


void
_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->setPlaneConvexMultipointIterations(arg2,arg3);
  
}


void
_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setPlaneConvexMultipointIterations(arg2);
  
}


void
_wrap_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2(void *swig_v)
{
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  struct swigargs {
    btDefaultCollisionConfiguration *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultCollisionConfiguration **)&swig_a->arg1; 
  
  (arg1)->setPlaneConvexMultipointIterations();
  
}


void
_wrap_btSimpleBroadphaseProxy_m_nextFree_set(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_nextFree = arg2;
  
}


void
_wrap_btSimpleBroadphaseProxy_m_nextFree_get(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_nextFree);
  swig_a->result = result; 
}


void
_wrap_new_btSimpleBroadphaseProxy__SWIG_0(void *swig_v)
{
  btSimpleBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSimpleBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy();
  *(btSimpleBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_new_btSimpleBroadphaseProxy__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  short arg5 ;
  short arg6 ;
  void *arg7 = (void *) 0 ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    intgo arg3;
    void *arg4;
    short arg5;
    short arg6;
    void *arg7;
    long : 0;
    btSimpleBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = *(void **)&swig_a->arg4; 
  arg5 = (short)swig_a->arg5; 
  arg6 = (short)swig_a->arg6; 
  arg7 = *(void **)&swig_a->arg7; 
  
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(btSimpleBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_SetNextFree(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->SetNextFree(arg2);
  
}


void
_wrap_btSimpleBroadphaseProxy_GetNextFree(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  result = (int)((btSimpleBroadphaseProxy const *)arg1)->GetNextFree();
  swig_a->result = result; 
}


void
_wrap_delete_btSimpleBroadphaseProxy(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_clientObject(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_clientObject = arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_clientObject(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (void *) ((swig_b0)->m_clientObject);
  *(void **)&swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_collisionFilterGroup(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_collisionFilterGroup = arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_collisionFilterGroup(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  short result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (short) ((swig_b0)->m_collisionFilterGroup);
  swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_collisionFilterMask(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_collisionFilterMask = arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_collisionFilterMask(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  short result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (short) ((swig_b0)->m_collisionFilterMask);
  swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_multiSapParentProxy(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_multiSapParentProxy = arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_multiSapParentProxy(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (void *) ((swig_b0)->m_multiSapParentProxy);
  *(void **)&swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_uniqueId(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_uniqueId = arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_uniqueId(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (int) ((swig_b0)->m_uniqueId);
  swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_aabbMin(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_aabbMin = *arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_aabbMin(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (btVector3 *)& ((swig_b0)->m_aabbMin);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_SetbtSimpleBroadphaseProxy_M_aabbMax(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_aabbMax = *arg2;
  
}


void
_wrap_GetbtSimpleBroadphaseProxy_M_aabbMax(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (btVector3 *)& ((swig_b0)->m_aabbMax);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_getUid(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (int)((btBroadphaseProxy const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isPolyhedral(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isPolyhedral(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isConvex(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isNonMoving(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isNonMoving(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isConcave(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConcave(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isCompound(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isCompound(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isSoftBody(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isSoftBody(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isInfinite(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isInfinite(arg1);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphaseProxy_isConvex2d(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex2d(arg1);
  swig_a->result = result; 
}


void
_wrap_new_btSimpleBroadphase__SWIG_0(void *swig_v)
{
  int arg1 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btSimpleBroadphase *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    btOverlappingPairCache *arg2;
    long : 0;
    btSimpleBroadphase *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = *(btOverlappingPairCache **)&swig_a->arg2; 
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1,arg2);
  *(btSimpleBroadphase **)&swig_a->result = result; 
}


void
_wrap_new_btSimpleBroadphase__SWIG_1(void *swig_v)
{
  int arg1 ;
  btSimpleBroadphase *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    btSimpleBroadphase *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1);
  *(btSimpleBroadphase **)&swig_a->result = result; 
}


void
_wrap_new_btSimpleBroadphase__SWIG_2(void *swig_v)
{
  btSimpleBroadphase *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSimpleBroadphase *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase();
  *(btSimpleBroadphase **)&swig_a->result = result; 
}


void
_wrap_delete_btSimpleBroadphase(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSimpleBroadphase_aabbOverlap(void *swig_v)
{
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btSimpleBroadphaseProxy *arg2 = (btSimpleBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btSimpleBroadphaseProxy *arg1;
    btSimpleBroadphaseProxy *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphaseProxy **)&swig_a->arg1; 
  arg2 = *(btSimpleBroadphaseProxy **)&swig_a->arg2; 
  
  result = (bool)btSimpleBroadphase::aabbOverlap(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphase_createProxy(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
    void *arg5;
    short arg6;
    short arg7;
    btDispatcher *arg8;
    void *arg9;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  arg6 = (short)swig_a->arg6; 
  arg7 = (short)swig_a->arg7; 
  arg8 = *(btDispatcher **)&swig_a->arg8; 
  arg9 = *(void **)&swig_a->arg9; 
  
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btSimpleBroadphase_calculateOverlappingPairs(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->calculateOverlappingPairs(arg2);
  
}


void
_wrap_btSimpleBroadphase_destroyProxy(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->destroyProxy(arg2,arg3);
  
}


void
_wrap_btSimpleBroadphase_setAabb(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btDispatcher *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btDispatcher **)&swig_a->arg5; 
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btSimpleBroadphase_getAabb(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btSimpleBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
}


void
_wrap_btSimpleBroadphase_rayTest__SWIG_0(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btSimpleBroadphase_rayTest__SWIG_1(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btSimpleBroadphase_rayTest__SWIG_2(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btSimpleBroadphase_aabbTest(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseAabbCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseAabbCallback **)&swig_a->arg4; 
  
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_0(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_1(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)((btSimpleBroadphase const *)arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btSimpleBroadphase_testAabbOverlap(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSimpleBroadphase_getBroadphaseAabb(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btSimpleBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
}


void
_wrap_btSimpleBroadphase_printStats(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  
  (arg1)->printStats();
  
}


void
_wrap_btSimpleBroadphase_resetPool(void *swig_v)
{
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btSimpleBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  btBroadphaseInterface *swig_b0 = (btBroadphaseInterface *)swig_a->arg1;
  (swig_b0)->resetPool(arg2);
  
}


void
_wrap_btDbvtAabbMm_Center(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = ((btDbvtAabbMm const *)arg1)->Center();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btDbvtAabbMm_Lengths(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = ((btDbvtAabbMm const *)arg1)->Lengths();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btDbvtAabbMm_Extents(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = ((btDbvtAabbMm const *)arg1)->Extents();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btDbvtAabbMm_Mins(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btDbvtAabbMm const *)arg1)->Mins();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_Maxs(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btDbvtAabbMm const *)arg1)->Maxs();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_FromCE(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btDbvtAabbMm result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = btDbvtAabbMm::FromCE((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btDbvtAabbMm **)&swig_a->result = new btDbvtAabbMm(result); 
}


void
_wrap_btDbvtAabbMm_FromCR(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btDbvtAabbMm result;
  
  struct swigargs {
    btVector3 *arg1;
    float arg2;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = btDbvtAabbMm::FromCR((btVector3 const &)*arg1,arg2);
  *(btDbvtAabbMm **)&swig_a->result = new btDbvtAabbMm(result); 
}


void
_wrap_btDbvtAabbMm_FromMM(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btDbvtAabbMm result;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = btDbvtAabbMm::FromMM((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btDbvtAabbMm **)&swig_a->result = new btDbvtAabbMm(result); 
}


void
_wrap_btDbvtAabbMm_FromPoints__SWIG_0(void *swig_v)
{
  btVector3 *arg1 = (btVector3 *) 0 ;
  int arg2 ;
  btDbvtAabbMm result;
  
  struct swigargs {
    btVector3 *arg1;
    intgo arg2;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = btDbvtAabbMm::FromPoints((btVector3 const *)arg1,arg2);
  *(btDbvtAabbMm **)&swig_a->result = new btDbvtAabbMm(result); 
}


void
_wrap_btDbvtAabbMm_FromPoints__SWIG_1(void *swig_v)
{
  btVector3 **arg1 = (btVector3 **) 0 ;
  int arg2 ;
  btDbvtAabbMm result;
  
  struct swigargs {
    btVector3 **arg1;
    intgo arg2;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 ***)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = btDbvtAabbMm::FromPoints((btVector3 const **)arg1,arg2);
  *(btDbvtAabbMm **)&swig_a->result = new btDbvtAabbMm(result); 
}


void
_wrap_btDbvtAabbMm_Expand(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->Expand((btVector3 const &)*arg2);
  
}


void
_wrap_btDbvtAabbMm_SignedExpand(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->SignedExpand((btVector3 const &)*arg2);
  
}


void
_wrap_btDbvtAabbMm_Contain(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  
  result = (bool)((btDbvtAabbMm const *)arg1)->Contain((btDbvtAabbMm const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_Classify(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  int result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btVector3 *arg2;
    float arg3;
    intgo arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  result = (int)((btDbvtAabbMm const *)arg1)->Classify((btVector3 const &)*arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_ProjectMinimum(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btScalar result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btVector3 *arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  
  result = (btScalar)((btDbvtAabbMm const *)arg1)->ProjectMinimum((btVector3 const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Intersect__SWIG_0(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  
  result = (bool)Intersect((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_Intersect__SWIG_1(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btVector3 *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (bool)Intersect((btDbvtAabbMm const &)*arg1,(btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_Proximity(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  
  result = (btScalar)Proximity((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_Select(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btDbvtAabbMm *arg3 = 0 ;
  int result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    btDbvtAabbMm *arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  arg3 = *(btDbvtAabbMm **)&swig_a->arg3; 
  
  result = (int)Select((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2,(btDbvtAabbMm const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_Merge(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btDbvtAabbMm *arg3 = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    btDbvtAabbMm *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  arg3 = *(btDbvtAabbMm **)&swig_a->arg3; 
  
  Merge((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2,*arg3);
  
}


void
_wrap_NotEqual(void *swig_v)
{
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    btDbvtAabbMm *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  arg2 = *(btDbvtAabbMm **)&swig_a->arg2; 
  
  result = (bool)NotEqual((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_tMins(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->tMins();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btDbvtAabbMm_tMaxs(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->tMaxs();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_new_btDbvtAabbMm(void *swig_v)
{
  btDbvtAabbMm *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDbvtAabbMm *)new btDbvtAabbMm();
  *(btDbvtAabbMm **)&swig_a->result = result; 
}


void
_wrap_delete_btDbvtAabbMm(void *swig_v)
{
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  
  struct swigargs {
    btDbvtAabbMm *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtAabbMm **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDbvtNode_volume_set(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg2 = (btDbvtVolume *) 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btDbvtAabbMm *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btDbvtVolume **)&swig_a->arg2; 
  
  if (arg1) (arg1)->volume = *arg2;
  
}


void
_wrap_btDbvtNode_volume_get(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtVolume *result = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    btDbvtAabbMm *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (btDbvtVolume *)& ((arg1)->volume);
  *(btDbvtVolume **)&swig_a->result = result; 
}


void
_wrap_btDbvtNode_parent_set(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  if (arg1) (arg1)->parent = arg2;
  
}


void
_wrap_btDbvtNode_parent_get(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (btDbvtNode *) ((arg1)->parent);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_btDbvtNode_isleaf(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (bool)((btDbvtNode const *)arg1)->isleaf();
  swig_a->result = result; 
}


void
_wrap_btDbvtNode_isinternal(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (bool)((btDbvtNode const *)arg1)->isinternal();
  swig_a->result = result; 
}


void
_wrap_new_btDbvtNode(void *swig_v)
{
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDbvtNode *)new btDbvtNode();
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_delete_btDbvtNode(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SIMPLE_STACKSIZE_btDbvt(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDbvt::SIMPLE_STACKSIZE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DOUBLE_STACKSIZE_btDbvt(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDbvt::DOUBLE_STACKSIZE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btDbvt_m_root_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_root = arg2;
  
}


void
_wrap_btDbvt_m_root_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (btDbvtNode *) ((arg1)->m_root);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_btDbvt_m_free_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_free = arg2;
  
}


void
_wrap_btDbvt_m_free_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (btDbvtNode *) ((arg1)->m_free);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_btDbvt_m_lkhd_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lkhd = arg2;
  
}


void
_wrap_btDbvt_m_lkhd_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int result;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_lkhd);
  swig_a->result = result; 
}


void
_wrap_btDbvt_m_leaves_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_leaves = arg2;
  
}


void
_wrap_btDbvt_m_leaves_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int result;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_leaves);
  swig_a->result = result; 
}


void
_wrap_btDbvt_m_opath_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  unsigned int arg2 ;
  
  struct swigargs {
    btDbvt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_opath = arg2;
  
}


void
_wrap_btDbvt_m_opath_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (unsigned int) ((arg1)->m_opath);
  swig_a->result = result; 
}


void
_wrap_btDbvt_m_stkStack_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< sStkNN > *arg2 = (btAlignedObjectArray< sStkNN > *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btAlignedObjectArray< sStkNN > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btAlignedObjectArray< sStkNN > **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_stkStack = *arg2;
  
}


void
_wrap_btDbvt_m_stkStack_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< sStkNN > *result = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    btAlignedObjectArray< sStkNN > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (btAlignedObjectArray< sStkNN > *)& ((arg1)->m_stkStack);
  *(btAlignedObjectArray< sStkNN > **)&swig_a->result = result; 
}


void
_wrap_btDbvt_m_rayTestStack_set(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *arg2 = (btAlignedObjectArray< btDbvtNode const * > *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btAlignedObjectArray< btDbvtNode const * > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btAlignedObjectArray< btDbvtNode const * > **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rayTestStack = *arg2;
  
}


void
_wrap_btDbvt_m_rayTestStack_get(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *result = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    btAlignedObjectArray< btDbvtNode const * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (btAlignedObjectArray< btDbvtNode const * > *)& ((arg1)->m_rayTestStack);
  *(btAlignedObjectArray< btDbvtNode const * > **)&swig_a->result = result; 
}


void
_wrap_new_btDbvt(void *swig_v)
{
  btDbvt *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDbvt *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDbvt *)new btDbvt();
  *(btDbvt **)&swig_a->result = result; 
}


void
_wrap_delete_btDbvt(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDbvt_clear(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  (arg1)->clear();
  
}


void
_wrap_btDbvt_empty(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvt *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  result = (bool)((btDbvt const *)arg1)->empty();
  swig_a->result = result; 
}


void
_wrap_btDbvt_optimizeBottomUp(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  (arg1)->optimizeBottomUp();
  
}


void
_wrap_btDbvt_optimizeTopDown__SWIG_0(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->optimizeTopDown(arg2);
  
}


void
_wrap_btDbvt_optimizeTopDown__SWIG_1(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  
  (arg1)->optimizeTopDown();
  
}


void
_wrap_btDbvt_optimizeIncremental(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvt *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->optimizeIncremental(arg2);
  
}


void
_wrap_btDbvt_insert(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtVolume *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtAabbMm *arg2;
    void *arg3;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtVolume **)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  
  result = (btDbvtNode *)(arg1)->insert((btDbvtVolume const &)*arg2,arg3);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_btDbvt_update__SWIG_0(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  int arg3 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->update(arg2,arg3);
  
}


void
_wrap_btDbvt_update__SWIG_1(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  (arg1)->update(arg2);
  
}


void
_wrap_btDbvt_update__SWIG_2(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtAabbMm *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtVolume **)&swig_a->arg3; 
  
  (arg1)->update(arg2,*arg3);
  
}


void
_wrap_btDbvt_update__SWIG_3(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  bool result;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtAabbMm *arg3;
    btVector3 *arg4;
    float arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtVolume **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  result = (bool)(arg1)->update(arg2,*arg3,(btVector3 const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btDbvt_update__SWIG_4(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtAabbMm *arg3;
    btVector3 *arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtVolume **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (bool)(arg1)->update(arg2,*arg3,(btVector3 const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_btDbvt_update__SWIG_5(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btScalar arg4 ;
  bool result;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtAabbMm *arg3;
    float arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtVolume **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (bool)(arg1)->update(arg2,*arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btDbvt_remove(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  (arg1)->remove(arg2);
  
}


void
_wrap_btDbvt_write(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  IWriter *arg2 = (IWriter *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    IWriter *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(IWriter **)&swig_a->arg2; 
  
  ((btDbvt const *)arg1)->write(arg2);
  
}


void
_wrap_btDbvt_clone__SWIG_0(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvt *arg2 = 0 ;
  IClone *arg3 = (IClone *) 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvt *arg2;
    IClone *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvt **)&swig_a->arg2; 
  arg3 = *(IClone **)&swig_a->arg3; 
  
  ((btDbvt const *)arg1)->clone(*arg2,arg3);
  
}


void
_wrap_btDbvt_clone__SWIG_1(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvt *arg2 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvt *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvt **)&swig_a->arg2; 
  
  ((btDbvt const *)arg1)->clone(*arg2);
  
}


void
_wrap_btDbvt_maxdepth(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (int)btDbvt::maxdepth((btDbvtNode const *)arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvt_countLeaves(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtNode *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  
  result = (int)btDbvt::countLeaves((btDbvtNode const *)arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvt_extractLeaves(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *arg2 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btAlignedObjectArray< btDbvtNode const * > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btAlignedObjectArray< btDbvtNode const * > **)&swig_a->arg2; 
  
  btDbvt::extractLeaves((btDbvtNode const *)arg1,*arg2);
  
}


void
_wrap_btDbvt_benchmark(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  btDbvt::benchmark();
  
}


void
_wrap_btDbvt_enumNodes(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  ICollide *arg2 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    ICollide *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(ICollide **)&swig_a->arg2; 
  
  btDbvt::enumNodes((btDbvtNode const *)arg1,*arg2);
  
}


void
_wrap_btDbvt_enumLeaves(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  ICollide *arg2 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    ICollide *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(ICollide **)&swig_a->arg2; 
  
  btDbvt::enumLeaves((btDbvtNode const *)arg1,*arg2);
  
}


void
_wrap_btDbvt_collideTT(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtNode *arg3 = (btDbvtNode *) 0 ;
  ICollide *arg4 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtNode *arg3;
    ICollide *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtNode **)&swig_a->arg3; 
  arg4 = *(ICollide **)&swig_a->arg4; 
  
  (arg1)->collideTT((btDbvtNode const *)arg2,(btDbvtNode const *)arg3,*arg4);
  
}


void
_wrap_btDbvt_collideTTpersistentStack(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtNode *arg3 = (btDbvtNode *) 0 ;
  ICollide *arg4 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtNode *arg3;
    ICollide *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtNode **)&swig_a->arg3; 
  arg4 = *(ICollide **)&swig_a->arg4; 
  
  (arg1)->collideTTpersistentStack((btDbvtNode const *)arg2,(btDbvtNode const *)arg3,*arg4);
  
}


void
_wrap_btDbvt_collideTV(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  ICollide *arg4 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btDbvtAabbMm *arg3;
    ICollide *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btDbvtVolume **)&swig_a->arg3; 
  arg4 = *(ICollide **)&swig_a->arg4; 
  
  ((btDbvt const *)arg1)->collideTV((btDbvtNode const *)arg2,(btDbvtVolume const &)*arg3,*arg4);
  
}


void
_wrap_btDbvt_rayTest(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  ICollide *arg4 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    ICollide *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(ICollide **)&swig_a->arg4; 
  
  btDbvt::rayTest((btDbvtNode const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDbvt_rayTestInternal(void *swig_v)
{
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  unsigned int *arg6 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  ICollide *arg10 = 0 ;
  
  struct swigargs {
    btDbvt *arg1;
    btDbvtNode *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    unsigned int *arg6;
    float arg7;
    btVector3 *arg8;
    btVector3 *arg9;
    ICollide *arg10;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvt **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(unsigned int **)&swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  arg9 = *(btVector3 **)&swig_a->arg9; 
  arg10 = *(ICollide **)&swig_a->arg10; 
  
  ((btDbvt const *)arg1)->rayTestInternal((btDbvtNode const *)arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6,arg7,(btVector3 const &)*arg8,(btVector3 const &)*arg9,*arg10);
  
}


void
_wrap_btDbvt_collideKDOP(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  int arg4 ;
  ICollide *arg5 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btVector3 *arg2;
    btScalar *arg3;
    intgo arg4;
    ICollide *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(ICollide **)&swig_a->arg5; 
  
  btDbvt::collideKDOP((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,arg4,*arg5);
  
}


void
_wrap_btDbvt_collideOCL__SWIG_0(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  btVector3 *arg4 = 0 ;
  int arg5 ;
  ICollide *arg6 = 0 ;
  bool arg7 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btVector3 *arg2;
    btScalar *arg3;
    btVector3 *arg4;
    intgo arg5;
    ICollide *arg6;
    bool arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = *(ICollide **)&swig_a->arg6; 
  arg7 = (bool)swig_a->arg7; 
  
  btDbvt::collideOCL((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,(btVector3 const &)*arg4,arg5,*arg6,arg7);
  
}


void
_wrap_btDbvt_collideOCL__SWIG_1(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  btVector3 *arg4 = 0 ;
  int arg5 ;
  ICollide *arg6 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    btVector3 *arg2;
    btScalar *arg3;
    btVector3 *arg4;
    intgo arg5;
    ICollide *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btScalar **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = *(ICollide **)&swig_a->arg6; 
  
  btDbvt::collideOCL((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,(btVector3 const &)*arg4,arg5,*arg6);
  
}


void
_wrap_btDbvt_collideTU(void *swig_v)
{
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  ICollide *arg2 = 0 ;
  
  struct swigargs {
    btDbvtNode *arg1;
    ICollide *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtNode **)&swig_a->arg1; 
  arg2 = *(ICollide **)&swig_a->arg2; 
  
  btDbvt::collideTU((btDbvtNode const *)arg1,*arg2);
  
}


void
_wrap_btDbvt_nearest(void *swig_v)
{
  int *arg1 = (int *) 0 ;
  btDbvt::sStkNPS *arg2 = (btDbvt::sStkNPS *) 0 ;
  btScalar arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  struct swigargs {
    int *arg1;
    btDbvt::sStkNPS *arg2;
    float arg3;
    intgo arg4;
    intgo arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(int **)&swig_a->arg1; 
  arg2 = *(btDbvt::sStkNPS **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  
  result = (int)btDbvt::nearest((int const *)arg1,(btDbvt::sStkNPS const *)arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_btDbvt_allocate(void *swig_v)
{
  btAlignedObjectArray< int > *arg1 = 0 ;
  btAlignedObjectArray< sStkNPS > *arg2 = 0 ;
  sStkNPS *arg3 = 0 ;
  int result;
  
  struct swigargs {
    btAlignedObjectArray< int > *arg1;
    btAlignedObjectArray< sStkNPS > *arg2;
    sStkNPS *arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAlignedObjectArray< int > **)&swig_a->arg1; 
  arg2 = *(btAlignedObjectArray< sStkNPS > **)&swig_a->arg2; 
  arg3 = *(sStkNPS **)&swig_a->arg3; 
  
  result = (int)btDbvt::allocate(*arg1,*arg2,(sStkNPS const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_leaf_set(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    btDbvtNode *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(btDbvtNode **)&swig_a->arg2; 
  
  if (arg1) (arg1)->leaf = arg2;
  
}


void
_wrap_btDbvtProxy_leaf_get(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    btDbvtNode *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  result = (btDbvtNode *) ((arg1)->leaf);
  *(btDbvtNode **)&swig_a->result = result; 
}


void
_wrap_btDbvtProxy_links_set(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **arg2 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    btDbvtProxy *(*arg2)[2];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(btDbvtProxy ***)&swig_a->arg2; 
  
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->links;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
  
}


void
_wrap_btDbvtProxy_links_get(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    btDbvtProxy *(*result)[2];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->links);
  *(btDbvtProxy ***)&swig_a->result = result; 
}


void
_wrap_btDbvtProxy_stage_set(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->stage = arg2;
  
}


void
_wrap_btDbvtProxy_stage_get(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  result = (int) ((arg1)->stage);
  swig_a->result = result; 
}


void
_wrap_new_btDbvtProxy(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btDbvtProxy *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    void *arg3;
    short arg4;
    short arg5;
    long : 0;
    btDbvtProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  arg5 = (short)swig_a->arg5; 
  
  result = (btDbvtProxy *)new btDbvtProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  *(btDbvtProxy **)&swig_a->result = result; 
}


void
_wrap_delete_btDbvtProxy(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtDbvtProxy_M_clientObject(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_clientObject = arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_clientObject(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (void *) ((swig_b0)->m_clientObject);
  *(void **)&swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_collisionFilterGroup(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_collisionFilterGroup = arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_collisionFilterGroup(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  short result;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (short) ((swig_b0)->m_collisionFilterGroup);
  swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_collisionFilterMask(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  short arg2 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = (short)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_collisionFilterMask = arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_collisionFilterMask(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  short result;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (short) ((swig_b0)->m_collisionFilterMask);
  swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_multiSapParentProxy(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_multiSapParentProxy = arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_multiSapParentProxy(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (void *) ((swig_b0)->m_multiSapParentProxy);
  *(void **)&swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_uniqueId(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_uniqueId = arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_uniqueId(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (int) ((swig_b0)->m_uniqueId);
  swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_aabbMin(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_aabbMin = *arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_aabbMin(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (btVector3 *)& ((swig_b0)->m_aabbMin);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_SetbtDbvtProxy_M_aabbMax(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_aabbMax = *arg2;
  
}


void
_wrap_GetbtDbvtProxy_M_aabbMax(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (btVector3 *)& ((swig_b0)->m_aabbMax);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btDbvtProxy_getUid(void *swig_v)
{
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtProxy *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtProxy **)&swig_a->arg1; 
  
  btBroadphaseProxy *swig_b0 = (btBroadphaseProxy *)swig_a->arg1;
  result = (int)((btBroadphaseProxy const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isPolyhedral(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isPolyhedral(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isConvex(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isNonMoving(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isNonMoving(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isConcave(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConcave(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isCompound(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isCompound(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isSoftBody(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isSoftBody(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isInfinite(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isInfinite(arg1);
  swig_a->result = result; 
}


void
_wrap_btDbvtProxy_isConvex2d(void *swig_v)
{
  int arg1 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (bool)btBroadphaseProxy::isConvex2d(arg1);
  swig_a->result = result; 
}


void
_wrap_DYNAMIC_SET_btDbvtBroadphase(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDbvtBroadphase::DYNAMIC_SET;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FIXED_SET_btDbvtBroadphase(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDbvtBroadphase::FIXED_SET;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STAGECOUNT_btDbvtBroadphase(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btDbvtBroadphase::STAGECOUNT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btDbvtBroadphase_m_sets_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDbvt (*arg2)[2];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDbvt **)&swig_a->arg2; 
  
  {
    size_t ii;
    btDbvt *b = (btDbvt *) arg1->m_sets;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvt *) arg2 + ii);
  }
  
}


void
_wrap_btDbvtBroadphase_m_sets_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    btDbvt (*result)[2];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btDbvt *)(btDbvt *) ((arg1)->m_sets);
  *(btDbvt **)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_stageRoots_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDbvtProxy *(*arg2)[btDbvtBroadphase::STAGECOUNT+1];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDbvtProxy ***)&swig_a->arg2; 
  
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->m_stageRoots;
    for (ii = 0; ii < (size_t)btDbvtBroadphase::STAGECOUNT+1; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
  
}


void
_wrap_btDbvtBroadphase_m_stageRoots_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    btDbvtProxy *(*result)[btDbvtBroadphase::STAGECOUNT+1];
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->m_stageRoots);
  *(btDbvtProxy ***)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_paircache_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btOverlappingPairCache *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btOverlappingPairCache **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_paircache = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_paircache_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *) ((arg1)->m_paircache);
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_prediction_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_prediction = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_prediction_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_prediction);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_stageCurrent_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_stageCurrent = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_stageCurrent_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_stageCurrent);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_fupdates_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_fupdates = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_fupdates_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_fupdates);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_dupdates_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dupdates = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_dupdates_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_dupdates);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_cupdates_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_cupdates = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_cupdates_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_cupdates);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_newpairs_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_newpairs = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_newpairs_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_newpairs);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_fixedleft_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_fixedleft = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_fixedleft_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_fixedleft);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_updates_call_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_updates_call = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_updates_call_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (unsigned int) ((arg1)->m_updates_call);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_updates_done_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (unsigned int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_updates_done = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_updates_done_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (unsigned int) ((arg1)->m_updates_done);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_updates_ratio_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_updates_ratio = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_updates_ratio_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_updates_ratio);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_pid_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_pid = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_pid_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_pid);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_cid_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_cid = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_cid_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_cid);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_gid_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_gid = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_gid_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_gid);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_releasepaircache_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_releasepaircache = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_releasepaircache_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_releasepaircache);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_deferedcollide_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_deferedcollide = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_deferedcollide_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_deferedcollide);
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_m_needcleanup_set(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_needcleanup = arg2;
  
}


void
_wrap_btDbvtBroadphase_m_needcleanup_get(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_needcleanup);
  swig_a->result = result; 
}


void
_wrap_new_btDbvtBroadphase__SWIG_0(void *swig_v)
{
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDbvtBroadphase *result = 0 ;
  
  struct swigargs {
    btOverlappingPairCache *arg1;
    long : 0;
    btDbvtBroadphase *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btOverlappingPairCache **)&swig_a->arg1; 
  
  result = (btDbvtBroadphase *)new btDbvtBroadphase(arg1);
  *(btDbvtBroadphase **)&swig_a->result = result; 
}


void
_wrap_new_btDbvtBroadphase__SWIG_1(void *swig_v)
{
  btDbvtBroadphase *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDbvtBroadphase *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDbvtBroadphase *)new btDbvtBroadphase();
  *(btDbvtBroadphase **)&swig_a->result = result; 
}


void
_wrap_delete_btDbvtBroadphase(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDbvtBroadphase_collide(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->collide(arg2);
  
}


void
_wrap_btDbvtBroadphase_optimize(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  (arg1)->optimize();
  
}


void
_wrap_btDbvtBroadphase_createProxy(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
    void *arg5;
    short arg6;
    short arg7;
    btDispatcher *arg8;
    void *arg9;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  arg6 = (short)swig_a->arg6; 
  arg7 = (short)swig_a->arg7; 
  arg8 = *(btDispatcher **)&swig_a->arg8; 
  arg9 = *(void **)&swig_a->arg9; 
  
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_destroyProxy(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->destroyProxy(arg2,arg3);
  
}


void
_wrap_btDbvtBroadphase_setAabb(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btDispatcher *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btDispatcher **)&swig_a->arg5; 
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btDbvtBroadphase_rayTest__SWIG_0(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btDbvtBroadphase_rayTest__SWIG_1(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btDbvtBroadphase_rayTest__SWIG_2(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDbvtBroadphase_aabbTest(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseAabbCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseAabbCallback **)&swig_a->arg4; 
  
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDbvtBroadphase_getAabb(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btDbvtBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
}


void
_wrap_btDbvtBroadphase_calculateOverlappingPairs(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->calculateOverlappingPairs(arg2);
  
}


void
_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_0(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_getOverlappingPairCache__SWIG_1(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)((btDbvtBroadphase const *)arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_getBroadphaseAabb(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btDbvtBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
}


void
_wrap_btDbvtBroadphase_printStats(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  (arg1)->printStats();
  
}


void
_wrap_btDbvtBroadphase_resetPool(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->resetPool(arg2);
  
}


void
_wrap_btDbvtBroadphase_performDeferredRemoval(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->performDeferredRemoval(arg2);
  
}


void
_wrap_btDbvtBroadphase_setVelocityPrediction(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setVelocityPrediction(arg2);
  
}


void
_wrap_btDbvtBroadphase_getVelocityPrediction(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  
  result = (btScalar)((btDbvtBroadphase const *)arg1)->getVelocityPrediction();
  swig_a->result = result; 
}


void
_wrap_btDbvtBroadphase_setAabbForceUpdate(void *swig_v)
{
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btDbvtBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btDispatcher *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDbvtBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btDispatcher **)&swig_a->arg5; 
  
  (arg1)->setAabbForceUpdate(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btDbvtBroadphase_benchmark(void *swig_v)
{
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btBroadphaseInterface *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btBroadphaseInterface **)&swig_a->arg1; 
  
  btDbvtBroadphase::benchmark(arg1);
  
}


void
_wrap_gOverlappingPairs_set(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    intgo arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  gOverlappingPairs = arg1;
  
}


void
_wrap_gOverlappingPairs_get(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)gOverlappingPairs;
  swig_a->result = result; 
}


void
_wrap_new_btAxisSweep3__SWIG_0(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  btAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    short arg3;
    btOverlappingPairCache *arg4;
    bool arg5;
    long : 0;
    btAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned short)swig_a->arg3; 
  arg4 = *(btOverlappingPairCache **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  *(btAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_btAxisSweep3__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  btAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    short arg3;
    btOverlappingPairCache *arg4;
    long : 0;
    btAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned short)swig_a->arg3; 
  arg4 = *(btOverlappingPairCache **)&swig_a->arg4; 
  
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  *(btAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_btAxisSweep3__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    short arg3;
    long : 0;
    btAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned short)swig_a->arg3; 
  
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  *(btAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_btAxisSweep3__SWIG_3(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    btAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(btAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_delete_btAxisSweep3(void *swig_v)
{
  btAxisSweep3 *arg1 = (btAxisSweep3 *) 0 ;
  
  struct swigargs {
    btAxisSweep3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAxisSweep3 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_bt32BitAxisSweep3__SWIG_0(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    intgo arg3;
    btOverlappingPairCache *arg4;
    bool arg5;
    long : 0;
    bt32BitAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  arg4 = *(btOverlappingPairCache **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  *(bt32BitAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_bt32BitAxisSweep3__SWIG_1(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    intgo arg3;
    btOverlappingPairCache *arg4;
    long : 0;
    bt32BitAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  arg4 = *(btOverlappingPairCache **)&swig_a->arg4; 
  
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  *(bt32BitAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_bt32BitAxisSweep3__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    intgo arg3;
    long : 0;
    bt32BitAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (unsigned int)swig_a->arg3; 
  
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  *(bt32BitAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_new_bt32BitAxisSweep3__SWIG_3(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    long : 0;
    bt32BitAxisSweep3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  *(bt32BitAxisSweep3 **)&swig_a->result = result; 
}


void
_wrap_delete_bt32BitAxisSweep3(void *swig_v)
{
  bt32BitAxisSweep3 *arg1 = (bt32BitAxisSweep3 *) 0 ;
  
  struct swigargs {
    bt32BitAxisSweep3 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(bt32BitAxisSweep3 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMultiSapBroadphase_getBroadphaseArray__SWIG_0(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btSapBroadphaseArray *result = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphaseInterface * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  result = (btSapBroadphaseArray *) &(arg1)->getBroadphaseArray();
  *(btSapBroadphaseArray **)&swig_a->result = result; 
}


void
_wrap_btMultiSapBroadphase_getBroadphaseArray__SWIG_1(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btSapBroadphaseArray *result = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    long : 0;
    btAlignedObjectArray< btBroadphaseInterface * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  result = (btSapBroadphaseArray *) &((btMultiSapBroadphase const *)arg1)->getBroadphaseArray();
  *(btSapBroadphaseArray **)&swig_a->result = result; 
}


void
_wrap_delete_btMultiSapBroadphase(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btMultiSapBroadphase_createProxy(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    intgo arg4;
    void *arg5;
    short arg6;
    short arg7;
    btDispatcher *arg8;
    void *arg9;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(void **)&swig_a->arg5; 
  arg6 = (short)swig_a->arg6; 
  arg7 = (short)swig_a->arg7; 
  arg8 = *(btDispatcher **)&swig_a->arg8; 
  arg9 = *(void **)&swig_a->arg9; 
  
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btMultiSapBroadphase_destroyProxy(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btDispatcher *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btDispatcher **)&swig_a->arg3; 
  
  (arg1)->destroyProxy(arg2,arg3);
  
}


void
_wrap_btMultiSapBroadphase_setAabb(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btDispatcher *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btDispatcher **)&swig_a->arg5; 
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
}


void
_wrap_btMultiSapBroadphase_getAabb(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  ((btMultiSapBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
}


void
_wrap_btMultiSapBroadphase_rayTest__SWIG_0(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btMultiSapBroadphase_rayTest__SWIG_1(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btMultiSapBroadphase_rayTest__SWIG_2(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseRayCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseRayCallback **)&swig_a->arg4; 
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btMultiSapBroadphase_addToChildBroadphase(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btMultiSapProxy *arg2 = (btMultiSapProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphaseInterface *arg4 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btMultiSapProxy *arg2;
    btBroadphaseProxy *arg3;
    btBroadphaseInterface *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btMultiSapProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  arg4 = *(btBroadphaseInterface **)&swig_a->arg4; 
  
  (arg1)->addToChildBroadphase(arg2,arg3,arg4);
  
}


void
_wrap_btMultiSapBroadphase_calculateOverlappingPairs(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->calculateOverlappingPairs(arg2);
  
}


void
_wrap_btMultiSapBroadphase_testAabbOverlap(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btBroadphaseProxy *arg2;
    btBroadphaseProxy *arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  arg3 = *(btBroadphaseProxy **)&swig_a->arg3; 
  
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btMultiSapBroadphase_getOverlappingPairCache__SWIG_0(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btMultiSapBroadphase_getOverlappingPairCache__SWIG_1(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  result = (btOverlappingPairCache *)((btMultiSapBroadphase const *)arg1)->getOverlappingPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btMultiSapBroadphase_getBroadphaseAabb(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btMultiSapBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
}


void
_wrap_btMultiSapBroadphase_buildTree(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->buildTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btMultiSapBroadphase_printStats(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  
  (arg1)->printStats();
  
}


void
_wrap_btMultiSapBroadphase_quicksort(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphasePairArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btAlignedObjectArray< btBroadphasePair > *arg2;
    intgo arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btBroadphasePairArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->quicksort(*arg2,arg3,arg4);
  
}


void
_wrap_btMultiSapBroadphase_resetPool(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btDispatcher *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btDispatcher **)&swig_a->arg2; 
  
  (arg1)->resetPool(arg2);
  
}


void
_wrap_btMultiSapBroadphase_aabbTest(void *swig_v)
{
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  struct swigargs {
    btMultiSapBroadphase *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btBroadphaseAabbCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMultiSapBroadphase **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btBroadphaseAabbCallback **)&swig_a->arg4; 
  
  btBroadphaseInterface *swig_b0 = (btBroadphaseInterface *)swig_a->arg1;
  (swig_b0)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDefaultMotionState_m_graphicsWorldTrans_set(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_graphicsWorldTrans = *arg2;
  
}


void
_wrap_btDefaultMotionState_m_graphicsWorldTrans_get(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_graphicsWorldTrans);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btDefaultMotionState_m_centerOfMassOffset_set(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_centerOfMassOffset = *arg2;
  
}


void
_wrap_btDefaultMotionState_m_centerOfMassOffset_get(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_centerOfMassOffset);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btDefaultMotionState_m_startWorldTrans_set(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_startWorldTrans = *arg2;
  
}


void
_wrap_btDefaultMotionState_m_startWorldTrans_get(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_startWorldTrans);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btDefaultMotionState_m_userPointer_set(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_userPointer = arg2;
  
}


void
_wrap_btDefaultMotionState_m_userPointer_get(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_userPointer);
  *(void **)&swig_a->result = result; 
}


void
_wrap_new_btDefaultMotionState__SWIG_0(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    long : 0;
    btDefaultMotionState *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1,(btTransform const &)*arg2);
  *(btDefaultMotionState **)&swig_a->result = result; 
}


void
_wrap_new_btDefaultMotionState__SWIG_1(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    long : 0;
    btDefaultMotionState *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1);
  *(btDefaultMotionState **)&swig_a->result = result; 
}


void
_wrap_new_btDefaultMotionState__SWIG_2(void *swig_v)
{
  btDefaultMotionState *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDefaultMotionState *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDefaultMotionState *)new btDefaultMotionState();
  *(btDefaultMotionState **)&swig_a->result = result; 
}


void
_wrap_btDefaultMotionState_getWorldTransform(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  ((btDefaultMotionState const *)arg1)->getWorldTransform(*arg2);
  
}


void
_wrap_btDefaultMotionState_setWorldTransform(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_delete_btDefaultMotionState(void *swig_v)
{
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  
  struct swigargs {
    btDefaultMotionState *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultMotionState **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DBG_NoDebug_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_NoDebug;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawWireframe_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawWireframe;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawAabb_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawAabb;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawFeaturesText_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawFeaturesText;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawContactPoints_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawContactPoints;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_NoDeactivation_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_NoDeactivation;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_NoHelpText_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_NoHelpText;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawText_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawText;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_ProfileTimings_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_ProfileTimings;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_EnableSatComparison_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_EnableSatComparison;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DisableBulletLCP_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DisableBulletLCP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_EnableCCD_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_EnableCCD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawConstraints_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawConstraints;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawConstraintLimits_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawConstraintLimits;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_FastWireframe_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_FastWireframe;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_DrawNormals_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_DrawNormals;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_DBG_MAX_DEBUG_DRAW_MODE_btIDebugDraw(void *swig_v)
{
  btIDebugDraw::DebugDrawModes result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btIDebugDraw::DBG_MAX_DEBUG_DRAW_MODE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btIDebugDraw(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btIDebugDraw_drawLine__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btIDebugDraw_drawLine__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btIDebugDraw_drawSphere__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    float arg2;
    btTransform *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->drawSphere(arg2,(btTransform const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btIDebugDraw_drawSphere__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    float arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btIDebugDraw_drawTriangle__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
    btVector3 *arg8;
    float arg9;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  arg9 = (btScalar)swig_a->arg9; 
  
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9);
  
}


void
_wrap_btIDebugDraw_drawTriangle__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  
}


void
_wrap_btIDebugDraw_drawContactPoint(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
    intgo arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btIDebugDraw_reportErrorWarning(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  (arg1)->reportErrorWarning((char const *)arg2);
  
}


void
_wrap_btIDebugDraw_draw3dText(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (char *)swig_a->arg3.p; 
  
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
  
}


void
_wrap_btIDebugDraw_setDebugMode(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setDebugMode(arg2);
  
}


void
_wrap_btIDebugDraw_getDebugMode(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int result;
  
  struct swigargs {
    btIDebugDraw *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  
  result = (int)((btIDebugDraw const *)arg1)->getDebugMode();
  swig_a->result = result; 
}


void
_wrap_btIDebugDraw_drawAabb(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->drawAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btIDebugDraw_drawTransform(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btTransform *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->drawTransform((btTransform const &)*arg2,arg3);
  
}


void
_wrap_btIDebugDraw_drawArc__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  btScalar arg11 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    btVector3 *arg9;
    bool arg10;
    float arg11;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  arg9 = *(btVector3 **)&swig_a->arg9; 
  arg10 = (bool)swig_a->arg10; 
  arg11 = (btScalar)swig_a->arg11; 
  
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10,arg11);
  
}


void
_wrap_btIDebugDraw_drawArc__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    btVector3 *arg9;
    bool arg10;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  arg9 = *(btVector3 **)&swig_a->arg9; 
  arg10 = (bool)swig_a->arg10; 
  
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10);
  
}


void
_wrap_btIDebugDraw_drawSpherePatch__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  bool arg12 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    float arg9;
    btVector3 *arg10;
    float arg11;
    bool arg12;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  arg9 = (btScalar)swig_a->arg9; 
  arg10 = *(btVector3 **)&swig_a->arg10; 
  arg11 = (btScalar)swig_a->arg11; 
  arg12 = (bool)swig_a->arg12; 
  
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11,arg12);
  
}


void
_wrap_btIDebugDraw_drawSpherePatch__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    float arg9;
    btVector3 *arg10;
    float arg11;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  arg9 = (btScalar)swig_a->arg9; 
  arg10 = *(btVector3 **)&swig_a->arg10; 
  arg11 = (btScalar)swig_a->arg11; 
  
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11);
  
}


void
_wrap_btIDebugDraw_drawSpherePatch__SWIG_2(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    float arg6;
    float arg7;
    float arg8;
    float arg9;
    btVector3 *arg10;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  arg9 = (btScalar)swig_a->arg9; 
  arg10 = *(btVector3 **)&swig_a->arg10; 
  
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10);
  
}


void
_wrap_btIDebugDraw_drawBox__SWIG_0(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btIDebugDraw_drawBox__SWIG_1(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btTransform *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_btIDebugDraw_drawCapsule(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    float arg2;
    float arg3;
    intgo arg4;
    btTransform *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->drawCapsule(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btIDebugDraw_drawCylinder(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    float arg2;
    float arg3;
    intgo arg4;
    btTransform *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->drawCylinder(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btIDebugDraw_drawCone(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    float arg2;
    float arg3;
    intgo arg4;
    btTransform *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->drawCone(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btIDebugDraw_drawPlane(void *swig_v)
{
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  struct swigargs {
    btIDebugDraw *arg1;
    btVector3 *arg2;
    float arg3;
    btTransform *arg4;
    btVector3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btIDebugDraw **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  (arg1)->drawPlane((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
  
}


void
_wrap_SOLVER_RANDMIZE_ORDER(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_RANDMIZE_ORDER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_FRICTION_SEPARATE(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_FRICTION_SEPARATE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_USE_WARMSTARTING(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_USE_WARMSTARTING;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_USE_2_FRICTION_DIRECTIONS(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_USE_2_FRICTION_DIRECTIONS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_ENABLE_FRICTION_DIRECTION_CACHING(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_ENABLE_FRICTION_DIRECTION_CACHING;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_CACHE_FRIENDLY(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_CACHE_FRIENDLY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_SIMD(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_SIMD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS(void *swig_v)
{
  btSolverMode result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btContactSolverInfoData_m_tau_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_tau = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_tau_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_tau);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_damping_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_damping_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_friction_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_friction_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_timeStep_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_timeStep = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_timeStep_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_timeStep);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_restitution_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_restitution_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_numIterations_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numIterations = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_numIterations_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numIterations);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_maxErrorReduction_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_maxErrorReduction_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxErrorReduction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_sor_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_sor = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_sor_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_sor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_erp_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_erp_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_erp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_erp2_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp2 = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_erp2_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_erp2);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_globalCfm_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_globalCfm = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_globalCfm_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_globalCfm);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_splitImpulse_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_splitImpulse_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_splitImpulse);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_splitImpulsePenetrationThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_splitImpulseTurnErp_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_splitImpulseTurnErp_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_splitImpulseTurnErp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_linearSlop_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearSlop = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_linearSlop_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_linearSlop);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_warmstartingFactor_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_warmstartingFactor_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_warmstartingFactor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_solverMode_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverMode = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_solverMode_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_solverMode);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_minimumSolverBatchSize_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_minimumSolverBatchSize_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_maxGyroscopicForce_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_maxGyroscopicForce_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxGyroscopicForce);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_singleAxisRollingFrictionThreshold);
  swig_a->result = result; 
}


void
_wrap_new_btContactSolverInfoData(void *swig_v)
{
  btContactSolverInfoData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btContactSolverInfoData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btContactSolverInfoData *)new btContactSolverInfoData();
  *(btContactSolverInfoData **)&swig_a->result = result; 
}


void
_wrap_delete_btContactSolverInfoData(void *swig_v)
{
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  
  struct swigargs {
    btContactSolverInfoData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btContactSolverInfo(void *swig_v)
{
  btContactSolverInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btContactSolverInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btContactSolverInfo *)new btContactSolverInfo();
  *(btContactSolverInfo **)&swig_a->result = result; 
}


void
_wrap_delete_btContactSolverInfo(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtContactSolverInfo_M_tau(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_tau = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_tau(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_tau);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_damping(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_damping = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_damping(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_damping);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_friction(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_friction = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_friction(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_friction);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_timeStep(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_timeStep = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_timeStep(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_timeStep);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_restitution(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_restitution = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_restitution(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_numIterations(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_numIterations = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_numIterations(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (int) ((swig_b0)->m_numIterations);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_maxErrorReduction(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_maxErrorReduction = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_maxErrorReduction(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_maxErrorReduction);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_sor(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_sor = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_sor(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_sor);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_erp(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_erp = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_erp(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_erp);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_erp2(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_erp2 = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_erp2(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_erp2);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_globalCfm(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_globalCfm = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_globalCfm(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_globalCfm);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_splitImpulse(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_splitImpulse = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_splitImpulse(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (int) ((swig_b0)->m_splitImpulse);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_splitImpulsePenetrationThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_splitImpulsePenetrationThreshold = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_splitImpulsePenetrationThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_splitImpulsePenetrationThreshold);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_splitImpulseTurnErp(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_splitImpulseTurnErp = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_splitImpulseTurnErp(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_splitImpulseTurnErp);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_linearSlop(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_linearSlop = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_linearSlop(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_linearSlop);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_warmstartingFactor(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_warmstartingFactor = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_warmstartingFactor(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_warmstartingFactor);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_solverMode(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_solverMode = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_solverMode(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (int) ((swig_b0)->m_solverMode);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_restingContactRestitutionThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_restingContactRestitutionThreshold = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_restingContactRestitutionThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (int) ((swig_b0)->m_restingContactRestitutionThreshold);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_minimumSolverBatchSize(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_minimumSolverBatchSize = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_minimumSolverBatchSize(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (int) ((swig_b0)->m_minimumSolverBatchSize);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_maxGyroscopicForce(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_maxGyroscopicForce = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_maxGyroscopicForce(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_maxGyroscopicForce);
  swig_a->result = result; 
}


void
_wrap_SetbtContactSolverInfo_M_singleAxisRollingFrictionThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_singleAxisRollingFrictionThreshold = arg2;
  
}


void
_wrap_GetbtContactSolverInfo_M_singleAxisRollingFrictionThreshold(void *swig_v)
{
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btContactSolverInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfo **)&swig_a->arg1; 
  
  btContactSolverInfoData *swig_b0 = (btContactSolverInfoData *)swig_a->arg1;
  result = (btScalar) ((swig_b0)->m_singleAxisRollingFrictionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_tau_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_tau = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_tau_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_tau);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_damping_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_damping_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_friction_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_friction_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_timeStep_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_timeStep = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_timeStep_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_timeStep);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_restitution_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_restitution_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_maxErrorReduction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_sor_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_sor = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_sor_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_sor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_erp_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_erp_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_erp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_erp2_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp2 = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_erp2_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_erp2);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_globalCfm_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_globalCfm = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_globalCfm_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_globalCfm);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_splitImpulsePenetrationThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_splitImpulseTurnErp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_linearSlop_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearSlop = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_linearSlop_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_linearSlop);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_warmstartingFactor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_maxGyroscopicForce);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_singleAxisRollingFrictionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_numIterations_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numIterations = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_numIterations_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numIterations);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_solverMode_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverMode = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_solverMode_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_solverMode);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulse_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
}


void
_wrap_btContactSolverInfoDoubleData_m_splitImpulse_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_splitImpulse);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoDoubleData_m_padding_set(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btContactSolverInfoDoubleData_m_padding_get(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btContactSolverInfoDoubleData(void *swig_v)
{
  btContactSolverInfoDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btContactSolverInfoDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btContactSolverInfoDoubleData *)new btContactSolverInfoDoubleData();
  *(btContactSolverInfoDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btContactSolverInfoDoubleData(void *swig_v)
{
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  
  struct swigargs {
    btContactSolverInfoDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btContactSolverInfoFloatData_m_tau_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_tau = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_tau_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_tau);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_damping_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_damping_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_friction_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_friction_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_timeStep_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_timeStep = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_timeStep_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_timeStep);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_restitution_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_restitution_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_maxErrorReduction_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_maxErrorReduction_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_maxErrorReduction);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_sor_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_sor = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_sor_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_sor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_erp_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_erp_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_erp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_erp2_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_erp2 = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_erp2_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_erp2);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_globalCfm_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_globalCfm = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_globalCfm_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_globalCfm);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_splitImpulsePenetrationThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_splitImpulseTurnErp);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_linearSlop_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearSlop = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_linearSlop_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_linearSlop);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_warmstartingFactor_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_warmstartingFactor_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_warmstartingFactor);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_maxGyroscopicForce);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_singleAxisRollingFrictionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_numIterations_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_numIterations = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_numIterations_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_numIterations);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_solverMode_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverMode = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_solverMode_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_solverMode);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulse_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
}


void
_wrap_btContactSolverInfoFloatData_m_splitImpulse_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_splitImpulse);
  swig_a->result = result; 
}


void
_wrap_btContactSolverInfoFloatData_m_padding_set(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btContactSolverInfoFloatData_m_padding_get(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btContactSolverInfoFloatData(void *swig_v)
{
  btContactSolverInfoFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btContactSolverInfoFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btContactSolverInfoFloatData *)new btContactSolverInfoFloatData();
  *(btContactSolverInfoFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btContactSolverInfoFloatData(void *swig_v)
{
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  
  struct swigargs {
    btContactSolverInfoFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btContactSolverInfoFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_SIMPLE_DYNAMICS_WORLD(void *swig_v)
{
  btDynamicsWorldType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SIMPLE_DYNAMICS_WORLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_DISCRETE_DYNAMICS_WORLD(void *swig_v)
{
  btDynamicsWorldType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_DISCRETE_DYNAMICS_WORLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONTINUOUS_DYNAMICS_WORLD(void *swig_v)
{
  btDynamicsWorldType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONTINUOUS_DYNAMICS_WORLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SOFT_RIGID_DYNAMICS_WORLD(void *swig_v)
{
  btDynamicsWorldType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SOFT_RIGID_DYNAMICS_WORLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_GPU_DYNAMICS_WORLD(void *swig_v)
{
  btDynamicsWorldType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_GPU_DYNAMICS_WORLD;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btDynamicsWorld(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDynamicsWorld_stepSimulation__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    float arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_stepSimulation__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_stepSimulation__SWIG_2(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    float arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (int)(arg1)->stepSimulation(arg2);
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_debugDrawWorld(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->debugDrawWorld();
  
}


void
_wrap_btDynamicsWorld_addConstraint__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btTypedConstraint *arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  (arg1)->addConstraint(arg2,arg3);
  
}


void
_wrap_btDynamicsWorld_addConstraint__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->addConstraint(arg2);
  
}


void
_wrap_btDynamicsWorld_removeConstraint(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->removeConstraint(arg2);
  
}


void
_wrap_btDynamicsWorld_addAction(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addAction(arg2);
  
}


void
_wrap_btDynamicsWorld_removeAction(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeAction(arg2);
  
}


void
_wrap_btDynamicsWorld_setGravity(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
}


void
_wrap_btDynamicsWorld_getGravity(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = ((btDynamicsWorld const *)arg1)->getGravity();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btDynamicsWorld_synchronizeMotionStates(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->synchronizeMotionStates();
  
}


void
_wrap_btDynamicsWorld_addRigidBody__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->addRigidBody(arg2);
  
}


void
_wrap_btDynamicsWorld_addRigidBody__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btRigidBody *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
}


void
_wrap_btDynamicsWorld_removeRigidBody(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->removeRigidBody(arg2);
  
}


void
_wrap_btDynamicsWorld_setConstraintSolver(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btConstraintSolver *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConstraintSolver **)&swig_a->arg2; 
  
  (arg1)->setConstraintSolver(arg2);
  
}


void
_wrap_btDynamicsWorld_getConstraintSolver(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btConstraintSolver *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  *(btConstraintSolver **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getNumConstraints(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (int)((btDynamicsWorld const *)arg1)->getNumConstraints();
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getConstraint__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getConstraint__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTypedConstraint *)((btDynamicsWorld const *)arg1)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getWorldType(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (btDynamicsWorldType)((btDynamicsWorld const *)arg1)->getWorldType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btDynamicsWorld_clearForces(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->clearForces();
  
}


void
_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
    bool arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  (arg1)->setInternalTickCallback(arg2,arg3,arg4);
  
}


void
_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  
  (arg1)->setInternalTickCallback(arg2,arg3);
  
}


void
_wrap_btDynamicsWorld_setInternalTickCallback__SWIG_2(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btInternalTickCallback arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  
  (arg1)->setInternalTickCallback(arg2);
  
}


void
_wrap_btDynamicsWorld_setWorldUserInfo(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->setWorldUserInfo(arg2);
  
}


void
_wrap_btDynamicsWorld_getWorldUserInfo(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (void *)((btDynamicsWorld const *)arg1)->getWorldUserInfo();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getSolverInfo(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btContactSolverInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (btContactSolverInfo *) &(arg1)->getSolverInfo();
  *(btContactSolverInfo **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_addVehicle(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addVehicle(arg2);
  
}


void
_wrap_btDynamicsWorld_removeVehicle(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeVehicle(arg2);
  
}


void
_wrap_btDynamicsWorld_addCharacter(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addCharacter(arg2);
  
}


void
_wrap_btDynamicsWorld_removeCharacter(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeCharacter(arg2);
  
}


void
_wrap_btDynamicsWorld_setBroadphase(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btBroadphaseInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->setBroadphase(arg2);
  
}


void
_wrap_btDynamicsWorld_getBroadphase__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btBroadphaseInterface *)((btCollisionWorld const *)swig_b0)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getBroadphase__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btBroadphaseInterface *)(swig_b0)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getPairCache(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btOverlappingPairCache *)(swig_b0)->getPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getDispatcher__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btDispatcher *)(swig_b0)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getDispatcher__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btDispatcher *)((btCollisionWorld const *)swig_b0)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_updateSingleAabb(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->updateSingleAabb(arg2);
  
}


void
_wrap_btDynamicsWorld_updateAabbs(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->updateAabbs();
  
}


void
_wrap_btDynamicsWorld_computeOverlappingPairs(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->computeOverlappingPairs();
  
}


void
_wrap_btDynamicsWorld_setDebugDrawer(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->setDebugDrawer(arg2);
  
}


void
_wrap_btDynamicsWorld_getDebugDrawer(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btIDebugDraw *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btIDebugDraw *)(swig_b0)->getDebugDrawer();
  *(btIDebugDraw **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_debugDrawObject(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btTransform *arg2;
    btCollisionShape *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btDynamicsWorld_getNumCollisionObjects(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (int)((btCollisionWorld const *)swig_b0)->getNumCollisionObjects();
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_rayTest(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  ((btCollisionWorld const *)swig_b0)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDynamicsWorld_convexSweepTest__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  ((btCollisionWorld const *)swig_b0)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
  
}


void
_wrap_btDynamicsWorld_convexSweepTest__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  ((btCollisionWorld const *)swig_b0)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
  
}


void
_wrap_btDynamicsWorld_contactTest(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg3 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
    ContactResultCallback *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(ContactResultCallback **)&swig_a->arg3; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->contactTest(arg2,*arg3);
  
}


void
_wrap_btDynamicsWorld_contactPairTest(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    ContactResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(ContactResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->contactPairTest(arg2,arg3,*arg4);
  
}


void
_wrap_btDynamicsWorld_rayTestSingle(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  RayResultCallback *arg6 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObject *arg3;
    btCollisionShape *arg4;
    btTransform *arg5;
    RayResultCallback *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btCollisionShape **)&swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(RayResultCallback **)&swig_a->arg6; 
  
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
  
}


void
_wrap_btDynamicsWorld_rayTestSingleInternal(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObjectWrapper *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
  
}


void
_wrap_btDynamicsWorld_objectQuerySingle(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObject *arg4;
    btCollisionShape *arg5;
    btTransform *arg6;
    ConvexResultCallback *arg7;
    float arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObject **)&swig_a->arg4; 
  arg5 = *(btCollisionShape **)&swig_a->arg5; 
  arg6 = *(btTransform **)&swig_a->arg6; 
  arg7 = *(ConvexResultCallback **)&swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
  
}


void
_wrap_btDynamicsWorld_objectQuerySingleInternal(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObjectWrapper *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
  
}


void
_wrap_btDynamicsWorld_addCollisionObject__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->addCollisionObject(arg2,arg3,arg4);
  
}


void
_wrap_btDynamicsWorld_addCollisionObject__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->addCollisionObject(arg2,arg3);
  
}


void
_wrap_btDynamicsWorld_addCollisionObject__SWIG_2(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->addCollisionObject(arg2);
  
}


void
_wrap_btDynamicsWorld_getCollisionObjectArray__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btCollisionObjectArray *) &(swig_b0)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getCollisionObjectArray__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btCollisionObjectArray *) &((btCollisionWorld const *)swig_b0)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_removeCollisionObject(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->removeCollisionObject(arg2);
  
}


void
_wrap_btDynamicsWorld_performDiscreteCollisionDetection(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->performDiscreteCollisionDetection();
  
}


void
_wrap_btDynamicsWorld_getDispatchInfo__SWIG_0(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btDispatcherInfo *) &(swig_b0)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getDispatchInfo__SWIG_1(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (btDispatcherInfo *) &((btCollisionWorld const *)swig_b0)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_getForceUpdateAllAabbs(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  result = (bool)((btCollisionWorld const *)swig_b0)->getForceUpdateAllAabbs();
  swig_a->result = result; 
}


void
_wrap_btDynamicsWorld_setForceUpdateAllAabbs(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->setForceUpdateAllAabbs(arg2);
  
}


void
_wrap_btDynamicsWorld_serialize(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btCollisionWorld *swig_b0 = (btCollisionWorld *)swig_a->arg1;
  (swig_b0)->serialize(arg2);
  
}


void
_wrap_btDynamicsWorldDoubleData_m_solverInfo_set(void *swig_v)
{
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *arg2 = (btContactSolverInfoDoubleData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldDoubleData *arg1;
    btContactSolverInfoDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldDoubleData **)&swig_a->arg1; 
  arg2 = *(btContactSolverInfoDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverInfo = *arg2;
  
}


void
_wrap_btDynamicsWorldDoubleData_m_solverInfo_get(void *swig_v)
{
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *result = 0 ;
  
  struct swigargs {
    btDynamicsWorldDoubleData *arg1;
    long : 0;
    btContactSolverInfoDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldDoubleData **)&swig_a->arg1; 
  
  result = (btContactSolverInfoDoubleData *)& ((arg1)->m_solverInfo);
  *(btContactSolverInfoDoubleData **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorldDoubleData_m_gravity_set(void *swig_v)
{
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
}


void
_wrap_btDynamicsWorldDoubleData_m_gravity_get(void *swig_v)
{
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btDynamicsWorldDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_new_btDynamicsWorldDoubleData(void *swig_v)
{
  btDynamicsWorldDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDynamicsWorldDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDynamicsWorldDoubleData *)new btDynamicsWorldDoubleData();
  *(btDynamicsWorldDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btDynamicsWorldDoubleData(void *swig_v)
{
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDynamicsWorldFloatData_m_solverInfo_set(void *swig_v)
{
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *arg2 = (btContactSolverInfoFloatData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldFloatData *arg1;
    btContactSolverInfoFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldFloatData **)&swig_a->arg1; 
  arg2 = *(btContactSolverInfoFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverInfo = *arg2;
  
}


void
_wrap_btDynamicsWorldFloatData_m_solverInfo_get(void *swig_v)
{
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *result = 0 ;
  
  struct swigargs {
    btDynamicsWorldFloatData *arg1;
    long : 0;
    btContactSolverInfoFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldFloatData **)&swig_a->arg1; 
  
  result = (btContactSolverInfoFloatData *)& ((arg1)->m_solverInfo);
  *(btContactSolverInfoFloatData **)&swig_a->result = result; 
}


void
_wrap_btDynamicsWorldFloatData_m_gravity_set(void *swig_v)
{
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
}


void
_wrap_btDynamicsWorldFloatData_m_gravity_get(void *swig_v)
{
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btDynamicsWorldFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_new_btDynamicsWorldFloatData(void *swig_v)
{
  btDynamicsWorldFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btDynamicsWorldFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btDynamicsWorldFloatData *)new btDynamicsWorldFloatData();
  *(btDynamicsWorldFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btDynamicsWorldFloatData(void *swig_v)
{
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  
  struct swigargs {
    btDynamicsWorldFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorldFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btDiscreteDynamicsWorld(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btDiscreteDynamicsWorld *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btBroadphaseInterface *arg2;
    btConstraintSolver *arg3;
    btCollisionConfiguration *arg4;
    long : 0;
    btDiscreteDynamicsWorld *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  arg3 = *(btConstraintSolver **)&swig_a->arg3; 
  arg4 = *(btCollisionConfiguration **)&swig_a->arg4; 
  
  result = (btDiscreteDynamicsWorld *)new btDiscreteDynamicsWorld(arg1,arg2,arg3,arg4);
  *(btDiscreteDynamicsWorld **)&swig_a->result = result; 
}


void
_wrap_delete_btDiscreteDynamicsWorld(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    float arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_2(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    float arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (int)(arg1)->stepSimulation(arg2);
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_synchronizeMotionStates(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->synchronizeMotionStates();
  
}


void
_wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->synchronizeSingleMotionState(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btTypedConstraint *arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  (arg1)->addConstraint(arg2,arg3);
  
}


void
_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->addConstraint(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeConstraint(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->removeConstraint(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addAction(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addAction(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeAction(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeAction(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btSimulationIslandManager *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (btSimulationIslandManager *)(arg1)->getSimulationIslandManager();
  *(btSimulationIslandManager **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btSimulationIslandManager *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (btSimulationIslandManager *)((btDiscreteDynamicsWorld const *)arg1)->getSimulationIslandManager();
  *(btSimulationIslandManager **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getCollisionWorld(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionWorld *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btCollisionWorld *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (btCollisionWorld *)(arg1)->getCollisionWorld();
  *(btCollisionWorld **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_setGravity(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getGravity(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = ((btDiscreteDynamicsWorld const *)arg1)->getGravity();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  (arg1)->addCollisionObject(arg2,arg3,arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  
  (arg1)->addCollisionObject(arg2,arg3);
  
}


void
_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->addCollisionObject(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->addRigidBody(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btRigidBody *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeRigidBody(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->removeRigidBody(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeCollisionObject(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->removeCollisionObject(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_debugDrawConstraint(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->debugDrawConstraint(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_debugDrawWorld(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->debugDrawWorld();
  
}


void
_wrap_btDiscreteDynamicsWorld_setConstraintSolver(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btConstraintSolver *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConstraintSolver **)&swig_a->arg2; 
  
  (arg1)->setConstraintSolver(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getConstraintSolver(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btConstraintSolver *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  *(btConstraintSolver **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getNumConstraints(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (int)((btDiscreteDynamicsWorld const *)arg1)->getNumConstraints();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTypedConstraint *)((btDiscreteDynamicsWorld const *)arg1)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getWorldType(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (btDynamicsWorldType)((btDiscreteDynamicsWorld const *)arg1)->getWorldType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btDiscreteDynamicsWorld_clearForces(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->clearForces();
  
}


void
_wrap_btDiscreteDynamicsWorld_applyGravity(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->applyGravity();
  
}


void
_wrap_btDiscreteDynamicsWorld_setNumTasks(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setNumTasks(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_updateVehicles(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateVehicles(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addVehicle(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addVehicle(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeVehicle(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeVehicle(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_addCharacter(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addCharacter(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_removeCharacter(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeCharacter(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setSynchronizeAllMotionStates(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getSynchronizeAllMotionStates();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setApplySpeculativeContactRestitution(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getApplySpeculativeContactRestitution();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_serialize(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  (arg1)->serialize(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setLatencyMotionStateInterpolation(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getLatencyMotionStateInterpolation();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_setInternalTickCallback__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
    bool arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2,arg3,arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_setInternalTickCallback__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2,arg3);
  
}


void
_wrap_btDiscreteDynamicsWorld_setInternalTickCallback__SWIG_2(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btInternalTickCallback arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_setWorldUserInfo(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setWorldUserInfo(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getWorldUserInfo(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (void *)((btDynamicsWorld const *)swig_b0)->getWorldUserInfo();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getSolverInfo(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btContactSolverInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (btContactSolverInfo *) &(swig_b0)->getSolverInfo();
  *(btContactSolverInfo **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_setBroadphase(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btBroadphaseInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setBroadphase(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getBroadphase__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btBroadphaseInterface *)((btCollisionWorld const *)swig_b1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getBroadphase__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btBroadphaseInterface *)(swig_b1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getPairCache(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btOverlappingPairCache *)(swig_b1)->getPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getDispatcher__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcher *)(swig_b1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getDispatcher__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcher *)((btCollisionWorld const *)swig_b1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_updateSingleAabb(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->updateSingleAabb(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_updateAabbs(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->updateAabbs();
  
}


void
_wrap_btDiscreteDynamicsWorld_computeOverlappingPairs(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->computeOverlappingPairs();
  
}


void
_wrap_btDiscreteDynamicsWorld_setDebugDrawer(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setDebugDrawer(arg2);
  
}


void
_wrap_btDiscreteDynamicsWorld_getDebugDrawer(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btIDebugDraw *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btIDebugDraw *)(swig_b1)->getDebugDrawer();
  *(btIDebugDraw **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_debugDrawObject(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btTransform *arg2;
    btCollisionShape *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_getNumCollisionObjects(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (int)((btCollisionWorld const *)swig_b1)->getNumCollisionObjects();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_rayTest(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_convexSweepTest__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
  
}


void
_wrap_btDiscreteDynamicsWorld_convexSweepTest__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
  
}


void
_wrap_btDiscreteDynamicsWorld_contactTest(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg3 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
    ContactResultCallback *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(ContactResultCallback **)&swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->contactTest(arg2,*arg3);
  
}


void
_wrap_btDiscreteDynamicsWorld_contactPairTest(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    ContactResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(ContactResultCallback **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->contactPairTest(arg2,arg3,*arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_rayTestSingle(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  RayResultCallback *arg6 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObject *arg3;
    btCollisionShape *arg4;
    btTransform *arg5;
    RayResultCallback *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btCollisionShape **)&swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(RayResultCallback **)&swig_a->arg6; 
  
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
  
}


void
_wrap_btDiscreteDynamicsWorld_rayTestSingleInternal(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObjectWrapper *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
  
}


void
_wrap_btDiscreteDynamicsWorld_objectQuerySingle(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObject *arg4;
    btCollisionShape *arg5;
    btTransform *arg6;
    ConvexResultCallback *arg7;
    float arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObject **)&swig_a->arg4; 
  arg5 = *(btCollisionShape **)&swig_a->arg5; 
  arg6 = *(btTransform **)&swig_a->arg6; 
  arg7 = *(ConvexResultCallback **)&swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
  
}


void
_wrap_btDiscreteDynamicsWorld_objectQuerySingleInternal(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObjectWrapper *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
  
}


void
_wrap_btDiscreteDynamicsWorld_getCollisionObjectArray__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btCollisionObjectArray *) &(swig_b1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getCollisionObjectArray__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btCollisionObjectArray *) &((btCollisionWorld const *)swig_b1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_performDiscreteCollisionDetection(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->performDiscreteCollisionDetection();
  
}


void
_wrap_btDiscreteDynamicsWorld_getDispatchInfo__SWIG_0(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcherInfo *) &(swig_b1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getDispatchInfo__SWIG_1(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcherInfo *) &((btCollisionWorld const *)swig_b1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_getForceUpdateAllAabbs(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (bool)((btCollisionWorld const *)swig_b1)->getForceUpdateAllAabbs();
  swig_a->result = result; 
}


void
_wrap_btDiscreteDynamicsWorld_setForceUpdateAllAabbs(void *swig_v)
{
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btDiscreteDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDiscreteDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setForceUpdateAllAabbs(arg2);
  
}


void
_wrap_new_btSimpleDynamicsWorld(void *swig_v)
{
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSimpleDynamicsWorld *result = 0 ;
  
  struct swigargs {
    btDispatcher *arg1;
    btBroadphaseInterface *arg2;
    btConstraintSolver *arg3;
    btCollisionConfiguration *arg4;
    long : 0;
    btSimpleDynamicsWorld *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDispatcher **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  arg3 = *(btConstraintSolver **)&swig_a->arg3; 
  arg4 = *(btCollisionConfiguration **)&swig_a->arg4; 
  
  result = (btSimpleDynamicsWorld *)new btSimpleDynamicsWorld(arg1,arg2,arg3,arg4);
  *(btSimpleDynamicsWorld **)&swig_a->result = result; 
}


void
_wrap_delete_btSimpleDynamicsWorld(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    float arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    float arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    float arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (int)(arg1)->stepSimulation(arg2);
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_setGravity(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getGravity(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  result = ((btSimpleDynamicsWorld const *)arg1)->getGravity();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->addRigidBody(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btRigidBody *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_removeRigidBody(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  (arg1)->removeRigidBody(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_debugDrawWorld(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->debugDrawWorld();
  
}


void
_wrap_btSimpleDynamicsWorld_addAction(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->addAction(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_removeAction(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  (arg1)->removeAction(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_removeCollisionObject(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  (arg1)->removeCollisionObject(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_updateAabbs(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->updateAabbs();
  
}


void
_wrap_btSimpleDynamicsWorld_synchronizeMotionStates(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->synchronizeMotionStates();
  
}


void
_wrap_btSimpleDynamicsWorld_setConstraintSolver(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btConstraintSolver *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConstraintSolver **)&swig_a->arg2; 
  
  (arg1)->setConstraintSolver(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getConstraintSolver(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btConstraintSolver *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  *(btConstraintSolver **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getWorldType(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  result = (btDynamicsWorldType)((btSimpleDynamicsWorld const *)arg1)->getWorldType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btSimpleDynamicsWorld_clearForces(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  (arg1)->clearForces();
  
}


void
_wrap_btSimpleDynamicsWorld_addConstraint__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btTypedConstraint *arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->addConstraint(arg2,arg3);
  
}


void
_wrap_btSimpleDynamicsWorld_addConstraint__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->addConstraint(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_removeConstraint(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->removeConstraint(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getNumConstraints(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (int)((btDynamicsWorld const *)swig_b0)->getNumConstraints();
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getConstraint__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (btTypedConstraint *)(swig_b0)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getConstraint__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (btTypedConstraint *)((btDynamicsWorld const *)swig_b0)->getConstraint(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_setInternalTickCallback__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
    bool arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2,arg3,arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_setInternalTickCallback__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btInternalTickCallback arg2;
    void *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2,arg3);
  
}


void
_wrap_btSimpleDynamicsWorld_setInternalTickCallback__SWIG_2(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btInternalTickCallback arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btInternalTickCallback *)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setInternalTickCallback(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_setWorldUserInfo(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->setWorldUserInfo(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getWorldUserInfo(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (void *)((btDynamicsWorld const *)swig_b0)->getWorldUserInfo();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getSolverInfo(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btContactSolverInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  result = (btContactSolverInfo *) &(swig_b0)->getSolverInfo();
  *(btContactSolverInfo **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_addVehicle(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->addVehicle(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_removeVehicle(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->removeVehicle(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_addCharacter(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->addCharacter(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_removeCharacter(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btActionInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btActionInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  (swig_b0)->removeCharacter(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_setBroadphase(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btBroadphaseInterface *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btBroadphaseInterface **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setBroadphase(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getBroadphase__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btBroadphaseInterface *)((btCollisionWorld const *)swig_b1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getBroadphase__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btBroadphaseInterface *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btBroadphaseInterface *)(swig_b1)->getBroadphase();
  *(btBroadphaseInterface **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getPairCache(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btOverlappingPairCache *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btOverlappingPairCache *)(swig_b1)->getPairCache();
  *(btOverlappingPairCache **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getDispatcher__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcher *)(swig_b1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getDispatcher__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btDispatcher *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcher *)((btCollisionWorld const *)swig_b1)->getDispatcher();
  *(btDispatcher **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_updateSingleAabb(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->updateSingleAabb(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_computeOverlappingPairs(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->computeOverlappingPairs();
  
}


void
_wrap_btSimpleDynamicsWorld_setDebugDrawer(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setDebugDrawer(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getDebugDrawer(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btIDebugDraw *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btIDebugDraw *)(swig_b1)->getDebugDrawer();
  *(btIDebugDraw **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_debugDrawObject(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btTransform *arg2;
    btCollisionShape *arg3;
    btVector3 *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_getNumCollisionObjects(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  int result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (int)((btCollisionWorld const *)swig_b1)->getNumCollisionObjects();
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_rayTest(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_convexSweepTest__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
  
}


void
_wrap_btSimpleDynamicsWorld_convexSweepTest__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  ConvexResultCallback *arg5 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btConvexShape *arg2;
    btTransform *arg3;
    btTransform *arg4;
    ConvexResultCallback *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btConvexShape **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  ((btCollisionWorld const *)swig_b1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
  
}


void
_wrap_btSimpleDynamicsWorld_contactTest(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg3 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
    ContactResultCallback *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(ContactResultCallback **)&swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->contactTest(arg2,*arg3);
  
}


void
_wrap_btSimpleDynamicsWorld_contactPairTest(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  ContactResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
    btCollisionObject *arg3;
    ContactResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(ContactResultCallback **)&swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->contactPairTest(arg2,arg3,*arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_rayTestSingle(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  RayResultCallback *arg6 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObject *arg3;
    btCollisionShape *arg4;
    btTransform *arg5;
    RayResultCallback *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObject **)&swig_a->arg3; 
  arg4 = *(btCollisionShape **)&swig_a->arg4; 
  arg5 = *(btTransform **)&swig_a->arg5; 
  arg6 = *(RayResultCallback **)&swig_a->arg6; 
  
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
  
}


void
_wrap_btSimpleDynamicsWorld_rayTestSingleInternal(void *swig_v)
{
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  RayResultCallback *arg4 = 0 ;
  
  struct swigargs {
    btTransform *arg1;
    btTransform *arg2;
    btCollisionObjectWrapper *arg3;
    RayResultCallback *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTransform **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btCollisionObjectWrapper **)&swig_a->arg3; 
  arg4 = *(RayResultCallback **)&swig_a->arg4; 
  
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_objectQuerySingle(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObject *arg4;
    btCollisionShape *arg5;
    btTransform *arg6;
    ConvexResultCallback *arg7;
    float arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObject **)&swig_a->arg4; 
  arg5 = *(btCollisionShape **)&swig_a->arg5; 
  arg6 = *(btTransform **)&swig_a->arg6; 
  arg7 = *(ConvexResultCallback **)&swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
  
}


void
_wrap_btSimpleDynamicsWorld_objectQuerySingleInternal(void *swig_v)
{
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  struct swigargs {
    btConvexShape *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btCollisionObjectWrapper *arg4;
    ConvexResultCallback *arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConvexShape **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btCollisionObjectWrapper **)&swig_a->arg4; 
  arg5 = *(ConvexResultCallback **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
  
}


void
_wrap_btSimpleDynamicsWorld_addCollisionObject__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
    short arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  arg4 = (short)swig_a->arg4; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->addCollisionObject(arg2,arg3,arg4);
  
}


void
_wrap_btSimpleDynamicsWorld_addCollisionObject__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
    short arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  arg3 = (short)swig_a->arg3; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->addCollisionObject(arg2,arg3);
  
}


void
_wrap_btSimpleDynamicsWorld_addCollisionObject__SWIG_2(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btCollisionObject *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->addCollisionObject(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_getCollisionObjectArray__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btCollisionObjectArray *) &(swig_b1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getCollisionObjectArray__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btAlignedObjectArray< btCollisionObject * > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btCollisionObjectArray *) &((btCollisionWorld const *)swig_b1)->getCollisionObjectArray();
  *(btCollisionObjectArray **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_performDiscreteCollisionDetection(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->performDiscreteCollisionDetection();
  
}


void
_wrap_btSimpleDynamicsWorld_getDispatchInfo__SWIG_0(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcherInfo *) &(swig_b1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getDispatchInfo__SWIG_1(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    btDispatcherInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (btDispatcherInfo *) &((btCollisionWorld const *)swig_b1)->getDispatchInfo();
  *(btDispatcherInfo **)&swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_getForceUpdateAllAabbs(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  bool result;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  result = (bool)((btCollisionWorld const *)swig_b1)->getForceUpdateAllAabbs();
  swig_a->result = result; 
}


void
_wrap_btSimpleDynamicsWorld_setForceUpdateAllAabbs(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->setForceUpdateAllAabbs(arg2);
  
}


void
_wrap_btSimpleDynamicsWorld_serialize(void *swig_v)
{
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btSimpleDynamicsWorld *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSimpleDynamicsWorld **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  btDynamicsWorld *swig_b0 = (btDynamicsWorld *)swig_a->arg1;
  btCollisionWorld *swig_b1 = (btCollisionWorld *)swig_b0;
  (swig_b1)->serialize(arg2);
  
}


void
_wrap_gDeactivationTime_set(void *swig_v)
{
  btScalar arg1 ;
  
  struct swigargs {
    float arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  
  gDeactivationTime = arg1;
  
}


void
_wrap_gDeactivationTime_get(void *swig_v)
{
  btScalar result;
  
  struct swigargs {
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btScalar)gDeactivationTime;
  swig_a->result = result; 
}


void
_wrap_gDisableDeactivation_set(void *swig_v)
{
  bool arg1 ;
  
  struct swigargs {
    bool arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (bool)swig_a->arg1; 
  
  gDisableDeactivation = arg1;
  
}


void
_wrap_gDisableDeactivation_get(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)gDisableDeactivation;
  swig_a->result = result; 
}


void
_wrap_BT_DISABLE_WORLD_GRAVITY(void *swig_v)
{
  btRigidBodyFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_DISABLE_WORLD_GRAVITY;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_ENABLE_GYROPSCOPIC_FORCE(void *swig_v)
{
  btRigidBodyFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_ENABLE_GYROPSCOPIC_FORCE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btRigidBody__SWIG_0(void *swig_v)
{
  btRigidBodyConstructionInfo *arg1 = 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btRigidBodyConstructionInfo *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyConstructionInfo **)&swig_a->arg1; 
  
  result = (btRigidBody *)new btRigidBody((btRigidBodyConstructionInfo const &)*arg1);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_new_btRigidBody__SWIG_1(void *swig_v)
{
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    float arg1;
    btMotionState *arg2;
    btCollisionShape *arg3;
    btVector3 *arg4;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = *(btMotionState **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3,(btVector3 const &)*arg4);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_new_btRigidBody__SWIG_2(void *swig_v)
{
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    float arg1;
    btMotionState *arg2;
    btCollisionShape *arg3;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = *(btMotionState **)&swig_a->arg2; 
  arg3 = *(btCollisionShape **)&swig_a->arg3; 
  
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_delete_btRigidBody(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btRigidBody_proceedToTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->proceedToTransform((btTransform const &)*arg2);
  
}


void
_wrap_btRigidBody_upcast__SWIG_0(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btRigidBody *)btRigidBody::upcast((btCollisionObject const *)arg1);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_upcast__SWIG_1(void *swig_v)
{
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btCollisionObject *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btCollisionObject **)&swig_a->arg1; 
  
  result = (btRigidBody *)btRigidBody::upcast(arg1);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_predictIntegratedTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->predictIntegratedTransform(arg2,*arg3);
  
}


void
_wrap_btRigidBody_saveKinematicState(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->saveKinematicState(arg2);
  
}


void
_wrap_btRigidBody_applyGravity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  (arg1)->applyGravity();
  
}


void
_wrap_btRigidBody_setGravity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getGravity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getGravity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setDamping(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setDamping(arg2,arg3);
  
}


void
_wrap_btRigidBody_getLinearDamping(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btScalar)((btRigidBody const *)arg1)->getLinearDamping();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getAngularDamping(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btScalar)((btRigidBody const *)arg1)->getAngularDamping();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getLinearSleepingThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btScalar)((btRigidBody const *)arg1)->getLinearSleepingThreshold();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getAngularSleepingThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btScalar)((btRigidBody const *)arg1)->getAngularSleepingThreshold();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_applyDamping(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->applyDamping(arg2);
  
}


void
_wrap_btRigidBody_getCollisionShape__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btCollisionShape *)((btRigidBody const *)arg1)->getCollisionShape();
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getCollisionShape__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btCollisionShape *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btCollisionShape *)(arg1)->getCollisionShape();
  *(btCollisionShape **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setMassProps(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setMassProps(arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btRigidBody_getLinearFactor(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearFactor();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setLinearFactor(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLinearFactor((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getInvMass(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btScalar)((btRigidBody const *)arg1)->getInvMass();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getInvInertiaTensorWorld(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btMatrix3x3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btMatrix3x3 *) &((btRigidBody const *)arg1)->getInvInertiaTensorWorld();
  *(btMatrix3x3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_integrateVelocities(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->integrateVelocities(arg2);
  
}


void
_wrap_btRigidBody_setCenterOfMassTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setCenterOfMassTransform((btTransform const &)*arg2);
  
}


void
_wrap_btRigidBody_applyCentralForce(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->applyCentralForce((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getTotalForce(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalForce();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getTotalTorque(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalTorque();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getInvInertiaDiagLocal(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getInvInertiaDiagLocal();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setInvInertiaDiagLocal(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setInvInertiaDiagLocal((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_setSleepingThresholds(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setSleepingThresholds(arg2,arg3);
  
}


void
_wrap_btRigidBody_applyTorque(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->applyTorque((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_applyForce(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->applyForce((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btRigidBody_applyCentralImpulse(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->applyCentralImpulse((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_applyTorqueImpulse(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->applyTorqueImpulse((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_applyImpulse(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btRigidBody_clearForces(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  (arg1)->clearForces();
  
}


void
_wrap_btRigidBody_updateInertiaTensor(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  (arg1)->updateInertiaTensor();
  
}


void
_wrap_btRigidBody_getCenterOfMassPosition(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getCenterOfMassPosition();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getOrientation(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btQuaternion result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btQuaternion *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = ((btRigidBody const *)arg1)->getOrientation();
  *(btQuaternion **)&swig_a->result = new btQuaternion(result); 
}


void
_wrap_btRigidBody_getCenterOfMassTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btTransform *) &((btRigidBody const *)arg1)->getCenterOfMassTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getLinearVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getAngularVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setLinearVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLinearVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_setAngularVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAngularVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getVelocityInLocalPoint(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = ((btRigidBody const *)arg1)->getVelocityInLocalPoint((btVector3 const &)*arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btRigidBody_translate(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->translate((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getAabb(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btRigidBody const *)arg1)->getAabb(*arg2,*arg3);
  
}


void
_wrap_btRigidBody_computeImpulseDenominator(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (btScalar)((btRigidBody const *)arg1)->computeImpulseDenominator((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_computeAngularImpulseDenominator(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btScalar)((btRigidBody const *)arg1)->computeAngularImpulseDenominator((btVector3 const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_updateDeactivation(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateDeactivation(arg2);
  
}


void
_wrap_btRigidBody_wantsSleeping(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (bool)(arg1)->wantsSleeping();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getBroadphaseProxy__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *)((btRigidBody const *)arg1)->getBroadphaseProxy();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getBroadphaseProxy__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseProxy();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setNewBroadphaseProxy(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btBroadphaseProxy *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  (arg1)->setNewBroadphaseProxy(arg2);
  
}


void
_wrap_btRigidBody_getMotionState__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btMotionState *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btMotionState *)(arg1)->getMotionState();
  *(btMotionState **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getMotionState__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btMotionState *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btMotionState *)((btRigidBody const *)arg1)->getMotionState();
  *(btMotionState **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setMotionState(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btMotionState *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btMotionState **)&swig_a->arg2; 
  
  (arg1)->setMotionState(arg2);
  
}


void
_wrap_btRigidBody_m_contactSolverType_set(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactSolverType = arg2;
  
}


void
_wrap_btRigidBody_m_contactSolverType_get(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_contactSolverType);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_m_frictionSolverType_set(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_frictionSolverType = arg2;
  
}


void
_wrap_btRigidBody_m_frictionSolverType_get(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_frictionSolverType);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setAngularFactor__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAngularFactor((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_setAngularFactor__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setAngularFactor(arg2);
  
}


void
_wrap_btRigidBody_getAngularFactor(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularFactor();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_isInWorld(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (bool)((btRigidBody const *)arg1)->isInWorld();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_checkCollideWithOverride(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    btCollisionObject *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  result = (bool)((btRigidBody const *)arg1)->checkCollideWithOverride((btCollisionObject const *)arg2);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_addConstraintRef(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->addConstraintRef(arg2);
  
}


void
_wrap_btRigidBody_removeConstraintRef(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTypedConstraint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTypedConstraint **)&swig_a->arg2; 
  
  (arg1)->removeConstraintRef(arg2);
  
}


void
_wrap_btRigidBody_getConstraintRef(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
    long : 0;
    btTypedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btTypedConstraint *)(arg1)->getConstraintRef(arg2);
  *(btTypedConstraint **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getNumConstraintRefs(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (int)((btRigidBody const *)arg1)->getNumConstraintRefs();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setFlags(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setFlags(arg2);
  
}


void
_wrap_btRigidBody_getFlags(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (int)((btRigidBody const *)arg1)->getFlags();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_computeGyroscopicForce(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = ((btRigidBody const *)arg1)->computeGyroscopicForce(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btRigidBody_calculateSerializeBufferSize(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  result = (int)((btRigidBody const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_serialize(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btRigidBody const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btRigidBody_serializeSingleObject(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btSerializer *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btSerializer **)&swig_a->arg2; 
  
  ((btRigidBody const *)arg1)->serializeSingleObject(arg2);
  
}


void
_wrap_btRigidBody_mergesSimulationIslands(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->mergesSimulationIslands();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getAnisotropicFriction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btVector3 *) &((btCollisionObject const *)swig_b0)->getAnisotropicFriction();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setAnisotropicFriction__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
  
}


void
_wrap_btRigidBody_setAnisotropicFriction__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setAnisotropicFriction((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_hasAnisotropicFriction__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->hasAnisotropicFriction(arg2);
  swig_a->result = result; 
}


void
_wrap_btRigidBody_hasAnisotropicFriction__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->hasAnisotropicFriction();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setContactProcessingThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setContactProcessingThreshold(arg2);
  
}


void
_wrap_btRigidBody_getContactProcessingThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getContactProcessingThreshold();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_isStaticObject(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->isStaticObject();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_isKinematicObject(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->isKinematicObject();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_isStaticOrKinematicObject(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->isStaticOrKinematicObject();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_hasContactResponse(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->hasContactResponse();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setCollisionShape(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btCollisionShape *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btCollisionShape **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setCollisionShape(arg2);
  
}


void
_wrap_btRigidBody_internalGetExtensionPointer(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (void *)((btCollisionObject const *)swig_b0)->internalGetExtensionPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_internalSetExtensionPointer(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->internalSetExtensionPointer(arg2);
  
}


void
_wrap_btRigidBody_getActivationState(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getActivationState();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setActivationState(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  ((btCollisionObject const *)swig_b0)->setActivationState(arg2);
  
}


void
_wrap_btRigidBody_setDeactivationTime(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setDeactivationTime(arg2);
  
}


void
_wrap_btRigidBody_getDeactivationTime(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getDeactivationTime();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_forceActivationState(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  ((btCollisionObject const *)swig_b0)->forceActivationState(arg2);
  
}


void
_wrap_btRigidBody_activate__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  ((btCollisionObject const *)swig_b0)->activate(arg2);
  
}


void
_wrap_btRigidBody_activate__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  ((btCollisionObject const *)swig_b0)->activate();
  
}


void
_wrap_btRigidBody_isActive(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->isActive();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setRestitution(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setRestitution(arg2);
  
}


void
_wrap_btRigidBody_getRestitution(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getRestitution();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setFriction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setFriction(arg2);
  
}


void
_wrap_btRigidBody_getFriction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getFriction();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setRollingFriction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setRollingFriction(arg2);
  
}


void
_wrap_btRigidBody_getRollingFriction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getRollingFriction();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getInternalType(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getInternalType();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getWorldTransform__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getWorldTransform__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btTransform *) &((btCollisionObject const *)swig_b0)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setWorldTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_btRigidBody_getBroadphaseHandle__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btBroadphaseProxy *)(swig_b0)->getBroadphaseHandle();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getBroadphaseHandle__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btBroadphaseProxy *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btBroadphaseProxy *)((btCollisionObject const *)swig_b0)->getBroadphaseHandle();
  *(btBroadphaseProxy **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setBroadphaseHandle(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btBroadphaseProxy *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btBroadphaseProxy **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setBroadphaseHandle(arg2);
  
}


void
_wrap_btRigidBody_getInterpolationWorldTransform__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btTransform *) &((btCollisionObject const *)swig_b0)->getInterpolationWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getInterpolationWorldTransform__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getInterpolationWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_setInterpolationWorldTransform(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setInterpolationWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_btRigidBody_setInterpolationLinearVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_setInterpolationAngularVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
  
}


void
_wrap_btRigidBody_getInterpolationLinearVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btVector3 *) &((btCollisionObject const *)swig_b0)->getInterpolationLinearVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getInterpolationAngularVelocity(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btVector3 *) &((btCollisionObject const *)swig_b0)->getInterpolationAngularVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getIslandTag(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getIslandTag();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setIslandTag(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setIslandTag(arg2);
  
}


void
_wrap_btRigidBody_getCompanionId(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getCompanionId();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setCompanionId(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setCompanionId(arg2);
  
}


void
_wrap_btRigidBody_getHitFraction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getHitFraction();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setHitFraction(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setHitFraction(arg2);
  
}


void
_wrap_btRigidBody_getCollisionFlags(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getCollisionFlags();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setCollisionFlags(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setCollisionFlags(arg2);
  
}


void
_wrap_btRigidBody_getCcdSweptSphereRadius(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getCcdSweptSphereRadius();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setCcdSweptSphereRadius(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setCcdSweptSphereRadius(arg2);
  
}


void
_wrap_btRigidBody_getCcdMotionThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getCcdMotionThreshold();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_getCcdSquareMotionThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (btScalar)((btCollisionObject const *)swig_b0)->getCcdSquareMotionThreshold();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setCcdMotionThreshold(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setCcdMotionThreshold(arg2);
  
}


void
_wrap_btRigidBody_getUserPointer(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (void *)((btCollisionObject const *)swig_b0)->getUserPointer();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btRigidBody_getUserIndex(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getUserIndex();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_setUserPointer(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setUserPointer(arg2);
  
}


void
_wrap_btRigidBody_setUserIndex(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBody *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  (swig_b0)->setUserIndex(arg2);
  
}


void
_wrap_btRigidBody_getUpdateRevisionInternal(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBody *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (int)((btCollisionObject const *)swig_b0)->getUpdateRevisionInternal();
  swig_a->result = result; 
}


void
_wrap_btRigidBody_checkCollideWith(void *swig_v)
{
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  struct swigargs {
    btRigidBody *arg1;
    btCollisionObject *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btCollisionObject **)&swig_a->arg2; 
  
  btCollisionObject *swig_b0 = (btCollisionObject *)swig_a->arg1;
  result = (bool)((btCollisionObject const *)swig_b0)->checkCollideWith((btCollisionObject const *)arg2);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_collisionObjectData_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *arg2 = (btCollisionObjectFloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btCollisionObjectFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_collisionObjectData_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btCollisionObjectFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  *(btCollisionObjectFloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btMatrix3x3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btMatrix3x3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btMatrix3x3FloatData *)& ((arg1)->m_invInertiaTensorWorld);
  *(btMatrix3x3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_linearVelocity_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_linearVelocity_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_linearVelocity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_angularVelocity_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_angularVelocity_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_angularVelocity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_angularFactor_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_angularFactor_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_angularFactor);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_linearFactor_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_linearFactor_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_linearFactor);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_gravity_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_gravity_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_gravity_acceleration_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_gravity_acceleration_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity_acceleration);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_invInertiaLocal_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_invInertiaLocal_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_invInertiaLocal);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_totalForce_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_totalForce = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_totalForce_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_totalForce);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_totalTorque_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_totalTorque = *arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_totalTorque_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_totalTorque);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_inverseMass_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_inverseMass = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_inverseMass_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_inverseMass);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_linearDamping_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearDamping = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_linearDamping_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_linearDamping);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_angularDamping_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularDamping = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_angularDamping_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_angularDamping);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_additionalDampingFactor_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_additionalDampingFactor_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_additionalDampingFactor);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_linearSleepingThreshold_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_linearSleepingThreshold_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_linearSleepingThreshold);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_angularSleepingThreshold_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_angularSleepingThreshold_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_angularSleepingThreshold);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyFloatData_m_additionalDamping_set(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalDamping = arg2;
  
}


void
_wrap_btRigidBodyFloatData_m_additionalDamping_get(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_additionalDamping);
  swig_a->result = result; 
}


void
_wrap_new_btRigidBodyFloatData(void *swig_v)
{
  btRigidBodyFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBodyFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBodyFloatData *)new btRigidBodyFloatData();
  *(btRigidBodyFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btRigidBodyFloatData(void *swig_v)
{
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  
  struct swigargs {
    btRigidBodyFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btRigidBodyDoubleData_m_collisionObjectData_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *arg2 = (btCollisionObjectDoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btCollisionObjectDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btCollisionObjectDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_collisionObjectData_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btCollisionObjectDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btCollisionObjectDoubleData *)& ((arg1)->m_collisionObjectData);
  *(btCollisionObjectDoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btMatrix3x3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btMatrix3x3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_invInertiaTensorWorld);
  *(btMatrix3x3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_linearVelocity_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_linearVelocity_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearVelocity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_angularVelocity_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_angularVelocity_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularVelocity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_angularFactor_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_angularFactor_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularFactor);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_linearFactor_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_linearFactor_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearFactor);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_gravity_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_gravity_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_gravity_acceleration_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_gravity_acceleration_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity_acceleration);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_invInertiaLocal_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_invInertiaLocal_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_invInertiaLocal);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_totalForce_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_totalForce = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_totalForce_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_totalForce);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_totalTorque_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_totalTorque = *arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_totalTorque_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_totalTorque);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_inverseMass_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_inverseMass = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_inverseMass_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_inverseMass);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_linearDamping_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearDamping = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_linearDamping_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_linearDamping);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_angularDamping_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularDamping = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_angularDamping_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_angularDamping);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_additionalDampingFactor_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_additionalDampingFactor_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_additionalDampingFactor);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_linearSleepingThreshold);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_angularSleepingThreshold);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_additionalDamping_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_additionalDamping = arg2;
  
}


void
_wrap_btRigidBodyDoubleData_m_additionalDamping_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_additionalDamping);
  swig_a->result = result; 
}


void
_wrap_btRigidBodyDoubleData_m_padding_set(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btRigidBodyDoubleData_m_padding_get(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btRigidBodyDoubleData(void *swig_v)
{
  btRigidBodyDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBodyDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBodyDoubleData *)new btRigidBodyDoubleData();
  *(btRigidBodyDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btRigidBodyDoubleData(void *swig_v)
{
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  
  struct swigargs {
    btRigidBodyDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBodyDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btJacobianEntry__SWIG_0(void *swig_v)
{
  btJacobianEntry *result = 0 ;
  
  struct swigargs {
    long : 0;
    btJacobianEntry *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btJacobianEntry *)new btJacobianEntry();
  *(btJacobianEntry **)&swig_a->result = result; 
}


void
_wrap_new_btJacobianEntry__SWIG_1(void *swig_v)
{
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  btJacobianEntry *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btMatrix3x3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    float arg7;
    btVector3 *arg8;
    float arg9;
    long : 0;
    btJacobianEntry *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  arg9 = (btScalar)swig_a->arg9; 
  
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,(btVector3 const &)*arg8,arg9);
  *(btJacobianEntry **)&swig_a->result = result; 
}


void
_wrap_new_btJacobianEntry__SWIG_2(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btJacobianEntry *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btMatrix3x3 *arg2;
    btMatrix3x3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    long : 0;
    btJacobianEntry *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btMatrix3x3 **)&swig_a->arg2; 
  arg3 = *(btMatrix3x3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btMatrix3x3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  *(btJacobianEntry **)&swig_a->result = result; 
}


void
_wrap_new_btJacobianEntry__SWIG_3(void *swig_v)
{
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btJacobianEntry *result = 0 ;
  
  struct swigargs {
    btVector3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btJacobianEntry *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVector3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btJacobianEntry **)&swig_a->result = result; 
}


void
_wrap_new_btJacobianEntry__SWIG_4(void *swig_v)
{
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  btJacobianEntry *result = 0 ;
  
  struct swigargs {
    btMatrix3x3 *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    float arg6;
    long : 0;
    btJacobianEntry *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btMatrix3x3 **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  *(btJacobianEntry **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_getDiagonal(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btScalar)((btJacobianEntry const *)arg1)->getDiagonal();
  swig_a->result = result; 
}


void
_wrap_btJacobianEntry_getNonDiagonal__SWIG_0(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar result;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btJacobianEntry *arg2;
    float arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btJacobianEntry **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btJacobianEntry_getNonDiagonal__SWIG_1(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar result;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btJacobianEntry *arg2;
    float arg3;
    float arg4;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btJacobianEntry **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_btJacobianEntry_getRelativeVelocity(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar result;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  result = (btScalar)(arg1)->getRelativeVelocity((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_linearJointAxis_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearJointAxis = *arg2;
  
}


void
_wrap_btJacobianEntry_m_linearJointAxis_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_linearJointAxis);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_aJ_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_aJ = *arg2;
  
}


void
_wrap_btJacobianEntry_m_aJ_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_aJ);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_bJ_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_bJ = *arg2;
  
}


void
_wrap_btJacobianEntry_m_bJ_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_bJ);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_0MinvJt_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_0MinvJt = *arg2;
  
}


void
_wrap_btJacobianEntry_m_0MinvJt_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_0MinvJt);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_1MinvJt_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_1MinvJt = *arg2;
  
}


void
_wrap_btJacobianEntry_m_1MinvJt_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_1MinvJt);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJacobianEntry_m_Adiag_set(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_Adiag = arg2;
  
}


void
_wrap_btJacobianEntry_m_Adiag_get(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  struct swigargs {
    btJacobianEntry *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_Adiag);
  swig_a->result = result; 
}


void
_wrap_delete_btJacobianEntry(void *swig_v)
{
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  
  struct swigargs {
    btJacobianEntry *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJacobianEntry **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSolverBody_m_worldTransform_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
}


void
_wrap_btSolverBody_m_worldTransform_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_worldTransform);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_deltaLinearVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_deltaLinearVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_deltaLinearVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_deltaLinearVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_deltaAngularVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_deltaAngularVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_deltaAngularVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_deltaAngularVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_angularFactor_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
}


void
_wrap_btSolverBody_m_angularFactor_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_angularFactor);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_linearFactor_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
}


void
_wrap_btSolverBody_m_linearFactor_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_linearFactor);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_invMass_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_invMass = *arg2;
  
}


void
_wrap_btSolverBody_m_invMass_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_invMass);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_pushVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pushVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_pushVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_pushVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_turnVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_turnVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_turnVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_turnVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_linearVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_linearVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_linearVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_angularVelocity_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
}


void
_wrap_btSolverBody_m_angularVelocity_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_angularVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_externalForceImpulse_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_externalForceImpulse = *arg2;
  
}


void
_wrap_btSolverBody_m_externalForceImpulse_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_externalForceImpulse);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_externalTorqueImpulse_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_externalTorqueImpulse = *arg2;
  
}


void
_wrap_btSolverBody_m_externalTorqueImpulse_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_externalTorqueImpulse);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_m_originalBody_set(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btRigidBody *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_originalBody = arg2;
  
}


void
_wrap_btSolverBody_m_originalBody_get(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btRigidBody *) ((arg1)->m_originalBody);
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_setWorldTransform(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
}


void
_wrap_btSolverBody_getWorldTransform(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btTransform *) &((btSolverBody const *)arg1)->getWorldTransform();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_getVelocityInLocalPointNoDelta(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btSolverBody const *)arg1)->getVelocityInLocalPointNoDelta((btVector3 const &)*arg2,*arg3);
  
}


void
_wrap_btSolverBody_getVelocityInLocalPointObsolete(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btSolverBody const *)arg1)->getVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
  
}


void
_wrap_btSolverBody_getAngularVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  ((btSolverBody const *)arg1)->getAngularVelocity(*arg2);
  
}


void
_wrap_btSolverBody_applyImpulse(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btSolverBody_internalApplyPushImpulse(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->internalApplyPushImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btSolverBody_getDeltaLinearVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaLinearVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_getDeltaAngularVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaAngularVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_getPushVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getPushVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_getTurnVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getTurnVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetDeltaLinearVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->internalGetDeltaLinearVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetDeltaAngularVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->internalGetDeltaAngularVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetAngularFactor(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetAngularFactor();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetInvMass(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetInvMass();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalSetInvMass(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->internalSetInvMass((btVector3 const &)*arg2);
  
}


void
_wrap_btSolverBody_internalGetPushVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->internalGetPushVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetTurnVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->internalGetTurnVelocity();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverBody_internalGetVelocityInLocalPointObsolete(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  ((btSolverBody const *)arg1)->internalGetVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
  
}


void
_wrap_btSolverBody_internalGetAngularVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  ((btSolverBody const *)arg1)->internalGetAngularVelocity(*arg2);
  
}


void
_wrap_btSolverBody_internalApplyImpulse(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btSolverBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->internalApplyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
}


void
_wrap_btSolverBody_writebackVelocity(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  (arg1)->writebackVelocity();
  
}


void
_wrap_btSolverBody_writebackVelocityAndTransform(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btSolverBody *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->writebackVelocityAndTransform(arg2,arg3);
  
}


void
_wrap_delete_btSolverBody(void *swig_v)
{
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  
  struct swigargs {
    btSolverBody *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverBody **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSolverConstraint_m_relpos1CrossNormal_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_relpos1CrossNormal = *arg2;
  
}


void
_wrap_btSolverConstraint_m_relpos1CrossNormal_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_relpos1CrossNormal);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_contactNormal1_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactNormal1 = *arg2;
  
}


void
_wrap_btSolverConstraint_m_contactNormal1_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_contactNormal1);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_relpos2CrossNormal_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_relpos2CrossNormal = *arg2;
  
}


void
_wrap_btSolverConstraint_m_relpos2CrossNormal_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_relpos2CrossNormal);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_contactNormal2_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_contactNormal2 = *arg2;
  
}


void
_wrap_btSolverConstraint_m_contactNormal2_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_contactNormal2);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_angularComponentA_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularComponentA = *arg2;
  
}


void
_wrap_btSolverConstraint_m_angularComponentA_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_angularComponentA);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_angularComponentB_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularComponentB = *arg2;
  
}


void
_wrap_btSolverConstraint_m_angularComponentB_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_angularComponentB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_appliedPushImpulse_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedPushImpulse = arg2;
  
}


void
_wrap_btSolverConstraint_m_appliedPushImpulse_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_appliedPushImpulse);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_appliedImpulse_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
}


void
_wrap_btSolverConstraint_m_appliedImpulse_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_appliedImpulse);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_friction_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_friction = arg2;
  
}


void
_wrap_btSolverConstraint_m_friction_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_friction);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_jacDiagABInv_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_jacDiagABInv = arg2;
  
}


void
_wrap_btSolverConstraint_m_jacDiagABInv_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_jacDiagABInv);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_rhs_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rhs = arg2;
  
}


void
_wrap_btSolverConstraint_m_rhs_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_rhs);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_cfm_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_cfm = arg2;
  
}


void
_wrap_btSolverConstraint_m_cfm_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_cfm);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_lowerLimit_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
}


void
_wrap_btSolverConstraint_m_lowerLimit_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_lowerLimit);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_upperLimit_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = arg2;
  
}


void
_wrap_btSolverConstraint_m_upperLimit_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_upperLimit);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_rhsPenetration_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rhsPenetration = arg2;
  
}


void
_wrap_btSolverConstraint_m_rhsPenetration_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_rhsPenetration);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_overrideNumSolverIterations_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
}


void
_wrap_btSolverConstraint_m_overrideNumSolverIterations_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_frictionIndex_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_frictionIndex = arg2;
  
}


void
_wrap_btSolverConstraint_m_frictionIndex_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_frictionIndex);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_solverBodyIdA_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverBodyIdA = arg2;
  
}


void
_wrap_btSolverConstraint_m_solverBodyIdA_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_solverBodyIdA);
  swig_a->result = result; 
}


void
_wrap_btSolverConstraint_m_solverBodyIdB_set(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_solverBodyIdB = arg2;
  
}


void
_wrap_btSolverConstraint_m_solverBodyIdB_get(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSolverConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_solverBodyIdB);
  swig_a->result = result; 
}


void
_wrap_BT_SOLVER_CONTACT_1D_btSolverConstraint(void *swig_v)
{
  btSolverConstraint::btSolverConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btSolverConstraint::BT_SOLVER_CONTACT_1D;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SOLVER_FRICTION_1D_btSolverConstraint(void *swig_v)
{
  btSolverConstraint::btSolverConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = btSolverConstraint::BT_SOLVER_FRICTION_1D;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btSolverConstraint(void *swig_v)
{
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  
  struct swigargs {
    btSolverConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSolverConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_POINT2POINT_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = POINT2POINT_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_HINGE_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = HINGE_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONETWIST_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONETWIST_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_D6_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = D6_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_SLIDER_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = SLIDER_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_CONTACT_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CONTACT_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_D6_SPRING_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = D6_SPRING_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_GEAR_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = GEAR_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_FIXED_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = FIXED_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_MAX_CONSTRAINT_TYPE(void *swig_v)
{
  btTypedConstraintType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = MAX_CONSTRAINT_TYPE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONSTRAINT_ERP(void *swig_v)
{
  btConstraintParams result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONSTRAINT_ERP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONSTRAINT_STOP_ERP(void *swig_v)
{
  btConstraintParams result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONSTRAINT_STOP_ERP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONSTRAINT_CFM(void *swig_v)
{
  btConstraintParams result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONSTRAINT_CFM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONSTRAINT_STOP_CFM(void *swig_v)
{
  btConstraintParams result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONSTRAINT_STOP_CFM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btJointFeedback_m_appliedForceBodyA_set(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedForceBodyA = *arg2;
  
}


void
_wrap_btJointFeedback_m_appliedForceBodyA_get(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyA);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJointFeedback_m_appliedTorqueBodyA_set(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedTorqueBodyA = *arg2;
  
}


void
_wrap_btJointFeedback_m_appliedTorqueBodyA_get(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyA);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJointFeedback_m_appliedForceBodyB_set(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedForceBodyB = *arg2;
  
}


void
_wrap_btJointFeedback_m_appliedForceBodyB_get(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btJointFeedback_m_appliedTorqueBodyB_set(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedTorqueBodyB = *arg2;
  
}


void
_wrap_btJointFeedback_m_appliedTorqueBodyB_get(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyB);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_new_btJointFeedback(void *swig_v)
{
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btJointFeedback *)new btJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_delete_btJointFeedback(void *swig_v)
{
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btJointFeedback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btJointFeedback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btTypedConstraint(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTypedConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (int)((btTypedConstraint const *)arg1)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btTypedConstraint_buildJacobian(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  (arg1)->buildJacobian();
  
}


void
_wrap_btTypedConstraint_setupSolverConstraint(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  (arg1)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btTypedConstraint_getInfo1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btTypedConstraint_getInfo2(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btTypedConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btTypedConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btTypedConstraint_isEnabled(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (bool)((btTypedConstraint const *)arg1)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setEnabled(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setEnabled(arg2);
  
}


void
_wrap_btTypedConstraint_solveConstraintObsolete(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btTypedConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &(arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &(arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getUserConstraintType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setUserConstraintType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setUserConstraintType(arg2);
  
}


void
_wrap_btTypedConstraint_setUserConstraintId(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setUserConstraintId(arg2);
  
}


void
_wrap_btTypedConstraint_getUserConstraintId(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setUserConstraintPtr(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  (arg1)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btTypedConstraint_getUserConstraintPtr(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (void *)(arg1)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setJointFeedback(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  (arg1)->setJointFeedback(arg2);
  
}


void
_wrap_btTypedConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btJointFeedback *)((btTypedConstraint const *)arg1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btJointFeedback *)(arg1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getUid(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (int)((btTypedConstraint const *)arg1)->getUid();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_needsFeedback(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (bool)((btTypedConstraint const *)arg1)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_enableFeedback(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->enableFeedback(arg2);
  
}


void
_wrap_btTypedConstraint_getAppliedImpulse(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getConstraintType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btTypedConstraintType)((btTypedConstraint const *)arg1)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btTypedConstraint_setDbgDrawSize(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDbgDrawSize(arg2);
  
}


void
_wrap_btTypedConstraint_getDbgDrawSize(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_setParam__SWIG_0(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btTypedConstraint_setParam__SWIG_1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btTypedConstraint_getParam__SWIG_0(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getParam__SWIG_1(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  result = (int)((btTypedConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_serialize(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btTypedConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_SetbtTypedConstraint_M_objectType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_objectType = arg2;
  
}


void
_wrap_GetbtTypedConstraint_M_objectType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  result = (int) ((swig_b0)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraint_getObjectType(void *swig_v)
{
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraint **)&swig_a->arg1; 
  
  btTypedObject *swig_b0 = (btTypedObject *)swig_a->arg1;
  result = (int)((btTypedObject const *)swig_b0)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btAdjustAngleToLimits(void *swig_v)
{
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  struct swigargs {
    float arg1;
    float arg2;
    float arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (btScalar)swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (btScalar)btAdjustAngleToLimits(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_rbA_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    btRigidBodyFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbA = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_rbA_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    btRigidBodyFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbA);
  *(btRigidBodyFloatData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_rbB_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    btRigidBodyFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbB = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_rbB_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    btRigidBodyFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbB);
  *(btRigidBodyFloatData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_name_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btTypedConstraintFloatData_m_name_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTypedConstraintFloatData_m_objectType_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_objectType = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_objectType_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_userConstraintType_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintType = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_userConstraintType_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_userConstraintId_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintId = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_userConstraintId_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintId);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_needsFeedback_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_needsFeedback = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_needsFeedback_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_needsFeedback);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_appliedImpulse_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_appliedImpulse_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_appliedImpulse);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_dbgDrawSize_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_dbgDrawSize_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_dbgDrawSize);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_overrideNumSolverIterations_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_overrideNumSolverIterations_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_breakingImpulseThreshold_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_breakingImpulseThreshold_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintFloatData_m_isEnabled_set(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_isEnabled = arg2;
  
}


void
_wrap_btTypedConstraintFloatData_m_isEnabled_get(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_isEnabled);
  swig_a->result = result; 
}


void
_wrap_new_btTypedConstraintFloatData(void *swig_v)
{
  btTypedConstraintFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTypedConstraintFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTypedConstraintFloatData *)new btTypedConstraintFloatData();
  *(btTypedConstraintFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btTypedConstraintFloatData(void *swig_v)
{
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  
  struct swigargs {
    btTypedConstraintFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTypedConstraintData_m_rbA_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    btRigidBodyFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbA = arg2;
  
}


void
_wrap_btTypedConstraintData_m_rbA_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    btRigidBodyFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbA);
  *(btRigidBodyFloatData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_rbB_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    btRigidBodyFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbB = arg2;
  
}


void
_wrap_btTypedConstraintData_m_rbB_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    btRigidBodyFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbB);
  *(btRigidBodyFloatData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_name_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btTypedConstraintData_m_name_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTypedConstraintData_m_objectType_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_objectType = arg2;
  
}


void
_wrap_btTypedConstraintData_m_objectType_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_userConstraintType_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintType = arg2;
  
}


void
_wrap_btTypedConstraintData_m_userConstraintType_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_userConstraintId_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintId = arg2;
  
}


void
_wrap_btTypedConstraintData_m_userConstraintId_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintId);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_needsFeedback_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_needsFeedback = arg2;
  
}


void
_wrap_btTypedConstraintData_m_needsFeedback_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_needsFeedback);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_appliedImpulse_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
}


void
_wrap_btTypedConstraintData_m_appliedImpulse_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_appliedImpulse);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_dbgDrawSize_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
  
}


void
_wrap_btTypedConstraintData_m_dbgDrawSize_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_dbgDrawSize);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
  
}


void
_wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_overrideNumSolverIterations_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
}


void
_wrap_btTypedConstraintData_m_overrideNumSolverIterations_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_breakingImpulseThreshold_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
  
}


void
_wrap_btTypedConstraintData_m_breakingImpulseThreshold_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintData_m_isEnabled_set(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_isEnabled = arg2;
  
}


void
_wrap_btTypedConstraintData_m_isEnabled_get(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_isEnabled);
  swig_a->result = result; 
}


void
_wrap_new_btTypedConstraintData(void *swig_v)
{
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTypedConstraintData *)new btTypedConstraintData();
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_delete_btTypedConstraintData(void *swig_v)
{
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btTypedConstraintData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTypedConstraintDoubleData_m_rbA_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *arg2 = (btRigidBodyDoubleData *) 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    btRigidBodyDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbA = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_rbA_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    btRigidBodyDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btRigidBodyDoubleData *) ((arg1)->m_rbA);
  *(btRigidBodyDoubleData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_rbB_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *arg2 = (btRigidBodyDoubleData *) 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    btRigidBodyDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btRigidBodyDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbB = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_rbB_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *result = 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    btRigidBodyDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btRigidBodyDoubleData *) ((arg1)->m_rbB);
  *(btRigidBodyDoubleData **)&swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_name_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
}


void
_wrap_btTypedConstraintDoubleData_m_name_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (char *) ((arg1)->m_name);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btTypedConstraintDoubleData_m_objectType_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_objectType = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_objectType_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_userConstraintType_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintType = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_userConstraintType_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintType);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_userConstraintId_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_userConstraintId = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_userConstraintId_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_userConstraintId);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_needsFeedback_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_needsFeedback = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_needsFeedback_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_needsFeedback);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_appliedImpulse_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_appliedImpulse_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_appliedImpulse);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_dbgDrawSize_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_dbgDrawSize_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_dbgDrawSize);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_overrideNumSolverIterations_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_overrideNumSolverIterations_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_breakingImpulseThreshold_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_breakingImpulseThreshold_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_breakingImpulseThreshold);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_m_isEnabled_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_isEnabled = arg2;
  
}


void
_wrap_btTypedConstraintDoubleData_m_isEnabled_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_isEnabled);
  swig_a->result = result; 
}


void
_wrap_btTypedConstraintDoubleData_padding_set(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->padding, (const char *)arg2, 4-1);
      arg1->padding[4-1] = 0;
    } else {
      arg1->padding[0] = 0;
    }
  }
  
}


void
_wrap_btTypedConstraintDoubleData_padding_get(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btTypedConstraintDoubleData(void *swig_v)
{
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTypedConstraintDoubleData *)new btTypedConstraintDoubleData();
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btTypedConstraintDoubleData(void *swig_v)
{
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btTypedConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTypedConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btAngularLimit(void *swig_v)
{
  btAngularLimit *result = 0 ;
  
  struct swigargs {
    long : 0;
    btAngularLimit *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btAngularLimit *)new btAngularLimit();
  *(btAngularLimit **)&swig_a->result = result; 
}


void
_wrap_btAngularLimit_set__SWIG_0(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  (arg1)->set(arg2,arg3,arg4,arg5,arg6);
  
}


void
_wrap_btAngularLimit_set__SWIG_1(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  (arg1)->set(arg2,arg3,arg4,arg5);
  
}


void
_wrap_btAngularLimit_set__SWIG_2(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->set(arg2,arg3,arg4);
  
}


void
_wrap_btAngularLimit_set__SWIG_3(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->set(arg2,arg3);
  
}


void
_wrap_btAngularLimit_test(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->test(arg2);
  
}


void
_wrap_btAngularLimit_getSoftness(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getSoftness();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getBiasFactor(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getBiasFactor();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getRelaxationFactor(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getRelaxationFactor();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getCorrection(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getCorrection();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getSign(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getSign();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getHalfRange(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getHalfRange();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_isLimit(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  bool result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (bool)((btAngularLimit const *)arg1)->isLimit();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_fit(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar *arg2 = 0 ;
  
  struct swigargs {
    btAngularLimit *arg1;
    btScalar *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  arg2 = *(btScalar **)&swig_a->arg2; 
  
  ((btAngularLimit const *)arg1)->fit(*arg2);
  
}


void
_wrap_btAngularLimit_getError(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getError();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getLow(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getLow();
  swig_a->result = result; 
}


void
_wrap_btAngularLimit_getHigh(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  struct swigargs {
    btAngularLimit *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  result = (btScalar)((btAngularLimit const *)arg1)->getHigh();
  swig_a->result = result; 
}


void
_wrap_delete_btAngularLimit(void *swig_v)
{
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  
  struct swigargs {
    btAngularLimit *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btAngularLimit **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btConstraintSetting(void *swig_v)
{
  btConstraintSetting *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConstraintSetting *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConstraintSetting *)new btConstraintSetting();
  *(btConstraintSetting **)&swig_a->result = result; 
}


void
_wrap_btConstraintSetting_m_tau_set(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintSetting *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_tau = arg2;
  
}


void
_wrap_btConstraintSetting_m_tau_get(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintSetting *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_tau);
  swig_a->result = result; 
}


void
_wrap_btConstraintSetting_m_damping_set(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintSetting *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btConstraintSetting_m_damping_get(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintSetting *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btConstraintSetting_m_impulseClamp_set(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConstraintSetting *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_impulseClamp = arg2;
  
}


void
_wrap_btConstraintSetting_m_impulseClamp_get(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintSetting *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_impulseClamp);
  swig_a->result = result; 
}


void
_wrap_delete_btConstraintSetting(void *swig_v)
{
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  
  struct swigargs {
    btConstraintSetting *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSetting **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_P2P_FLAGS_ERP(void *swig_v)
{
  btPoint2PointFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_P2P_FLAGS_ERP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_P2P_FLAGS_CFM(void *swig_v)
{
  btPoint2PointFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_P2P_FLAGS_CFM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_set(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
  
}


void
_wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_get(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_m_setting_set(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *arg2 = (btConstraintSetting *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btConstraintSetting *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintSetting **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_setting = *arg2;
  
}


void
_wrap_btPoint2PointConstraint_m_setting_get(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btConstraintSetting *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  result = (btConstraintSetting *)& ((arg1)->m_setting);
  *(btConstraintSetting **)&swig_a->result = result; 
}


void
_wrap_new_btPoint2PointConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btPoint2PointConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btPoint2PointConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btPoint2PointConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    long : 0;
    btPoint2PointConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,(btVector3 const &)*arg2);
  *(btPoint2PointConstraint **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_buildJacobian(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  (arg1)->buildJacobian();
  
}


void
_wrap_btPoint2PointConstraint_getInfo1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getInfo1NonVirtual(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getInfo2(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getInfo2NonVirtual(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  
}


void
_wrap_btPoint2PointConstraint_updateRHS(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateRHS(arg2);
  
}


void
_wrap_btPoint2PointConstraint_setPivotA(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setPivotA((btVector3 const &)*arg2);
  
}


void
_wrap_btPoint2PointConstraint_setPivotB(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setPivotB((btVector3 const &)*arg2);
  
}


void
_wrap_btPoint2PointConstraint_getPivotInA(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInA();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getPivotInB(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInB();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setParam__SWIG_0(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btPoint2PointConstraint_setParam__SWIG_1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btPoint2PointConstraint_getParam__SWIG_0(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getParam__SWIG_1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  result = (int)((btPoint2PointConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_serialize(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btPoint2PointConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btPoint2PointConstraint(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btPoint2PointConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btPoint2PointConstraint_setupSolverConstraint(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btPoint2PointConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btPoint2PointConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btPoint2PointConstraint_isEnabled(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setEnabled(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btPoint2PointConstraint_solveConstraintObsolete(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btPoint2PointConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getUserConstraintType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setUserConstraintType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btPoint2PointConstraint_setUserConstraintId(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getUserConstraintId(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setUserConstraintPtr(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getUserConstraintPtr(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_setJointFeedback(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getUid(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_needsFeedback(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_enableFeedback(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getAppliedImpulse(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getConstraintType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btPoint2PointConstraint_setDbgDrawSize(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btPoint2PointConstraint_getDbgDrawSize(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtPoint2PointConstraint_M_objectType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtPoint2PointConstraint_M_objectType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraint_getObjectType(void *swig_v)
{
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btPoint2PointConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_set(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_get(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintFloatData_m_pivotInA_set(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInA = *arg2;
  
}


void
_wrap_btPoint2PointConstraintFloatData_m_pivotInA_get(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_pivotInA);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintFloatData_m_pivotInB_set(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInB = *arg2;
  
}


void
_wrap_btPoint2PointConstraintFloatData_m_pivotInB_get(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_pivotInB);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_new_btPoint2PointConstraintFloatData(void *swig_v)
{
  btPoint2PointConstraintFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPoint2PointConstraintFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPoint2PointConstraintFloatData *)new btPoint2PointConstraintFloatData();
  *(btPoint2PointConstraintFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btPoint2PointConstraintFloatData(void *swig_v)
{
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_typeConstraintData_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_typeConstraintData_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_pivotInA_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInA = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_pivotInA_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInA);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_pivotInB_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInB = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData2_m_pivotInB_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInB);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_new_btPoint2PointConstraintDoubleData2(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPoint2PointConstraintDoubleData2 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPoint2PointConstraintDoubleData2 *)new btPoint2PointConstraintDoubleData2();
  *(btPoint2PointConstraintDoubleData2 **)&swig_a->result = result; 
}


void
_wrap_delete_btPoint2PointConstraintDoubleData2(void *swig_v)
{
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData2 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData2 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintDoubleData_m_pivotInA_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInA = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData_m_pivotInA_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInA);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btPoint2PointConstraintDoubleData_m_pivotInB_set(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_pivotInB = *arg2;
  
}


void
_wrap_btPoint2PointConstraintDoubleData_m_pivotInB_get(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInB);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_new_btPoint2PointConstraintDoubleData(void *swig_v)
{
  btPoint2PointConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btPoint2PointConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btPoint2PointConstraintDoubleData *)new btPoint2PointConstraintDoubleData();
  *(btPoint2PointConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btPoint2PointConstraintDoubleData(void *swig_v)
{
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btPoint2PointConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btPoint2PointConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_HINGE_FLAGS_CFM_STOP(void *swig_v)
{
  btHingeFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_HINGE_FLAGS_CFM_STOP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_HINGE_FLAGS_ERP_STOP(void *swig_v)
{
  btHingeFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_HINGE_FLAGS_ERP_STOP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_HINGE_FLAGS_CFM_NORM(void *swig_v)
{
  btHingeFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_HINGE_FLAGS_CFM_NORM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btHingeConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool arg7 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    bool arg7;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = (bool)swig_a->arg7; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_2(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool arg4 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    bool arg4;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (bool)swig_a->arg4; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_3(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_4(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    bool arg5;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_5(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_6(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    bool arg3;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2,arg3);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btHingeConstraint__SWIG_7(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btHingeConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    long : 0;
    btHingeConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2);
  *(btHingeConstraint **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_buildJacobian(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  (arg1)->buildJacobian();
  
}


void
_wrap_btHingeConstraint_getInfo1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btHingeConstraint_getInfo1NonVirtual(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btHingeConstraint_getInfo2(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btHingeConstraint_getInfo2NonVirtual(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btHingeConstraint_getInfo2Internal(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->getInfo2Internal(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btHingeConstraint_getInfo2InternalUsingFrameOffset(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  
  (arg1)->getInfo2InternalUsingFrameOffset(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
}


void
_wrap_btHingeConstraint_updateRHS(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateRHS(arg2);
  
}


void
_wrap_btHingeConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &(arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &(arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getFrameOffsetA(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getFrameOffsetB(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setFrames(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btHingeConstraint_setAngularOnly(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setAngularOnly(arg2);
  
}


void
_wrap_btHingeConstraint_enableAngularMotor(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->enableAngularMotor(arg2,arg3,arg4);
  
}


void
_wrap_btHingeConstraint_enableMotor(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->enableMotor(arg2);
  
}


void
_wrap_btHingeConstraint_setMaxMotorImpulse(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMaxMotorImpulse(arg2);
  
}


void
_wrap_btHingeConstraint_setMotorTarget__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btQuaternion *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setMotorTarget((btQuaternion const &)*arg2,arg3);
  
}


void
_wrap_btHingeConstraint_setMotorTarget__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setMotorTarget(arg2,arg3);
  
}


void
_wrap_btHingeConstraint_setLimit__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
  
}


void
_wrap_btHingeConstraint_setLimit__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
  
}


void
_wrap_btHingeConstraint_setLimit__SWIG_2(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btHingeConstraint_setLimit__SWIG_3(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setLimit(arg2,arg3);
  
}


void
_wrap_btHingeConstraint_setAxis(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAxis(*arg2);
  
}


void
_wrap_btHingeConstraint_getLowerLimit(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getLowerLimit();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getUpperLimit(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getUpperLimit();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getHingeAngle__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getHingeAngle();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getHingeAngle__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  result = (btScalar)(arg1)->getHingeAngle((btTransform const &)*arg2,(btTransform const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_testLimit(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->testLimit((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btHingeConstraint_getAFrame__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getAFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getBFrame__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getBFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getAFrame__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getAFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getBFrame__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getBFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getSolveLimit(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (int)(arg1)->getSolveLimit();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getLimitSign(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getLimitSign();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getAngularOnly(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getAngularOnly();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getEnableAngularMotor(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getEnableAngularMotor();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getMotorTargetVelosity(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getMotorTargetVelosity();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getMaxMotorImpulse(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getMaxMotorImpulse();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getUseFrameOffset(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setUseFrameOffset(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setUseFrameOffset(arg2);
  
}


void
_wrap_btHingeConstraint_setParam__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btHingeConstraint_setParam__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btHingeConstraint_getParam__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getParam__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  result = (int)((btHingeConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_serialize(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btHingeConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btHingeConstraint(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btHingeConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btHingeConstraint_setupSolverConstraint(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btHingeConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btHingeConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btHingeConstraint_isEnabled(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setEnabled(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btHingeConstraint_solveConstraintObsolete(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btHingeConstraint_getUserConstraintType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setUserConstraintType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btHingeConstraint_setUserConstraintId(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btHingeConstraint_getUserConstraintId(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setUserConstraintPtr(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btHingeConstraint_getUserConstraintPtr(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_setJointFeedback(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btHingeConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getUid(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_needsFeedback(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_enableFeedback(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btHingeConstraint_getAppliedImpulse(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getConstraintType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btHingeConstraint_setDbgDrawSize(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btHingeConstraint_getDbgDrawSize(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtHingeConstraint_M_objectType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtHingeConstraint_M_objectType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraint_getObjectType(void *swig_v)
{
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_typeConstraintData_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_typeConstraintData_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_rbAFrame_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_rbAFrame_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_rbBFrame_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_rbBFrame_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_angularOnly_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularOnly = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_angularOnly_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_angularOnly);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_enableAngularMotor_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_enableAngularMotor_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_enableAngularMotor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_motorTargetVelocity);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_maxMotorImpulse);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_lowerLimit_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_lowerLimit_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_lowerLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_upperLimit_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_upperLimit_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_upperLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_limitSoftness_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_limitSoftness_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_biasFactor_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_biasFactor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_biasFactor_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_biasFactor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData_m_relaxationFactor_set(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData_m_relaxationFactor_get(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_relaxationFactor);
  swig_a->result = result; 
}


void
_wrap_new_btHingeConstraintDoubleData(void *swig_v)
{
  btHingeConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btHingeConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btHingeConstraintDoubleData *)new btHingeConstraintDoubleData();
  *(btHingeConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btHingeConstraintDoubleData(void *swig_v)
{
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btHingeConstraintFloatData_m_typeConstraintData_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_typeConstraintData_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_rbAFrame_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_rbAFrame_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_rbBFrame_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_rbBFrame_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_useReferenceFrameA_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_useReferenceFrameA_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_angularOnly_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularOnly = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_angularOnly_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_angularOnly);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_enableAngularMotor_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_enableAngularMotor_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_enableAngularMotor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_motorTargetVelocity_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_motorTargetVelocity_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_motorTargetVelocity);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_maxMotorImpulse_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_maxMotorImpulse_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_maxMotorImpulse);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_lowerLimit_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_lowerLimit_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_lowerLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_upperLimit_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_upperLimit_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_upperLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_limitSoftness_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_limitSoftness_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_biasFactor_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_biasFactor = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_biasFactor_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_biasFactor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintFloatData_m_relaxationFactor_set(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
}


void
_wrap_btHingeConstraintFloatData_m_relaxationFactor_get(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_relaxationFactor);
  swig_a->result = result; 
}


void
_wrap_new_btHingeConstraintFloatData(void *swig_v)
{
  btHingeConstraintFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btHingeConstraintFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btHingeConstraintFloatData *)new btHingeConstraintFloatData();
  *(btHingeConstraintFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btHingeConstraintFloatData(void *swig_v)
{
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  
  struct swigargs {
    btHingeConstraintFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_typeConstraintData_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_typeConstraintData_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_rbAFrame_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_rbAFrame_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_rbBFrame_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_rbBFrame_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_useReferenceFrameA_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_useReferenceFrameA_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_angularOnly_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularOnly = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_angularOnly_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_angularOnly);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_enableAngularMotor_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_enableAngularMotor_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_enableAngularMotor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_motorTargetVelocity_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_motorTargetVelocity_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_motorTargetVelocity);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_maxMotorImpulse_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_maxMotorImpulse_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_maxMotorImpulse);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_lowerLimit_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_lowerLimit_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_lowerLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_upperLimit_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_upperLimit_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_upperLimit);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_limitSoftness_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_limitSoftness_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_biasFactor_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_biasFactor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_biasFactor_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_biasFactor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_relaxationFactor_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
}


void
_wrap_btHingeConstraintDoubleData2_m_relaxationFactor_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_relaxationFactor);
  swig_a->result = result; 
}


void
_wrap_btHingeConstraintDoubleData2_m_padding1_set(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding1, (const char *)arg2, 4-1);
      arg1->m_padding1[4-1] = 0;
    } else {
      arg1->m_padding1[0] = 0;
    }
  }
  
}


void
_wrap_btHingeConstraintDoubleData2_m_padding1_get(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding1);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btHingeConstraintDoubleData2(void *swig_v)
{
  btHingeConstraintDoubleData2 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btHingeConstraintDoubleData2 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btHingeConstraintDoubleData2 *)new btHingeConstraintDoubleData2();
  *(btHingeConstraintDoubleData2 **)&swig_a->result = result; 
}


void
_wrap_delete_btHingeConstraintDoubleData2(void *swig_v)
{
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  
  struct swigargs {
    btHingeConstraintDoubleData2 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHingeConstraintDoubleData2 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_CONETWIST_FLAGS_LIN_CFM(void *swig_v)
{
  btConeTwistFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONETWIST_FLAGS_LIN_CFM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONETWIST_FLAGS_LIN_ERP(void *swig_v)
{
  btConeTwistFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONETWIST_FLAGS_LIN_ERP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_CONETWIST_FLAGS_ANG_CFM(void *swig_v)
{
  btConeTwistFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_CONETWIST_FLAGS_ANG_CFM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btConeTwistConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    long : 0;
    btConeTwistConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  *(btConeTwistConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btConeTwistConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    long : 0;
    btConeTwistConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,(btTransform const &)*arg2);
  *(btConeTwistConstraint **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_buildJacobian(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  (arg1)->buildJacobian();
  
}


void
_wrap_btConeTwistConstraint_getInfo1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btConeTwistConstraint_getInfo1NonVirtual(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btConeTwistConstraint_getInfo2(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btConeTwistConstraint_getInfo2NonVirtual(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  btMatrix3x3 *arg6 = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btMatrix3x3 *arg5;
    btMatrix3x3 *arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btMatrix3x3 **)&swig_a->arg5; 
  arg6 = *(btMatrix3x3 **)&swig_a->arg6; 
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btMatrix3x3 const &)*arg5,(btMatrix3x3 const &)*arg6);
  
}


void
_wrap_btConeTwistConstraint_solveConstraintObsolete(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btConeTwistConstraint_updateRHS(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateRHS(arg2);
  
}


void
_wrap_btConeTwistConstraint_getRigidBodyA(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getRigidBodyB(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setAngularOnly(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setAngularOnly(arg2);
  
}


void
_wrap_btConeTwistConstraint_setLimit__SWIG_0(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setLimit(arg2,arg3);
  
}


void
_wrap_btConeTwistConstraint_setLimit__SWIG_1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
    float arg7;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6,arg7);
  
}


void
_wrap_btConeTwistConstraint_setLimit__SWIG_2(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
    float arg6;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  arg6 = (btScalar)swig_a->arg6; 
  
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
  
}


void
_wrap_btConeTwistConstraint_setLimit__SWIG_3(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
  
}


void
_wrap_btConeTwistConstraint_setLimit__SWIG_4(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btConeTwistConstraint_getAFrame(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getAFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getBFrame(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getBFrame();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getSolveTwistLimit(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (int)(arg1)->getSolveTwistLimit();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getSolveSwingLimit(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (int)(arg1)->getSolveSwingLimit();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getTwistLimitSign(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getTwistLimitSign();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_calcAngleInfo(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  (arg1)->calcAngleInfo();
  
}


void
_wrap_btConeTwistConstraint_calcAngleInfo2(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btMatrix3x3 *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
    btMatrix3x3 *arg4;
    btMatrix3x3 *arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btMatrix3x3 **)&swig_a->arg4; 
  arg5 = *(btMatrix3x3 **)&swig_a->arg5; 
  
  (arg1)->calcAngleInfo2((btTransform const &)*arg2,(btTransform const &)*arg3,(btMatrix3x3 const &)*arg4,(btMatrix3x3 const &)*arg5);
  
}


void
_wrap_btConeTwistConstraint_getSwingSpan1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSwingSpan1();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getSwingSpan2(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSwingSpan2();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getTwistSpan(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getTwistSpan();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getTwistAngle(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getTwistAngle();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_isPastSwingLimit(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->isPastSwingLimit();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setDamping(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDamping(arg2);
  
}


void
_wrap_btConeTwistConstraint_enableMotor(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->enableMotor(arg2);
  
}


void
_wrap_btConeTwistConstraint_setMaxMotorImpulse(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMaxMotorImpulse(arg2);
  
}


void
_wrap_btConeTwistConstraint_setMaxMotorImpulseNormalized(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMaxMotorImpulseNormalized(arg2);
  
}


void
_wrap_btConeTwistConstraint_getFixThresh(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getFixThresh();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setFixThresh(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setFixThresh(arg2);
  
}


void
_wrap_btConeTwistConstraint_setMotorTarget(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btQuaternion *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  (arg1)->setMotorTarget((btQuaternion const &)*arg2);
  
}


void
_wrap_btConeTwistConstraint_setMotorTargetInConstraintSpace(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btQuaternion *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btQuaternion **)&swig_a->arg2; 
  
  (arg1)->setMotorTargetInConstraintSpace((btQuaternion const &)*arg2);
  
}


void
_wrap_btConeTwistConstraint_GetPointForAngle(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btVector3 result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
    float arg3;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = ((btConeTwistConstraint const *)arg1)->GetPointForAngle(arg2,arg3);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btConeTwistConstraint_setParam__SWIG_0(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btConeTwistConstraint_setParam__SWIG_1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btConeTwistConstraint_setFrames(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btConeTwistConstraint_getFrameOffsetA(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getFrameOffsetB(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getParam__SWIG_0(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getParam__SWIG_1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  result = (int)((btConeTwistConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_serialize(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btConeTwistConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btConeTwistConstraint(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConeTwistConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btConeTwistConstraint_setupSolverConstraint(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btConeTwistConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btConeTwistConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btConeTwistConstraint_isEnabled(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setEnabled(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btConeTwistConstraint_getUserConstraintType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setUserConstraintType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btConeTwistConstraint_setUserConstraintId(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btConeTwistConstraint_getUserConstraintId(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setUserConstraintPtr(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btConeTwistConstraint_getUserConstraintPtr(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_setJointFeedback(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btConeTwistConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getUid(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_needsFeedback(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_enableFeedback(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btConeTwistConstraint_getAppliedImpulse(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getConstraintType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btConeTwistConstraint_setDbgDrawSize(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btConeTwistConstraint_getDbgDrawSize(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtConeTwistConstraint_M_objectType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtConeTwistConstraint_M_objectType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraint_getObjectType(void *swig_v)
{
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btConeTwistConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_typeConstraintData_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_typeConstraintData_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_rbAFrame_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_rbAFrame_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_rbBFrame_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_rbBFrame_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_swingSpan1_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_swingSpan1 = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_swingSpan1_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_swingSpan1);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_swingSpan2_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_swingSpan2 = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_swingSpan2_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_swingSpan2);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_twistSpan_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_twistSpan = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_twistSpan_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_twistSpan);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_limitSoftness_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_limitSoftness_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_biasFactor_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_biasFactor = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_biasFactor_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_biasFactor);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_relaxationFactor_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_relaxationFactor_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_relaxationFactor);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintDoubleData_m_damping_set(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btConeTwistConstraintDoubleData_m_damping_get(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_new_btConeTwistConstraintDoubleData(void *swig_v)
{
  btConeTwistConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConeTwistConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConeTwistConstraintDoubleData *)new btConeTwistConstraintDoubleData();
  *(btConeTwistConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btConeTwistConstraintDoubleData(void *swig_v)
{
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConeTwistConstraintData_m_typeConstraintData_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_typeConstraintData_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_rbAFrame_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_rbAFrame_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_rbBFrame_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_rbBFrame_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_swingSpan1_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_swingSpan1 = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_swingSpan1_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_swingSpan1);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_swingSpan2_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_swingSpan2 = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_swingSpan2_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_swingSpan2);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_twistSpan_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_twistSpan = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_twistSpan_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_twistSpan);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_limitSoftness_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_limitSoftness_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_biasFactor_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_biasFactor = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_biasFactor_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_biasFactor);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_relaxationFactor_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_relaxationFactor_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_relaxationFactor);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_damping_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btConeTwistConstraintData_m_damping_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btConeTwistConstraintData_m_pad_set(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
}


void
_wrap_btConeTwistConstraintData_m_pad_get(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_pad);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btConeTwistConstraintData(void *swig_v)
{
  btConeTwistConstraintData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btConeTwistConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btConeTwistConstraintData *)new btConeTwistConstraintData();
  *(btConeTwistConstraintData **)&swig_a->result = result; 
}


void
_wrap_delete_btConeTwistConstraintData(void *swig_v)
{
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  
  struct swigargs {
    btConeTwistConstraintData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConeTwistConstraintData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btRotationalLimitMotor_m_loLimit_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_loLimit = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_loLimit_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_loLimit);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_hiLimit_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_hiLimit = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_hiLimit_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_hiLimit);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_targetVelocity_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_targetVelocity = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_targetVelocity_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_targetVelocity);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_maxMotorForce_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxMotorForce = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_maxMotorForce_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxMotorForce);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_maxLimitForce_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxLimitForce = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_maxLimitForce_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxLimitForce);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_damping_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_damping_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_limitSoftness_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_limitSoftness_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_normalCFM_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_normalCFM = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_normalCFM_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_normalCFM);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_stopERP_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_stopERP = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_stopERP_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_stopERP);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_stopCFM_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_stopCFM = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_stopCFM_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_stopCFM);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_bounce_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_bounce = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_bounce_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_bounce);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_enableMotor_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_enableMotor = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_enableMotor_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_enableMotor);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_currentLimitError_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_currentLimitError = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_currentLimitError_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_currentLimitError);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_currentPosition_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_currentPosition = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_currentPosition_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_currentPosition);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_currentLimit_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_currentLimit = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_currentLimit_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_currentLimit);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_m_accumulatedImpulse_set(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_accumulatedImpulse = arg2;
  
}


void
_wrap_btRotationalLimitMotor_m_accumulatedImpulse_get(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_accumulatedImpulse);
  swig_a->result = result; 
}


void
_wrap_new_btRotationalLimitMotor__SWIG_0(void *swig_v)
{
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor();
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_new_btRotationalLimitMotor__SWIG_1(void *swig_v)
{
  btRotationalLimitMotor *arg1 = 0 ;
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor((btRotationalLimitMotor const &)*arg1);
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_isLimited(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (bool)(arg1)->isLimited();
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_needApplyTorques(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  result = (bool)(arg1)->needApplyTorques();
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_testLimitValue(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  int result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  result = (int)(arg1)->testLimitValue(arg2);
  swig_a->result = result; 
}


void
_wrap_btRotationalLimitMotor_solveAngularLimits(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btRigidBody *arg5 = (btRigidBody *) 0 ;
  btRigidBody *arg6 = (btRigidBody *) 0 ;
  btScalar result;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
    float arg2;
    btVector3 *arg3;
    float arg4;
    btRigidBody *arg5;
    btRigidBody *arg6;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  arg5 = *(btRigidBody **)&swig_a->arg5; 
  arg6 = *(btRigidBody **)&swig_a->arg6; 
  
  result = (btScalar)(arg1)->solveAngularLimits(arg2,*arg3,arg4,arg5,arg6);
  swig_a->result = result; 
}


void
_wrap_delete_btRotationalLimitMotor(void *swig_v)
{
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  
  struct swigargs {
    btRotationalLimitMotor *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRotationalLimitMotor **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btTranslationalLimitMotor_m_lowerLimit_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_lowerLimit = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_lowerLimit_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_lowerLimit);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_upperLimit_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_upperLimit = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_upperLimit_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_upperLimit);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_accumulatedImpulse = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_accumulatedImpulse_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_accumulatedImpulse);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_limitSoftness_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_limitSoftness_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_limitSoftness);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_damping_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_damping = arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_damping_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_damping);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_restitution_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_restitution = arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_restitution_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_restitution);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_normalCFM_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_normalCFM = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_normalCFM_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_normalCFM);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_stopERP_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_stopERP = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_stopERP_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_stopERP);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_stopCFM_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_stopCFM = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_stopCFM_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_stopCFM);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_enableMotor_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *arg2 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    bool *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(bool **)&swig_a->arg2; 
  
  {
    size_t ii;
    bool *b = (bool *) arg1->m_enableMotor;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


void
_wrap_btTranslationalLimitMotor_m_enableMotor_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    bool *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (bool *)(bool *) ((arg1)->m_enableMotor);
  *(bool **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_targetVelocity_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_targetVelocity = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_targetVelocity_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_targetVelocity);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_maxMotorForce_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxMotorForce = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_maxMotorForce_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_maxMotorForce);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_currentLimitError_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_currentLimitError = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_currentLimitError_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_currentLimitError);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_currentLinearDiff_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_currentLinearDiff = *arg2;
  
}


void
_wrap_btTranslationalLimitMotor_m_currentLinearDiff_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_currentLinearDiff);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_m_currentLimit_set(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *arg2 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  {
    size_t ii;
    int *b = (int *) arg1->m_currentLimit;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


void
_wrap_btTranslationalLimitMotor_m_currentLimit_get(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (int *)(int *) ((arg1)->m_currentLimit);
  *(int **)&swig_a->result = result; 
}


void
_wrap_new_btTranslationalLimitMotor__SWIG_0(void *swig_v)
{
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor();
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_new_btTranslationalLimitMotor__SWIG_1(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor((btTranslationalLimitMotor const &)*arg1);
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_isLimited(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)(arg1)->isLimited(arg2);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_needApplyForce(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)(arg1)->needApplyForce(arg2);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_testLimitValue(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    intgo arg2;
    float arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  result = (int)(arg1)->testLimitValue(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btTranslationalLimitMotor_solveLinearAxis(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btRigidBody *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btRigidBody *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  int arg8 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btScalar result;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
    float arg2;
    float arg3;
    btRigidBody *arg4;
    btVector3 *arg5;
    btRigidBody *arg6;
    btVector3 *arg7;
    intgo arg8;
    btVector3 *arg9;
    btVector3 *arg10;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = *(btRigidBody **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btRigidBody **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = (int)swig_a->arg8; 
  arg9 = *(btVector3 **)&swig_a->arg9; 
  arg10 = *(btVector3 **)&swig_a->arg10; 
  
  result = (btScalar)(arg1)->solveLinearAxis(arg2,arg3,*arg4,(btVector3 const &)*arg5,*arg6,(btVector3 const &)*arg7,arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10);
  swig_a->result = result; 
}


void
_wrap_delete_btTranslationalLimitMotor(void *swig_v)
{
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  
  struct swigargs {
    btTranslationalLimitMotor *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btTranslationalLimitMotor **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_6DOF_FLAGS_CFM_NORM(void *swig_v)
{
  bt6DofFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_6DOF_FLAGS_CFM_NORM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_6DOF_FLAGS_CFM_STOP(void *swig_v)
{
  bt6DofFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_6DOF_FLAGS_CFM_STOP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_6DOF_FLAGS_ERP_STOP(void *swig_v)
{
  bt6DofFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_6DOF_FLAGS_ERP_STOP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
  
}


void
_wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    bool arg5;
    long : 0;
    btGeneric6DofConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  *(btGeneric6DofConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    bool arg3;
    long : 0;
    btGeneric6DofConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,(btTransform const &)*arg2,arg3);
  *(btGeneric6DofConstraint **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  (arg1)->calculateTransforms();
  
}


void
_wrap_btGeneric6DofConstraint_getCalculatedTransformA(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getCalculatedTransformB(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_buildJacobian(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  (arg1)->buildJacobian();
  
}


void
_wrap_btGeneric6DofConstraint_getInfo1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getInfo1NonVirtual(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getInfo2(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getInfo2NonVirtual(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
    btVector3 *arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
  
}


void
_wrap_btGeneric6DofConstraint_updateRHS(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->updateRHS(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getAxis(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = ((btGeneric6DofConstraint const *)arg1)->getAxis(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btGeneric6DofConstraint_getAngle(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getAngle(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getRelativePivotPosition(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getRelativePivotPosition(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setFrames(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btGeneric6DofConstraint_testAngularLimitMotor(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)(arg1)->testAngularLimitMotor(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setLinearLowerLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLinearLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getLinearLowerLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->getLinearLowerLimit(*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setLinearUpperLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setLinearUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getLinearUpperLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->getLinearUpperLimit(*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setAngularLowerLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAngularLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getAngularLowerLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->getAngularLowerLimit(*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setAngularUpperLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAngularUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getAngularUpperLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->getAngularUpperLimit(*arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getRotationalLimitMotor(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btRotationalLimitMotor *)(arg1)->getRotationalLimitMotor(arg2);
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getTranslationalLimitMotor(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (btTranslationalLimitMotor *)(arg1)->getTranslationalLimitMotor();
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setLimit(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  (arg1)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btGeneric6DofConstraint_isLimited(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (bool)(arg1)->isLimited(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_calcAnchorPos(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  (arg1)->calcAnchorPos();
  
}


void
_wrap_btGeneric6DofConstraint_getUseFrameOffset(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setUseFrameOffset(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setUseFrameOffset(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setParam__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btGeneric6DofConstraint_setParam__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btGeneric6DofConstraint_getParam__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getParam__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setAxis(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btGeneric6DofConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  result = (int)((btGeneric6DofConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_serialize(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btGeneric6DofConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btGeneric6DofConstraint(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btGeneric6DofConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setupSolverConstraint(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btGeneric6DofConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_isEnabled(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setEnabled(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_solveConstraintObsolete(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btGeneric6DofConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getUserConstraintType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setUserConstraintType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_setUserConstraintId(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getUserConstraintId(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setUserConstraintPtr(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getUserConstraintPtr(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_setJointFeedback(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getUid(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_needsFeedback(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_enableFeedback(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getAppliedImpulse(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getConstraintType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btGeneric6DofConstraint_setDbgDrawSize(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btGeneric6DofConstraint_getDbgDrawSize(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtGeneric6DofConstraint_M_objectType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtGeneric6DofConstraint_M_objectType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraint_getObjectType(void *swig_v)
{
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_typeConstraintData_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_typeConstraintData_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_rbAFrame_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_rbAFrame_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_rbBFrame_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_rbBFrame_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_linearUpperLimit_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_linearUpperLimit_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_linearUpperLimit);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_linearLowerLimit_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_linearLowerLimit_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_linearLowerLimit);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_angularUpperLimit_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_angularUpperLimit_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_angularUpperLimit);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_angularLowerLimit_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_angularLowerLimit_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_angularLowerLimit);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
  
}


void
_wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofConstraintData(void *swig_v)
{
  btGeneric6DofConstraintData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGeneric6DofConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGeneric6DofConstraintData *)new btGeneric6DofConstraintData();
  *(btGeneric6DofConstraintData **)&swig_a->result = result; 
}


void
_wrap_delete_btGeneric6DofConstraintData(void *swig_v)
{
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_typeConstraintData_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_typeConstraintData_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_rbAFrame_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_rbAFrame_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_rbBFrame_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_rbBFrame_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearUpperLimit);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearLowerLimit);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularUpperLimit);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularLowerLimit);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_set(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
  
}


void
_wrap_btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_get(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofConstraintDoubleData2(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGeneric6DofConstraintDoubleData2 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGeneric6DofConstraintDoubleData2 *)new btGeneric6DofConstraintDoubleData2();
  *(btGeneric6DofConstraintDoubleData2 **)&swig_a->result = result; 
}


void
_wrap_delete_btGeneric6DofConstraintDoubleData2(void *swig_v)
{
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  struct swigargs {
    btGeneric6DofConstraintDoubleData2 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BT_SLIDER_FLAGS_CFM_DIRLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_DIRLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_DIRLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_DIRLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_CFM_DIRANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_DIRANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_DIRANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_DIRANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_CFM_ORTLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_ORTLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_ORTLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_ORTLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_CFM_ORTANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_ORTANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_ORTANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_ORTANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_CFM_LIMLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_LIMLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_LIMLIN(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_LIMLIN;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_CFM_LIMANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_CFM_LIMANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_SLIDER_FLAGS_ERP_LIMANG(void *swig_v)
{
  btSliderFlags result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SLIDER_FLAGS_ERP_LIMANG;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btSliderConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btSliderConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    bool arg5;
    long : 0;
    btSliderConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  *(btSliderConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btSliderConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btSliderConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    bool arg3;
    long : 0;
    btSliderConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,(btTransform const &)*arg2,arg3);
  *(btSliderConstraint **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getInfo1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btSliderConstraint_getInfo1NonVirtual(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btSliderConstraint_getInfo2(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btSliderConstraint_getInfo2NonVirtual(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btScalar arg8 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    float arg7;
    float arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = (btScalar)swig_a->arg7; 
  arg8 = (btScalar)swig_a->arg8; 
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,arg8);
  
}


void
_wrap_btSliderConstraint_getRigidBodyA(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRigidBodyB(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getCalculatedTransformA(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getCalculatedTransformB(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getFrameOffsetA__SWIG_0(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getFrameOffsetB__SWIG_0(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getFrameOffsetA__SWIG_1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getFrameOffsetB__SWIG_1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getLowerLinLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getLowerLinLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setLowerLinLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setLowerLinLimit(arg2);
  
}


void
_wrap_btSliderConstraint_getUpperLinLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getUpperLinLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setUpperLinLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setUpperLinLimit(arg2);
  
}


void
_wrap_btSliderConstraint_getLowerAngLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getLowerAngLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setLowerAngLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setLowerAngLimit(arg2);
  
}


void
_wrap_btSliderConstraint_getUpperAngLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getUpperAngLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setUpperAngLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setUpperAngLimit(arg2);
  
}


void
_wrap_btSliderConstraint_getUseLinearReferenceFrameA(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getUseLinearReferenceFrameA();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessDirLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionDirLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingDirLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessDirAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionDirAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingDirAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessLimLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionLimLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingLimLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessLimAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionLimAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingLimAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessOrthoLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionOrthoLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingOrthoLin();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSoftnessOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getSoftnessOrthoAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getRestitutionOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getRestitutionOrthoAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getDampingOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getDampingOrthoAng();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setSoftnessDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessDirLin(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionDirLin(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingDirLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingDirLin(arg2);
  
}


void
_wrap_btSliderConstraint_setSoftnessDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessDirAng(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionDirAng(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingDirAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingDirAng(arg2);
  
}


void
_wrap_btSliderConstraint_setSoftnessLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessLimLin(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionLimLin(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingLimLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingLimLin(arg2);
  
}


void
_wrap_btSliderConstraint_setSoftnessLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessLimAng(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionLimAng(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingLimAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingLimAng(arg2);
  
}


void
_wrap_btSliderConstraint_setSoftnessOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessOrthoLin(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionOrthoLin(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingOrthoLin(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingOrthoLin(arg2);
  
}


void
_wrap_btSliderConstraint_setSoftnessOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setSoftnessOrthoAng(arg2);
  
}


void
_wrap_btSliderConstraint_setRestitutionOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRestitutionOrthoAng(arg2);
  
}


void
_wrap_btSliderConstraint_setDampingOrthoAng(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setDampingOrthoAng(arg2);
  
}


void
_wrap_btSliderConstraint_setPoweredLinMotor(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setPoweredLinMotor(arg2);
  
}


void
_wrap_btSliderConstraint_getPoweredLinMotor(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getPoweredLinMotor();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setTargetLinMotorVelocity(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setTargetLinMotorVelocity(arg2);
  
}


void
_wrap_btSliderConstraint_getTargetLinMotorVelocity(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getTargetLinMotorVelocity();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setMaxLinMotorForce(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMaxLinMotorForce(arg2);
  
}


void
_wrap_btSliderConstraint_getMaxLinMotorForce(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getMaxLinMotorForce();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setPoweredAngMotor(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setPoweredAngMotor(arg2);
  
}


void
_wrap_btSliderConstraint_getPoweredAngMotor(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getPoweredAngMotor();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setTargetAngMotorVelocity(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setTargetAngMotorVelocity(arg2);
  
}


void
_wrap_btSliderConstraint_getTargetAngMotorVelocity(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getTargetAngMotorVelocity();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setMaxAngMotorForce(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setMaxAngMotorForce(arg2);
  
}


void
_wrap_btSliderConstraint_getMaxAngMotorForce(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getMaxAngMotorForce();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getLinearPos(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btSliderConstraint const *)arg1)->getLinearPos();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getAngularPos(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btSliderConstraint const *)arg1)->getAngularPos();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSolveLinLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getSolveLinLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getLinDepth(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getLinDepth();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getSolveAngLimit(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getSolveAngLimit();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getAngDepth(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getAngDepth();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_calculateTransforms(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btSliderConstraint_testLinLimits(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  (arg1)->testLinLimits();
  
}


void
_wrap_btSliderConstraint_testAngLimits(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  (arg1)->testAngLimits();
  
}


void
_wrap_btSliderConstraint_getAncorInA(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (arg1)->getAncorInA();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSliderConstraint_getAncorInB(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (arg1)->getAncorInB();
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btSliderConstraint_getUseFrameOffset(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (bool)(arg1)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setUseFrameOffset(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  (arg1)->setUseFrameOffset(arg2);
  
}


void
_wrap_btSliderConstraint_setFrames(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btSliderConstraint_setParam__SWIG_0(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btSliderConstraint_setParam__SWIG_1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btSliderConstraint_getParam__SWIG_0(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getParam__SWIG_1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  result = (int)((btSliderConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_serialize(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btSliderConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btSliderConstraint(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSliderConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btSliderConstraint_buildJacobian(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->buildJacobian();
  
}


void
_wrap_btSliderConstraint_setupSolverConstraint(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btSliderConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btSliderConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btSliderConstraint_isEnabled(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setEnabled(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btSliderConstraint_solveConstraintObsolete(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btSliderConstraint_getUserConstraintType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setUserConstraintType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btSliderConstraint_setUserConstraintId(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btSliderConstraint_getUserConstraintId(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setUserConstraintPtr(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btSliderConstraint_getUserConstraintPtr(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_setJointFeedback(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btSliderConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getUid(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_needsFeedback(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_enableFeedback(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btSliderConstraint_getAppliedImpulse(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getConstraintType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btSliderConstraint_setDbgDrawSize(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btSliderConstraint_getDbgDrawSize(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtSliderConstraint_M_objectType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtSliderConstraint_M_objectType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraint_getObjectType(void *swig_v)
{
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_typeConstraintData_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    btTypedConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btSliderConstraintData_m_typeConstraintData_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    btTypedConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_rbAFrame_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btSliderConstraintData_m_rbAFrame_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_rbBFrame_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    btTransformFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = *(btTransformFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btSliderConstraintData_m_rbBFrame_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    btTransformFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  *(btTransformFloatData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_linearUpperLimit_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
  
}


void
_wrap_btSliderConstraintData_m_linearUpperLimit_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_linearUpperLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_linearLowerLimit_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
  
}


void
_wrap_btSliderConstraintData_m_linearLowerLimit_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_linearLowerLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_angularUpperLimit_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
  
}


void
_wrap_btSliderConstraintData_m_angularUpperLimit_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_angularUpperLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_angularLowerLimit_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
  
}


void
_wrap_btSliderConstraintData_m_angularLowerLimit_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_angularLowerLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_useLinearReferenceFrameA_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
  
}


void
_wrap_btSliderConstraintData_m_useLinearReferenceFrameA_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintData_m_useOffsetForConstraintFrame_set(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
  
}


void
_wrap_btSliderConstraintData_m_useOffsetForConstraintFrame_get(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraintData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  swig_a->result = result; 
}


void
_wrap_new_btSliderConstraintData(void *swig_v)
{
  btSliderConstraintData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSliderConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSliderConstraintData *)new btSliderConstraintData();
  *(btSliderConstraintData **)&swig_a->result = result; 
}


void
_wrap_delete_btSliderConstraintData(void *swig_v)
{
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  
  struct swigargs {
    btSliderConstraintData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSliderConstraintDoubleData_m_typeConstraintData_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_typeConstraintData_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_rbAFrame_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_rbAFrame_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_rbBFrame_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    btTransformDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTransformDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_rbBFrame_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    btTransformDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  *(btTransformDoubleData **)&swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_linearUpperLimit_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_linearUpperLimit_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_linearUpperLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_linearLowerLimit_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_linearLowerLimit_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_linearLowerLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_angularUpperLimit_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_angularUpperLimit_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_angularUpperLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_angularLowerLimit_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_angularLowerLimit_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_angularLowerLimit);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_useLinearReferenceFrameA_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_useLinearReferenceFrameA_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  swig_a->result = result; 
}


void
_wrap_btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_set(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
  
}


void
_wrap_btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_get(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int result;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  swig_a->result = result; 
}


void
_wrap_new_btSliderConstraintDoubleData(void *swig_v)
{
  btSliderConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSliderConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSliderConstraintDoubleData *)new btSliderConstraintDoubleData();
  *(btSliderConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btSliderConstraintDoubleData(void *swig_v)
{
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btSliderConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSliderConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btGeneric6DofSpringConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    bool arg5;
    long : 0;
    btGeneric6DofSpringConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  *(btGeneric6DofSpringConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofSpringConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btTransform *arg2;
    bool arg3;
    long : 0;
    btGeneric6DofSpringConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,(btTransform const &)*arg2,arg3);
  *(btGeneric6DofSpringConstraint **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_enableSpring(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  (arg1)->enableSpring(arg2,arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setStiffness(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setStiffness(arg2,arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setDamping(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setDamping(arg2,arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  (arg1)->setEquilibriumPoint();
  
}


void
_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setEquilibriumPoint(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setEquilibriumPoint(arg2,arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setAxis(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getInfo2(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  result = (int)((btGeneric6DofSpringConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_serialize(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btGeneric6DofSpringConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_delete_btGeneric6DofSpringConstraint(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtGeneric6DofSpringConstraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_useSolveConstraintObsolete = arg2;
  
}


void
_wrap_GetbtGeneric6DofSpringConstraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool) ((swig_b0)->m_useSolveConstraintObsolete);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_calculateTransforms__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_calculateTransforms__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calculateTransforms();
  
}


void
_wrap_btGeneric6DofSpringConstraint_getCalculatedTransformA(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getCalculatedTransformA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getCalculatedTransformB(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getCalculatedTransformB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getFrameOffsetA__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getFrameOffsetA__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getFrameOffsetB__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getFrameOffsetB__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_buildJacobian(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->buildJacobian();
  
}


void
_wrap_btGeneric6DofSpringConstraint_getInfo1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo1(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getInfo1NonVirtual(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getInfo2NonVirtual(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
    btVector3 *arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
  
}


void
_wrap_btGeneric6DofSpringConstraint_updateRHS(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->updateRHS(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getAxis(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = ((btGeneric6DofConstraint const *)swig_b0)->getAxis(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btGeneric6DofSpringConstraint_getAngle(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getAngle(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getRelativePivotPosition(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getRelativePivotPosition(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setFrames(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_testAngularLimitMotor(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->testAngularLimitMotor(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setLinearLowerLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLinearLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getLinearLowerLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getLinearLowerLimit(*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setLinearUpperLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLinearUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getLinearUpperLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getLinearUpperLimit(*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setAngularLowerLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setAngularLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getAngularLowerLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getAngularLowerLimit(*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setAngularUpperLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setAngularUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getAngularUpperLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getAngularUpperLimit(*arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getRotationalLimitMotor(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btRotationalLimitMotor *)(swig_b0)->getRotationalLimitMotor(arg2);
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getTranslationalLimitMotor(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTranslationalLimitMotor *)(swig_b0)->getTranslationalLimitMotor();
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setLimit(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btGeneric6DofSpringConstraint_isLimited(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->isLimited(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_calcAnchorPos(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calcAnchorPos();
  
}


void
_wrap_btGeneric6DofSpringConstraint_getUseFrameOffset(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setUseFrameOffset(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setUseFrameOffset(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setParam__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setParam__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setParam(arg2,arg3);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getParam__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getParam__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setupSolverConstraint(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btGeneric6DofSpringConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)(swig_b1)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)((btTypedConstraint const *)swig_b1)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_isEnabled(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (bool)((btTypedConstraint const *)swig_b1)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setEnabled(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setEnabled(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_solveConstraintObsolete(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &(swig_b1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &(swig_b1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getUserConstraintType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setUserConstraintType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintType(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_setUserConstraintId(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintId(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getUserConstraintId(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setUserConstraintPtr(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getUserConstraintPtr(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (void *)(swig_b1)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setJointFeedback(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setJointFeedback(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btJointFeedback *)(swig_b1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getUid(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUid();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_needsFeedback(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (bool)((btTypedConstraint const *)swig_b1)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_enableFeedback(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->enableFeedback(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getAppliedImpulse(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)((btTypedConstraint const *)swig_b1)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getConstraintType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b1)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btGeneric6DofSpringConstraint_setDbgDrawSize(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setDbgDrawSize(arg2);
  
}


void
_wrap_btGeneric6DofSpringConstraint_getDbgDrawSize(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)(swig_b1)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtGeneric6DofSpringConstraint_M_objectType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  if (swig_b2) (swig_b2)->m_objectType = arg2;
  
}


void
_wrap_GetbtGeneric6DofSpringConstraint_M_objectType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  result = (int) ((swig_b2)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraint_getObjectType(void *swig_v)
{
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGeneric6DofSpringConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  result = (int)((btTypedObject const *)swig_b2)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintData_m_6dofData_set(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *arg2 = (btGeneric6DofConstraintData *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    btGeneric6DofConstraintData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  arg2 = *(btGeneric6DofConstraintData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_6dofData = *arg2;
  
}


void
_wrap_btGeneric6DofSpringConstraintData_m_6dofData_get(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    long : 0;
    btGeneric6DofConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  result = (btGeneric6DofConstraintData *)& ((arg1)->m_6dofData);
  *(btGeneric6DofConstraintData **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springEnabled_set(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springEnabled_get(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  result = (int *)(int *) ((arg1)->m_springEnabled);
  *(int **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintData_m_equilibriumPoint_set(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    float *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  arg2 = *(float **)&swig_a->arg2; 
  
  {
    size_t ii;
    float *b = (float *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintData_m_equilibriumPoint_get(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    long : 0;
    float *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  result = (float *)(float *) ((arg1)->m_equilibriumPoint);
  *(float **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springStiffness_set(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    float *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  arg2 = *(float **)&swig_a->arg2; 
  
  {
    size_t ii;
    float *b = (float *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springStiffness_get(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    long : 0;
    float *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  result = (float *)(float *) ((arg1)->m_springStiffness);
  *(float **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springDamping_set(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    float *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  arg2 = *(float **)&swig_a->arg2; 
  
  {
    size_t ii;
    float *b = (float *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintData_m_springDamping_get(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
    long : 0;
    float *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  result = (float *)(float *) ((arg1)->m_springDamping);
  *(float **)&swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofSpringConstraintData(void *swig_v)
{
  btGeneric6DofSpringConstraintData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGeneric6DofSpringConstraintData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGeneric6DofSpringConstraintData *)new btGeneric6DofSpringConstraintData();
  *(btGeneric6DofSpringConstraintData **)&swig_a->result = result; 
}


void
_wrap_delete_btGeneric6DofSpringConstraintData(void *swig_v)
{
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_6dofData_set(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  btGeneric6DofConstraintDoubleData2 *arg2 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    btGeneric6DofConstraintDoubleData2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(btGeneric6DofConstraintDoubleData2 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_6dofData = *arg2;
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_6dofData_get(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    long : 0;
    btGeneric6DofConstraintDoubleData2 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (btGeneric6DofConstraintDoubleData2 *)& ((arg1)->m_6dofData);
  *(btGeneric6DofConstraintDoubleData2 **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_set(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    int *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(int **)&swig_a->arg2; 
  
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_get(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    long : 0;
    int *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (int *)(int *) ((arg1)->m_springEnabled);
  *(int **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_set(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    double *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(double **)&swig_a->arg2; 
  
  {
    size_t ii;
    double *b = (double *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_get(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    long : 0;
    double *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double *)(double *) ((arg1)->m_equilibriumPoint);
  *(double **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_set(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    double *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(double **)&swig_a->arg2; 
  
  {
    size_t ii;
    double *b = (double *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_get(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    long : 0;
    double *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double *)(double *) ((arg1)->m_springStiffness);
  *(double **)&swig_a->result = result; 
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springDamping_set(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    double *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  arg2 = *(double **)&swig_a->arg2; 
  
  {
    size_t ii;
    double *b = (double *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


void
_wrap_btGeneric6DofSpringConstraintDoubleData2_m_springDamping_get(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
    long : 0;
    double *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  result = (double *)(double *) ((arg1)->m_springDamping);
  *(double **)&swig_a->result = result; 
}


void
_wrap_new_btGeneric6DofSpringConstraintDoubleData2(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGeneric6DofSpringConstraintDoubleData2 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGeneric6DofSpringConstraintDoubleData2 *)new btGeneric6DofSpringConstraintDoubleData2();
  *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->result = result; 
}


void
_wrap_delete_btGeneric6DofSpringConstraintDoubleData2(void *swig_v)
{
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  
  struct swigargs {
    btGeneric6DofSpringConstraintDoubleData2 *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGeneric6DofSpringConstraintDoubleData2 **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btUniversalConstraint(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btUniversalConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    long : 0;
    btUniversalConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  result = (btUniversalConstraint *)new btUniversalConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  *(btUniversalConstraint **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAnchor(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAnchor();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAnchor2(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAnchor2();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAxis1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAxis1();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAxis2(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAxis2();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAngle1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getAngle1();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getAngle2(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getAngle2();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setUpperLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setUpperLimit(arg2,arg3);
  
}


void
_wrap_btUniversalConstraint_setLowerLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setLowerLimit(arg2,arg3);
  
}


void
_wrap_btUniversalConstraint_setAxis(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_delete_btUniversalConstraint(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SetbtUniversalConstraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  if (swig_b0) (swig_b0)->m_useSolveConstraintObsolete = arg2;
  
}


void
_wrap_GetbtUniversalConstraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool) ((swig_b0)->m_useSolveConstraintObsolete);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_calculateTransforms__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btUniversalConstraint_calculateTransforms__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calculateTransforms();
  
}


void
_wrap_btUniversalConstraint_getCalculatedTransformA(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getCalculatedTransformA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getCalculatedTransformB(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getCalculatedTransformB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getFrameOffsetA__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getFrameOffsetA__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getFrameOffsetB__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b0)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getFrameOffsetB__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTransform *) &(swig_b0)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_buildJacobian(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->buildJacobian();
  
}


void
_wrap_btUniversalConstraint_getInfo1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo1(arg2);
  
}


void
_wrap_btUniversalConstraint_getInfo1NonVirtual(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btUniversalConstraint_getInfo2(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo2(arg2);
  
}


void
_wrap_btUniversalConstraint_getInfo2NonVirtual(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
    btVector3 *arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
  
}


void
_wrap_btUniversalConstraint_updateRHS(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->updateRHS(arg2);
  
}


void
_wrap_btUniversalConstraint_getAxis(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = ((btGeneric6DofConstraint const *)swig_b0)->getAxis(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btUniversalConstraint_getAngle(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getAngle(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getRelativePivotPosition(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getRelativePivotPosition(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setFrames(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btUniversalConstraint_testAngularLimitMotor(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->testAngularLimitMotor(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setLinearLowerLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLinearLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btUniversalConstraint_getLinearLowerLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getLinearLowerLimit(*arg2);
  
}


void
_wrap_btUniversalConstraint_setLinearUpperLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLinearUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btUniversalConstraint_getLinearUpperLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getLinearUpperLimit(*arg2);
  
}


void
_wrap_btUniversalConstraint_setAngularLowerLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setAngularLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btUniversalConstraint_getAngularLowerLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getAngularLowerLimit(*arg2);
  
}


void
_wrap_btUniversalConstraint_setAngularUpperLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setAngularUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btUniversalConstraint_getAngularUpperLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->getAngularUpperLimit(*arg2);
  
}


void
_wrap_btUniversalConstraint_getRotationalLimitMotor(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btRotationalLimitMotor *)(swig_b0)->getRotationalLimitMotor(arg2);
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getTranslationalLimitMotor(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btTranslationalLimitMotor *)(swig_b0)->getTranslationalLimitMotor();
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setLimit(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btUniversalConstraint_isLimited(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->isLimited(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_calcAnchorPos(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->calcAnchorPos();
  
}


void
_wrap_btUniversalConstraint_getUseFrameOffset(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (bool)(swig_b0)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setUseFrameOffset(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setUseFrameOffset(arg2);
  
}


void
_wrap_btUniversalConstraint_setParam__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btUniversalConstraint_setParam__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  (swig_b0)->setParam(arg2,arg3);
  
}


void
_wrap_btUniversalConstraint_getParam__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getParam__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b0)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (int)((btGeneric6DofConstraint const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_serialize(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  result = (char *)((btGeneric6DofConstraint const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btUniversalConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btUniversalConstraint_setupSolverConstraint(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btUniversalConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btUniversalConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)(swig_b1)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)((btTypedConstraint const *)swig_b1)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btUniversalConstraint_isEnabled(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (bool)((btTypedConstraint const *)swig_b1)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setEnabled(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setEnabled(arg2);
  
}


void
_wrap_btUniversalConstraint_solveConstraintObsolete(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btUniversalConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &(swig_b1)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btRigidBody *) &(swig_b1)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getUserConstraintType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setUserConstraintType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintType(arg2);
  
}


void
_wrap_btUniversalConstraint_setUserConstraintId(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintId(arg2);
  
}


void
_wrap_btUniversalConstraint_getUserConstraintId(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setUserConstraintPtr(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btUniversalConstraint_getUserConstraintPtr(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (void *)(swig_b1)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_setJointFeedback(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setJointFeedback(arg2);
  
}


void
_wrap_btUniversalConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btJointFeedback *)(swig_b1)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getUid(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (int)((btTypedConstraint const *)swig_b1)->getUid();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_needsFeedback(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (bool)((btTypedConstraint const *)swig_b1)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_enableFeedback(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->enableFeedback(arg2);
  
}


void
_wrap_btUniversalConstraint_getAppliedImpulse(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)((btTypedConstraint const *)swig_b1)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getConstraintType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b1)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btUniversalConstraint_setDbgDrawSize(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  (swig_b1)->setDbgDrawSize(arg2);
  
}


void
_wrap_btUniversalConstraint_getDbgDrawSize(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  result = (btScalar)(swig_b1)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtUniversalConstraint_M_objectType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  if (swig_b2) (swig_b2)->m_objectType = arg2;
  
}


void
_wrap_GetbtUniversalConstraint_M_objectType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  result = (int) ((swig_b2)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btUniversalConstraint_getObjectType(void *swig_v)
{
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btUniversalConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btUniversalConstraint **)&swig_a->arg1; 
  
  btGeneric6DofConstraint *swig_b0 = (btGeneric6DofConstraint *)swig_a->arg1;
  btTypedConstraint *swig_b1 = (btTypedConstraint *)swig_b0;
  btTypedObject *swig_b2 = (btTypedObject *)swig_b1;
  result = (int)((btTypedObject const *)swig_b2)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_new_btHinge2Constraint(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btHinge2Constraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    btVector3 *arg5;
    long : 0;
    btHinge2Constraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  
  result = (btHinge2Constraint *)new btHinge2Constraint(*arg1,*arg2,*arg3,*arg4,*arg5);
  *(btHinge2Constraint **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAnchor(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAnchor();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAnchor2(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAnchor2();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAxis1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAxis1();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAxis2(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &(arg1)->getAxis2();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAngle1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getAngle1();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getAngle2(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  result = (btScalar)(arg1)->getAngle2();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setUpperLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setUpperLimit(arg2);
  
}


void
_wrap_btHinge2Constraint_setLowerLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setLowerLimit(arg2);
  
}


void
_wrap_delete_btHinge2Constraint(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btHinge2Constraint_enableSpring(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    bool arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (bool)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->enableSpring(arg2,arg3);
  
}


void
_wrap_btHinge2Constraint_setStiffness(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setStiffness(arg2,arg3);
  
}


void
_wrap_btHinge2Constraint_setDamping(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setDamping(arg2,arg3);
  
}


void
_wrap_btHinge2Constraint_setEquilibriumPoint__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setEquilibriumPoint();
  
}


void
_wrap_btHinge2Constraint_setEquilibriumPoint__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setEquilibriumPoint(arg2);
  
}


void
_wrap_btHinge2Constraint_setEquilibriumPoint__SWIG_2(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setEquilibriumPoint(arg2,arg3);
  
}


void
_wrap_btHinge2Constraint_setAxis(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
}


void
_wrap_btHinge2Constraint_getInfo2(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  (swig_b0)->getInfo2(arg2);
  
}


void
_wrap_btHinge2Constraint_calculateSerializeBufferSize(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  result = (int)((btGeneric6DofSpringConstraint const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_serialize(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  result = (char *)((btGeneric6DofSpringConstraint const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_SetbtHinge2Constraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  if (swig_b1) (swig_b1)->m_useSolveConstraintObsolete = arg2;
  
}


void
_wrap_GetbtHinge2Constraint_M_useSolveConstraintObsolete(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (bool) ((swig_b1)->m_useSolveConstraintObsolete);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_calculateTransforms__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btHinge2Constraint_calculateTransforms__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->calculateTransforms();
  
}


void
_wrap_btHinge2Constraint_getCalculatedTransformA(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b1)->getCalculatedTransformA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getCalculatedTransformB(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b1)->getCalculatedTransformB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getFrameOffsetA__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getFrameOffsetA__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &(swig_b1)->getFrameOffsetA();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getFrameOffsetB__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &((btGeneric6DofConstraint const *)swig_b1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getFrameOffsetB__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTransform *) &(swig_b1)->getFrameOffsetB();
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_buildJacobian(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->buildJacobian();
  
}


void
_wrap_btHinge2Constraint_getInfo1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getInfo1(arg2);
  
}


void
_wrap_btHinge2Constraint_getInfo1NonVirtual(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getInfo1NonVirtual(arg2);
  
}


void
_wrap_btHinge2Constraint_getInfo2NonVirtual(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btConstraintInfo2 *arg2;
    btTransform *arg3;
    btTransform *arg4;
    btVector3 *arg5;
    btVector3 *arg6;
    btVector3 *arg7;
    btVector3 *arg8;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  arg5 = *(btVector3 **)&swig_a->arg5; 
  arg6 = *(btVector3 **)&swig_a->arg6; 
  arg7 = *(btVector3 **)&swig_a->arg7; 
  arg8 = *(btVector3 **)&swig_a->arg8; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
  
}


void
_wrap_btHinge2Constraint_updateRHS(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->updateRHS(arg2);
  
}


void
_wrap_btHinge2Constraint_getAxis(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = ((btGeneric6DofConstraint const *)swig_b1)->getAxis(arg2);
  *(btVector3 **)&swig_a->result = new btVector3(result); 
}


void
_wrap_btHinge2Constraint_getAngle(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b1)->getAngle(arg2);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getRelativePivotPosition(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b1)->getRelativePivotPosition(arg2);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setFrames(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btTransform *arg2;
    btTransform *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
}


void
_wrap_btHinge2Constraint_testAngularLimitMotor(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (bool)(swig_b1)->testAngularLimitMotor(arg2);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setLinearLowerLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setLinearLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btHinge2Constraint_getLinearLowerLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getLinearLowerLimit(*arg2);
  
}


void
_wrap_btHinge2Constraint_setLinearUpperLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setLinearUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btHinge2Constraint_getLinearUpperLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getLinearUpperLimit(*arg2);
  
}


void
_wrap_btHinge2Constraint_setAngularLowerLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setAngularLowerLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btHinge2Constraint_getAngularLowerLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getAngularLowerLimit(*arg2);
  
}


void
_wrap_btHinge2Constraint_setAngularUpperLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setAngularUpperLimit((btVector3 const &)*arg2);
  
}


void
_wrap_btHinge2Constraint_getAngularUpperLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->getAngularUpperLimit(*arg2);
  
}


void
_wrap_btHinge2Constraint_getRotationalLimitMotor(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    btRotationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btRotationalLimitMotor *)(swig_b1)->getRotationalLimitMotor(arg2);
  *(btRotationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getTranslationalLimitMotor(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btTranslationalLimitMotor *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btTranslationalLimitMotor *)(swig_b1)->getTranslationalLimitMotor();
  *(btTranslationalLimitMotor **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setLimit(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setLimit(arg2,arg3,arg4);
  
}


void
_wrap_btHinge2Constraint_isLimited(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (bool)(swig_b1)->isLimited(arg2);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_calcAnchorPos(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->calcAnchorPos();
  
}


void
_wrap_btHinge2Constraint_getUseFrameOffset(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (bool)(swig_b1)->getUseFrameOffset();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setUseFrameOffset(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setUseFrameOffset(arg2);
  
}


void
_wrap_btHinge2Constraint_setParam__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btHinge2Constraint_setParam__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  (swig_b1)->setParam(arg2,arg3);
  
}


void
_wrap_btHinge2Constraint_getParam__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getParam__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  result = (btScalar)((btGeneric6DofConstraint const *)swig_b1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getOverrideNumSolverIterations(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (int)((btTypedConstraint const *)swig_b2)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setOverrideNumSolverIterations(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btHinge2Constraint_setupSolverConstraint(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btHinge2Constraint_internalSetAppliedImpulse(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btHinge2Constraint_internalGetAppliedImpulse(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btScalar)(swig_b2)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getBreakingImpulseThreshold(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btScalar)((btTypedConstraint const *)swig_b2)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setBreakingImpulseThreshold(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btHinge2Constraint_isEnabled(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (bool)((btTypedConstraint const *)swig_b2)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setEnabled(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setEnabled(arg2);
  
}


void
_wrap_btHinge2Constraint_solveConstraintObsolete(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btHinge2Constraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b2)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btRigidBody *) &(swig_b2)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b2)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btRigidBody *) &(swig_b2)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getUserConstraintType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (int)((btTypedConstraint const *)swig_b2)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setUserConstraintType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setUserConstraintType(arg2);
  
}


void
_wrap_btHinge2Constraint_setUserConstraintId(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setUserConstraintId(arg2);
  
}


void
_wrap_btHinge2Constraint_getUserConstraintId(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (int)((btTypedConstraint const *)swig_b2)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setUserConstraintPtr(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btHinge2Constraint_getUserConstraintPtr(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (void *)(swig_b2)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_setJointFeedback(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setJointFeedback(arg2);
  
}


void
_wrap_btHinge2Constraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b2)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btJointFeedback *)(swig_b2)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getUid(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (int)((btTypedConstraint const *)swig_b2)->getUid();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_needsFeedback(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (bool)((btTypedConstraint const *)swig_b2)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_enableFeedback(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->enableFeedback(arg2);
  
}


void
_wrap_btHinge2Constraint_getAppliedImpulse(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btScalar)((btTypedConstraint const *)swig_b2)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getConstraintType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b2)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btHinge2Constraint_setDbgDrawSize(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  (swig_b2)->setDbgDrawSize(arg2);
  
}


void
_wrap_btHinge2Constraint_getDbgDrawSize(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  result = (btScalar)(swig_b2)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtHinge2Constraint_M_objectType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  btTypedObject *swig_b3 = (btTypedObject *)swig_b2;
  if (swig_b3) (swig_b3)->m_objectType = arg2;
  
}


void
_wrap_GetbtHinge2Constraint_M_objectType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  btTypedObject *swig_b3 = (btTypedObject *)swig_b2;
  result = (int) ((swig_b3)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btHinge2Constraint_getObjectType(void *swig_v)
{
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  int result;
  
  struct swigargs {
    btHinge2Constraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btHinge2Constraint **)&swig_a->arg1; 
  
  btGeneric6DofSpringConstraint *swig_b0 = (btGeneric6DofSpringConstraint *)swig_a->arg1;
  btGeneric6DofConstraint *swig_b1 = (btGeneric6DofConstraint *)swig_b0;
  btTypedConstraint *swig_b2 = (btTypedConstraint *)swig_b1;
  btTypedObject *swig_b3 = (btTypedObject *)swig_b2;
  result = (int)((btTypedObject const *)swig_b3)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_new_btGearConstraint__SWIG_0(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btGearConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    float arg5;
    long : 0;
    btGearConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  *(btGearConstraint **)&swig_a->result = result; 
}


void
_wrap_new_btGearConstraint__SWIG_1(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btGearConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btVector3 *arg3;
    btVector3 *arg4;
    long : 0;
    btGearConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVector3 **)&swig_a->arg4; 
  
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  *(btGearConstraint **)&swig_a->result = result; 
}


void
_wrap_delete_btGearConstraint(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btGearConstraint_getInfo1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btGearConstraint_getInfo2(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btGearConstraint_setAxisA(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAxisA(*arg2);
  
}


void
_wrap_btGearConstraint_setAxisB(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  (arg1)->setAxisB(*arg2);
  
}


void
_wrap_btGearConstraint_setRatio(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  (arg1)->setRatio(arg2);
  
}


void
_wrap_btGearConstraint_getAxisA(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btGearConstraint const *)arg1)->getAxisA();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getAxisB(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  result = (btVector3 *) &((btGearConstraint const *)arg1)->getAxisB();
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getRatio(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  result = (btScalar)((btGearConstraint const *)arg1)->getRatio();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setParam__SWIG_0(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btGearConstraint_setParam__SWIG_1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btGearConstraint_getParam__SWIG_0(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_getParam__SWIG_1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  result = (int)((btGearConstraint const *)arg1)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_serialize(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  result = (char *)((btGearConstraint const *)arg1)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_btGearConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btGearConstraint_buildJacobian(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->buildJacobian();
  
}


void
_wrap_btGearConstraint_setupSolverConstraint(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btGearConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btGearConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btGearConstraint_isEnabled(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setEnabled(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btGearConstraint_solveConstraintObsolete(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btGearConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getUserConstraintType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setUserConstraintType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btGearConstraint_setUserConstraintId(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btGearConstraint_getUserConstraintId(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_setUserConstraintPtr(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btGearConstraint_getUserConstraintPtr(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_setJointFeedback(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btGearConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btGearConstraint_getUid(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_needsFeedback(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_enableFeedback(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btGearConstraint_getAppliedImpulse(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_getConstraintType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btGearConstraint_setDbgDrawSize(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btGearConstraint_getDbgDrawSize(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_SetbtGearConstraint_M_objectType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btGearConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtGearConstraint_M_objectType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btGearConstraint_getObjectType(void *swig_v)
{
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btGearConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_btGearConstraintFloatData_m_typeConstraintData_set(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btTypedConstraintFloatData *arg2 = (btTypedConstraintFloatData *) 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    btTypedConstraintFloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintFloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btGearConstraintFloatData_m_typeConstraintData_get(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btTypedConstraintFloatData *result = 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    long : 0;
    btTypedConstraintFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  result = (btTypedConstraintFloatData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintFloatData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintFloatData_m_axisInA_set(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_axisInA = *arg2;
  
}


void
_wrap_btGearConstraintFloatData_m_axisInA_get(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_axisInA);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintFloatData_m_axisInB_set(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    btVector3FloatData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  arg2 = *(btVector3FloatData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_axisInB = *arg2;
  
}


void
_wrap_btGearConstraintFloatData_m_axisInB_get(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    long : 0;
    btVector3FloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  result = (btVector3FloatData *)& ((arg1)->m_axisInB);
  *(btVector3FloatData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintFloatData_m_ratio_set(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  float arg2 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ratio = arg2;
  
}


void
_wrap_btGearConstraintFloatData_m_ratio_get(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  float result;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  result = (float) ((arg1)->m_ratio);
  swig_a->result = result; 
}


void
_wrap_btGearConstraintFloatData_m_padding_set(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  char *arg2 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
}


void
_wrap_btGearConstraintFloatData_m_padding_get(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  result = (char *)(char *) ((arg1)->m_padding);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_new_btGearConstraintFloatData(void *swig_v)
{
  btGearConstraintFloatData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGearConstraintFloatData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGearConstraintFloatData *)new btGearConstraintFloatData();
  *(btGearConstraintFloatData **)&swig_a->result = result; 
}


void
_wrap_delete_btGearConstraintFloatData(void *swig_v)
{
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  
  struct swigargs {
    btGearConstraintFloatData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintFloatData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btGearConstraintDoubleData_m_typeConstraintData_set(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    btTypedConstraintDoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btTypedConstraintDoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
}


void
_wrap_btGearConstraintDoubleData_m_typeConstraintData_get(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    long : 0;
    btTypedConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  *(btTypedConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintDoubleData_m_axisInA_set(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_axisInA = *arg2;
  
}


void
_wrap_btGearConstraintDoubleData_m_axisInA_get(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_axisInA);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintDoubleData_m_axisInB_set(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    btVector3DoubleData *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  arg2 = *(btVector3DoubleData **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_axisInB = *arg2;
  
}


void
_wrap_btGearConstraintDoubleData_m_axisInB_get(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    long : 0;
    btVector3DoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  
  result = (btVector3DoubleData *)& ((arg1)->m_axisInB);
  *(btVector3DoubleData **)&swig_a->result = result; 
}


void
_wrap_btGearConstraintDoubleData_m_ratio_set(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  double arg2 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    double arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  arg2 = (double)swig_a->arg2; 
  
  if (arg1) (arg1)->m_ratio = arg2;
  
}


void
_wrap_btGearConstraintDoubleData_m_ratio_get(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  double result;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
    long : 0;
    double result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  
  result = (double) ((arg1)->m_ratio);
  swig_a->result = result; 
}


void
_wrap_new_btGearConstraintDoubleData(void *swig_v)
{
  btGearConstraintDoubleData *result = 0 ;
  
  struct swigargs {
    long : 0;
    btGearConstraintDoubleData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btGearConstraintDoubleData *)new btGearConstraintDoubleData();
  *(btGearConstraintDoubleData **)&swig_a->result = result; 
}


void
_wrap_delete_btGearConstraintDoubleData(void *swig_v)
{
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  
  struct swigargs {
    btGearConstraintDoubleData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btGearConstraintDoubleData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_btFixedConstraint(void *swig_v)
{
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btFixedConstraint *result = 0 ;
  
  struct swigargs {
    btRigidBody *arg1;
    btRigidBody *arg2;
    btTransform *arg3;
    btTransform *arg4;
    long : 0;
    btFixedConstraint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btRigidBody **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(btTransform **)&swig_a->arg3; 
  arg4 = *(btTransform **)&swig_a->arg4; 
  
  result = (btFixedConstraint *)new btFixedConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  *(btFixedConstraint **)&swig_a->result = result; 
}


void
_wrap_delete_btFixedConstraint(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btFixedConstraint_getInfo1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    btConstraintInfo1 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo1 **)&swig_a->arg2; 
  
  (arg1)->getInfo1(arg2);
  
}


void
_wrap_btFixedConstraint_getInfo2(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    btConstraintInfo2 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintInfo2 **)&swig_a->arg2; 
  
  (arg1)->getInfo2(arg2);
  
}


void
_wrap_btFixedConstraint_setParam__SWIG_0(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
    float arg3;
    intgo arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  
  (arg1)->setParam(arg2,arg3,arg4);
  
}


void
_wrap_btFixedConstraint_setParam__SWIG_1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->setParam(arg2,arg3);
  
}


void
_wrap_btFixedConstraint_getParam__SWIG_0(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (btScalar)((btFixedConstraint const *)arg1)->getParam(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getParam__SWIG_1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (btScalar)((btFixedConstraint const *)arg1)->getParam(arg2);
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getFixedBody(void *swig_v)
{
  btRigidBody *result = 0 ;
  
  struct swigargs {
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getOverrideNumSolverIterations(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getOverrideNumSolverIterations();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setOverrideNumSolverIterations(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setOverrideNumSolverIterations(arg2);
  
}


void
_wrap_btFixedConstraint_buildJacobian(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->buildJacobian();
  
}


void
_wrap_btFixedConstraint_setupSolverConstraint(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    btAlignedObjectArray< btSolverConstraint > *arg2;
    intgo arg3;
    intgo arg4;
    float arg5;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(btConstraintArray **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (btScalar)swig_a->arg5; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
}


void
_wrap_btFixedConstraint_internalSetAppliedImpulse(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->internalSetAppliedImpulse(arg2);
  
}


void
_wrap_btFixedConstraint_internalGetAppliedImpulse(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->internalGetAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getBreakingImpulseThreshold(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getBreakingImpulseThreshold();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setBreakingImpulseThreshold(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setBreakingImpulseThreshold(arg2);
  
}


void
_wrap_btFixedConstraint_isEnabled(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->isEnabled();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setEnabled(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setEnabled(arg2);
  
}


void
_wrap_btFixedConstraint_solveConstraintObsolete(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    btSolverBody *arg2;
    btSolverBody *arg3;
    float arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(btSolverBody **)&swig_a->arg2; 
  arg3 = *(btSolverBody **)&swig_a->arg3; 
  arg4 = (btScalar)swig_a->arg4; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
}


void
_wrap_btFixedConstraint_getRigidBodyA__SWIG_0(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getRigidBodyA__SWIG_1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyA();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getRigidBodyB__SWIG_0(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &((btTypedConstraint const *)swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getRigidBodyB__SWIG_1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btRigidBody *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btRigidBody *) &(swig_b0)->getRigidBodyB();
  *(btRigidBody **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getUserConstraintType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintType();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setUserConstraintType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintType(arg2);
  
}


void
_wrap_btFixedConstraint_setUserConstraintId(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintId(arg2);
  
}


void
_wrap_btFixedConstraint_getUserConstraintId(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUserConstraintId();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setUserConstraintPtr(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setUserConstraintPtr(arg2);
  
}


void
_wrap_btFixedConstraint_getUserConstraintPtr(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (void *)(swig_b0)->getUserConstraintPtr();
  *(void **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_setJointFeedback(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    btJointFeedback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(btJointFeedback **)&swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setJointFeedback(arg2);
  
}


void
_wrap_btFixedConstraint_getJointFeedback__SWIG_0(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)((btTypedConstraint const *)swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getJointFeedback__SWIG_1(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    btJointFeedback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btJointFeedback *)(swig_b0)->getJointFeedback();
  *(btJointFeedback **)&swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getUid(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->getUid();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_needsFeedback(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  bool result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (bool)((btTypedConstraint const *)swig_b0)->needsFeedback();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_enableFeedback(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->enableFeedback(arg2);
  
}


void
_wrap_btFixedConstraint_getAppliedImpulse(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)((btTypedConstraint const *)swig_b0)->getAppliedImpulse();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getConstraintType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btTypedConstraintType result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btTypedConstraintType)((btTypedConstraint const *)swig_b0)->getConstraintType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btFixedConstraint_setDbgDrawSize(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  (swig_b0)->setDbgDrawSize(arg2);
  
}


void
_wrap_btFixedConstraint_getDbgDrawSize(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btScalar result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (btScalar)(swig_b0)->getDbgDrawSize();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_calculateSerializeBufferSize(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (int)((btTypedConstraint const *)swig_b0)->calculateSerializeBufferSize();
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_serialize(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    void *arg2;
    btSerializer *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = *(btSerializer **)&swig_a->arg3; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  result = (char *)((btTypedConstraint const *)swig_b0)->serialize(arg2,arg3);
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_SetbtFixedConstraint_M_objectType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    btFixedConstraint *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  if (swig_b1) (swig_b1)->m_objectType = arg2;
  
}


void
_wrap_GetbtFixedConstraint_M_objectType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int) ((swig_b1)->m_objectType);
  swig_a->result = result; 
}


void
_wrap_btFixedConstraint_getObjectType(void *swig_v)
{
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int result;
  
  struct swigargs {
    btFixedConstraint *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btFixedConstraint **)&swig_a->arg1; 
  
  btTypedConstraint *swig_b0 = (btTypedConstraint *)swig_a->arg1;
  btTypedObject *swig_b1 = (btTypedObject *)swig_b0;
  result = (int)((btTypedObject const *)swig_b1)->getObjectType();
  swig_a->result = result; 
}


void
_wrap_BT_SEQUENTIAL_IMPULSE_SOLVER(void *swig_v)
{
  btConstraintSolverType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_SEQUENTIAL_IMPULSE_SOLVER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_BT_MLCP_SOLVER(void *swig_v)
{
  btConstraintSolverType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = BT_MLCP_SOLVER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_btConstraintSolver(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  
  struct swigargs {
    btConstraintSolver *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btConstraintSolver_prepareSolve(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btConstraintSolver *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->prepareSolve(arg2,arg3);
  
}


void
_wrap_btConstraintSolver_solveGroup(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btDispatcher *arg10 = (btDispatcher *) 0 ;
  btScalar result;
  
  struct swigargs {
    btConstraintSolver *arg1;
    btCollisionObject **arg2;
    intgo arg3;
    btPersistentManifold **arg4;
    intgo arg5;
    btTypedConstraint **arg6;
    intgo arg7;
    btContactSolverInfo *arg8;
    btIDebugDraw *arg9;
    btDispatcher *arg10;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  arg2 = *(btCollisionObject ***)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = *(btPersistentManifold ***)&swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = *(btTypedConstraint ***)&swig_a->arg6; 
  arg7 = (int)swig_a->arg7; 
  arg8 = *(btContactSolverInfo **)&swig_a->arg8; 
  arg9 = *(btIDebugDraw **)&swig_a->arg9; 
  arg10 = *(btDispatcher **)&swig_a->arg10; 
  
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10);
  swig_a->result = result; 
}


void
_wrap_btConstraintSolver_allSolved(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btContactSolverInfo *arg2 = 0 ;
  btIDebugDraw *arg3 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btConstraintSolver *arg1;
    btContactSolverInfo *arg2;
    btIDebugDraw *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  arg2 = *(btContactSolverInfo **)&swig_a->arg2; 
  arg3 = *(btIDebugDraw **)&swig_a->arg3; 
  
  (arg1)->allSolved((btContactSolverInfo const &)*arg2,arg3);
  
}


void
_wrap_btConstraintSolver_reset(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  
  struct swigargs {
    btConstraintSolver *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  
  (arg1)->reset();
  
}


void
_wrap_btConstraintSolver_getSolverType(void *swig_v)
{
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btConstraintSolverType result;
  
  struct swigargs {
    btConstraintSolver *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btConstraintSolver **)&swig_a->arg1; 
  
  result = (btConstraintSolverType)((btConstraintSolver const *)arg1)->getSolverType();
  swig_a->result = (intgo)result; 
}


void
_wrap_new_btSequentialImpulseConstraintSolver(void *swig_v)
{
  btSequentialImpulseConstraintSolver *result = 0 ;
  
  struct swigargs {
    long : 0;
    btSequentialImpulseConstraintSolver *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btSequentialImpulseConstraintSolver *)new btSequentialImpulseConstraintSolver();
  *(btSequentialImpulseConstraintSolver **)&swig_a->result = result; 
}


void
_wrap_delete_btSequentialImpulseConstraintSolver(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btSequentialImpulseConstraintSolver_solveGroup(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btDispatcher *arg10 = (btDispatcher *) 0 ;
  btScalar result;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    btCollisionObject **arg2;
    intgo arg3;
    btPersistentManifold **arg4;
    intgo arg5;
    btTypedConstraint **arg6;
    intgo arg7;
    btContactSolverInfo *arg8;
    btIDebugDraw *arg9;
    btDispatcher *arg10;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  arg2 = *(btCollisionObject ***)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = *(btPersistentManifold ***)&swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = *(btTypedConstraint ***)&swig_a->arg6; 
  arg7 = (int)swig_a->arg7; 
  arg8 = *(btContactSolverInfo **)&swig_a->arg8; 
  arg9 = *(btIDebugDraw **)&swig_a->arg9; 
  arg10 = *(btDispatcher **)&swig_a->arg10; 
  
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10);
  swig_a->result = result; 
}


void
_wrap_btSequentialImpulseConstraintSolver_reset(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  
  (arg1)->reset();
  
}


void
_wrap_btSequentialImpulseConstraintSolver_btRand2(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  
  result = (unsigned long)(arg1)->btRand2();
  swig_a->result = result; 
}


void
_wrap_btSequentialImpulseConstraintSolver_btRandInt2(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    intgo arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)(arg1)->btRandInt2(arg2);
  swig_a->result = result; 
}


void
_wrap_btSequentialImpulseConstraintSolver_setRandSeed(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long arg2 ;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  arg2 = (unsigned long)swig_a->arg2; 
  
  (arg1)->setRandSeed(arg2);
  
}


void
_wrap_btSequentialImpulseConstraintSolver_getRandSeed(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  
  result = (unsigned long)((btSequentialImpulseConstraintSolver const *)arg1)->getRandSeed();
  swig_a->result = result; 
}


void
_wrap_btSequentialImpulseConstraintSolver_getSolverType(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btConstraintSolverType result;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  
  result = (btConstraintSolverType)((btSequentialImpulseConstraintSolver const *)arg1)->getSolverType();
  swig_a->result = (intgo)result; 
}


void
_wrap_btSequentialImpulseConstraintSolver_prepareSolve(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    intgo arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  btConstraintSolver *swig_b0 = (btConstraintSolver *)swig_a->arg1;
  (swig_b0)->prepareSolve(arg2,arg3);
  
}


void
_wrap_btSequentialImpulseConstraintSolver_allSolved(void *swig_v)
{
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btContactSolverInfo *arg2 = 0 ;
  btIDebugDraw *arg3 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btSequentialImpulseConstraintSolver *arg1;
    btContactSolverInfo *arg2;
    btIDebugDraw *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btSequentialImpulseConstraintSolver **)&swig_a->arg1; 
  arg2 = *(btContactSolverInfo **)&swig_a->arg2; 
  arg3 = *(btIDebugDraw **)&swig_a->arg3; 
  
  btConstraintSolver *swig_b0 = (btConstraintSolver *)swig_a->arg1;
  (swig_b0)->allSolved((btContactSolverInfo const &)*arg2,arg3);
  
}


void
_wrap_delete_btVehicleRaycaster(void *swig_v)
{
  btVehicleRaycaster *arg1 = (btVehicleRaycaster *) 0 ;
  
  struct swigargs {
    btVehicleRaycaster *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVehicleRaycaster **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btVehicleRaycaster_castRay(void *swig_v)
{
  btVehicleRaycaster *arg1 = (btVehicleRaycaster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVehicleRaycasterResult *arg4 = 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btVehicleRaycaster *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVehicleRaycasterResult *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btVehicleRaycaster **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVehicleRaycasterResult **)&swig_a->arg4; 
  
  result = (void *)(arg1)->castRay((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_chassisConnectionCS = *arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_chassisConnectionCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_suspensionRestLength = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_suspensionRestLength);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelRadius_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelRadius = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelRadius_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelRadius);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_frictionSlip_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_frictionSlip = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_frictionSlip_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_frictionSlip);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_maxSuspensionForce_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxSuspensionForce = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_maxSuspensionForce_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxSuspensionForce);
  swig_a->result = result; 
}


void
_wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_set(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
  
}


void
_wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_get(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_bIsFrontWheel);
  swig_a->result = result; 
}


void
_wrap_new_btWheelInfoConstructionInfo(void *swig_v)
{
  btWheelInfoConstructionInfo *result = 0 ;
  
  struct swigargs {
    long : 0;
    btWheelInfoConstructionInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (btWheelInfoConstructionInfo *)new btWheelInfoConstructionInfo();
  *(btWheelInfoConstructionInfo **)&swig_a->result = result; 
}


void
_wrap_delete_btWheelInfoConstructionInfo(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btWheelInfo_m_raycastInfo_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  RaycastInfo arg2 ;
  RaycastInfo *argp2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    RaycastInfo *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  argp2 = (RaycastInfo *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null RaycastInfo");
  }
  arg2 = (RaycastInfo)*argp2;
  
  
  if (arg1) (arg1)->m_raycastInfo = arg2;
  
}


void
_wrap_btWheelInfo_m_raycastInfo_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  RaycastInfo result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    RaycastInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result =  ((arg1)->m_raycastInfo);
  *(RaycastInfo **)&swig_a->result = new RaycastInfo(result); 
}


void
_wrap_btWheelInfo_m_worldTransform_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    btTransform *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(btTransform **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
}


void
_wrap_btWheelInfo_m_worldTransform_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *result = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    btTransform *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btTransform *)& ((arg1)->m_worldTransform);
  *(btTransform **)&swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_chassisConnectionPointCS_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_chassisConnectionPointCS = *arg2;
  
}


void
_wrap_btWheelInfo_m_chassisConnectionPointCS_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_chassisConnectionPointCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelDirectionCS_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
  
}


void
_wrap_btWheelInfo_m_wheelDirectionCS_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelAxleCS_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    btVector3 *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
  
}


void
_wrap_btWheelInfo_m_wheelAxleCS_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    btVector3 *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  *(btVector3 **)&swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_suspensionRestLength1_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_suspensionRestLength1 = arg2;
  
}


void
_wrap_btWheelInfo_m_suspensionRestLength1_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_suspensionRestLength1);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_maxSuspensionTravelCm_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
  
}


void
_wrap_btWheelInfo_m_maxSuspensionTravelCm_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_getSuspensionRestLength(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar)((btWheelInfo const *)arg1)->getSuspensionRestLength();
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelsRadius_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsRadius = arg2;
  
}


void
_wrap_btWheelInfo_m_wheelsRadius_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsRadius);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_suspensionStiffness_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
  
}


void
_wrap_btWheelInfo_m_suspensionStiffness_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelsDampingCompression_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
  
}


void
_wrap_btWheelInfo_m_wheelsDampingCompression_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelsDampingRelaxation_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
  
}


void
_wrap_btWheelInfo_m_wheelsDampingRelaxation_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_frictionSlip_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_frictionSlip = arg2;
  
}


void
_wrap_btWheelInfo_m_frictionSlip_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_frictionSlip);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_steering_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_steering = arg2;
  
}


void
_wrap_btWheelInfo_m_steering_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_steering);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_rotation_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rotation = arg2;
  
}


void
_wrap_btWheelInfo_m_rotation_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_rotation);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_deltaRotation_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_deltaRotation = arg2;
  
}


void
_wrap_btWheelInfo_m_deltaRotation_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_deltaRotation);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_rollInfluence_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_rollInfluence = arg2;
  
}


void
_wrap_btWheelInfo_m_rollInfluence_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_rollInfluence);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_maxSuspensionForce_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_maxSuspensionForce = arg2;
  
}


void
_wrap_btWheelInfo_m_maxSuspensionForce_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_maxSuspensionForce);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_engineForce_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_engineForce = arg2;
  
}


void
_wrap_btWheelInfo_m_engineForce_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_engineForce);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_brake_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_brake = arg2;
  
}


void
_wrap_btWheelInfo_m_brake_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_brake);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_bIsFrontWheel_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
  
}


void
_wrap_btWheelInfo_m_bIsFrontWheel_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->m_bIsFrontWheel);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_clientInfo_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    void *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_clientInfo = arg2;
  
}


void
_wrap_btWheelInfo_m_clientInfo_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (void *) ((arg1)->m_clientInfo);
  *(void **)&swig_a->result = result; 
}


void
_wrap_new_btWheelInfo(void *swig_v)
{
  btWheelInfoConstructionInfo *arg1 = 0 ;
  btWheelInfo *result = 0 ;
  
  struct swigargs {
    btWheelInfoConstructionInfo *arg1;
    long : 0;
    btWheelInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfoConstructionInfo **)&swig_a->arg1; 
  
  result = (btWheelInfo *)new btWheelInfo(*arg1);
  *(btWheelInfo **)&swig_a->result = result; 
}


void
_wrap_btWheelInfo_updateWheel(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btRigidBody *arg2 = 0 ;
  RaycastInfo *arg3 = 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    btRigidBody *arg2;
    RaycastInfo *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = *(btRigidBody **)&swig_a->arg2; 
  arg3 = *(RaycastInfo **)&swig_a->arg3; 
  
  (arg1)->updateWheel((btRigidBody const &)*arg2,*arg3);
  
}


void
_wrap_btWheelInfo_m_clippedInvContactDotSuspension_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_clippedInvContactDotSuspension = arg2;
  
}


void
_wrap_btWheelInfo_m_clippedInvContactDotSuspension_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_clippedInvContactDotSuspension);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_suspensionRelativeVelocity_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_suspensionRelativeVelocity = arg2;
  
}


void
_wrap_btWheelInfo_m_suspensionRelativeVelocity_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_suspensionRelativeVelocity);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_wheelsSuspensionForce_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_wheelsSuspensionForce = arg2;
  
}


void
_wrap_btWheelInfo_m_wheelsSuspensionForce_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_wheelsSuspensionForce);
  swig_a->result = result; 
}


void
_wrap_btWheelInfo_m_skidInfo_set(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  struct swigargs {
    btWheelInfo *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  arg2 = (btScalar)swig_a->arg2; 
  
  if (arg1) (arg1)->m_skidInfo = arg2;
  
}


void
_wrap_btWheelInfo_m_skidInfo_get(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  struct swigargs {
    btWheelInfo *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  result = (btScalar) ((arg1)->m_skidInfo);
  swig_a->result = result; 
}


void
_wrap_delete_btWheelInfo(void *swig_v)
{
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  
  struct swigargs {
    btWheelInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btWheelInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_delete_btActionInterface(void *swig_v)
{
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  
  struct swigargs {
    btActionInterface *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActionInterface **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_btActionInterface_updateAction(void *swig_v)
{
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  struct swigargs {
    btActionInterface *arg1;
    btCollisionWorld *arg2;
    float arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActionInterface **)&swig_a->arg1; 
  arg2 = *(btCollisionWorld **)&swig_a->arg2; 
  arg3 = (btScalar)swig_a->arg3; 
  
  (arg1)->updateAction(arg2,arg3);
  
}


void
_wrap_btActionInterface_debugDraw(void *swig_v)
{
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  struct swigargs {
    btActionInterface *arg1;
    btIDebugDraw *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btActionInterface **)&swig_a->arg1; 
  arg2 = *(btIDebugDraw **)&swig_a->arg2; 
  
  (arg1)->debugDraw(arg2);
  
}


void
_wrap_new_btDefaultVehicleRaycaster(void *swig_v)
{
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDefaultVehicleRaycaster *result = 0 ;
  
  struct swigargs {
    btDynamicsWorld *arg1;
    long : 0;
    btDefaultVehicleRaycaster *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDynamicsWorld **)&swig_a->arg1; 
  
  result = (btDefaultVehicleRaycaster *)new btDefaultVehicleRaycaster(arg1);
  *(btDefaultVehicleRaycaster **)&swig_a->result = result; 
}


void
_wrap_btDefaultVehicleRaycaster_castRay(void *swig_v)
{
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVehicleRaycasterResult *arg4 = 0 ;
  void *result = 0 ;
  
  struct swigargs {
    btDefaultVehicleRaycaster *arg1;
    btVector3 *arg2;
    btVector3 *arg3;
    btVehicleRaycasterResult *arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultVehicleRaycaster **)&swig_a->arg1; 
  arg2 = *(btVector3 **)&swig_a->arg2; 
  arg3 = *(btVector3 **)&swig_a->arg3; 
  arg4 = *(btVehicleRaycasterResult **)&swig_a->arg4; 
  
  result = (void *)(arg1)->castRay((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_delete_btDefaultVehicleRaycaster(void *swig_v)
{
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  
  struct swigargs {
    btDefaultVehicleRaycaster *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(btDefaultVehicleRaycaster **)&swig_a->arg1; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

